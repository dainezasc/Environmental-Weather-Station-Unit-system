
LoraSensorTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000172  00800100  00003106  0000319a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003106  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800272  00800272  0000330c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000330c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  000033a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003161  00000000  00000000  000035d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010a0  00000000  00000000  00006735  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001632  00000000  00000000  000077d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e4  00000000  00000000  00008e08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ac4  00000000  00000000  000094ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001def  00000000  00000000  00009fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  0000bd9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__ctors_end>
       4:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__vector_1>
       8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
       c:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__vector_3>
      10:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__vector_4>
      14:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      18:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      1c:	0c 94 98 01 	jmp	0x330	; 0x330 <__vector_7>
      20:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      24:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      28:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      2c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      30:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      34:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      38:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      3c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      40:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      44:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      48:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      4c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      50:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      54:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      58:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      5c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      60:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      64:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <r_FIFO+0x4e>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	00 40       	sbci	r16, 0x00	; 0
      ec:	7a 10       	cpse	r7, r10
      ee:	f3 5a       	subi	r31, 0xA3	; 163
      f0:	00 a0       	ldd	r0, Z+32	; 0x20
      f2:	72 4e       	sbci	r23, 0xE2	; 226
      f4:	18 09       	sbc	r17, r8
      f6:	00 10       	cpse	r0, r0
      f8:	a5 d4       	rcall	.+2378   	; 0xa44 <setTxPower+0x1e>
      fa:	e8 00       	.word	0x00e8	; ????
      fc:	00 e8       	ldi	r16, 0x80	; 128
      fe:	76 48       	sbci	r23, 0x86	; 134
     100:	17 00       	.word	0x0017	; ????
     102:	00 e4       	ldi	r16, 0x40	; 64
     104:	0b 54       	subi	r16, 0x4B	; 75
     106:	02 00       	.word	0x0002	; ????
     108:	00 ca       	rjmp	.-3072   	; 0xfffff50a <__eeprom_end+0xff7ef50a>
     10a:	9a 3b       	cpi	r25, 0xBA	; 186
     10c:	00 00       	nop
     10e:	00 e1       	ldi	r16, 0x10	; 16
     110:	f5 05       	cpc	r31, r5
     112:	00 00       	nop
     114:	80 96       	adiw	r24, 0x20	; 32
     116:	98 00       	.word	0x0098	; ????
     118:	00 00       	nop
     11a:	40 42       	sbci	r20, 0x20	; 32
     11c:	0f 00       	.word	0x000f	; ????
     11e:	00 00       	nop
     120:	a0 86       	std	Z+8, r10	; 0x08
     122:	01 00       	.word	0x0001	; ????
     124:	00 00       	nop
     126:	10 27       	eor	r17, r16
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	e8 03       	fmulsu	r22, r16
     12e:	00 00       	nop
     130:	00 00       	nop
     132:	64 00       	.word	0x0064	; ????
     134:	00 00       	nop
     136:	00 00       	nop
     138:	0a 00       	.word	0x000a	; ????
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	01 00       	.word	0x0001	; ????
     140:	00 00       	nop
     142:	00 00       	nop
     144:	2c 76       	andi	r18, 0x6C	; 108
     146:	d8 88       	ldd	r13, Y+16	; 0x10
     148:	dc 67       	ori	r29, 0x7C	; 124
     14a:	4f 08       	sbc	r4, r15
     14c:	23 df       	rcall	.-442    	; 0xffffff94 <__eeprom_end+0xff7eff94>
     14e:	c1 df       	rcall	.-126    	; 0xd2 <__SREG__+0x93>
     150:	ae 59       	subi	r26, 0x9E	; 158
     152:	e1 b1       	in	r30, 0x01	; 1
     154:	b7 96       	adiw	r30, 0x27	; 39
     156:	e5 e3       	ldi	r30, 0x35	; 53
     158:	e4 53       	subi	r30, 0x34	; 52
     15a:	c6 3a       	cpi	r28, 0xA6	; 166
     15c:	e6 51       	subi	r30, 0x16	; 22
     15e:	99 76       	andi	r25, 0x69	; 105
     160:	96 e8       	ldi	r25, 0x86	; 134
     162:	e6 c2       	rjmp	.+1484   	; 0x730 <insert_array+0x42>
     164:	84 26       	eor	r8, r20
     166:	eb 89       	ldd	r30, Y+19	; 0x13
     168:	8c 9b       	sbis	0x11, 4	; 17
     16a:	62 ed       	ldi	r22, 0xD2	; 210
     16c:	40 7c       	andi	r20, 0xC0	; 192
     16e:	6f fc       	.word	0xfc6f	; ????
     170:	ef bc       	out	0x2f, r14	; 47
     172:	9c 9f       	mul	r25, r28
     174:	40 f2       	brcs	.-112    	; 0x106 <__trampolines_end+0x1c>
     176:	ba a5       	ldd	r27, Y+42	; 0x2a
     178:	6f a5       	ldd	r22, Y+47	; 0x2f
     17a:	f4 90       	lpm	r15, Z
     17c:	05 5a       	subi	r16, 0xA5	; 165
     17e:	2a f7       	brpl	.-54     	; 0x14a <__trampolines_end+0x60>
     180:	5c 93       	st	X, r21
     182:	6b 6c       	ori	r22, 0xCB	; 203
     184:	f9 67       	ori	r31, 0x79	; 121
     186:	6d c1       	rjmp	.+730    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     188:	1b fc       	.word	0xfc1b	; ????
     18a:	e0 e4       	ldi	r30, 0x40	; 64
     18c:	0d 47       	sbci	r16, 0x7D	; 125
     18e:	fe f5       	brtc	.+126    	; 0x20e <.do_clear_bss_loop>
     190:	20 e6       	ldi	r18, 0x60	; 96
     192:	b5 00       	.word	0x00b5	; ????
     194:	d0 ed       	ldi	r29, 0xD0	; 208
     196:	90 2e       	mov	r9, r16
     198:	03 00       	.word	0x0003	; ????
     19a:	94 35       	cpi	r25, 0x54	; 84
     19c:	77 05       	cpc	r23, r7
     19e:	00 80       	ld	r0, Z
     1a0:	84 1e       	adc	r8, r20
     1a2:	08 00       	.word	0x0008	; ????
     1a4:	00 20       	and	r0, r0
     1a6:	4e 0a       	sbc	r4, r30
     1a8:	00 00       	nop
     1aa:	00 c8       	rjmp	.-4096   	; 0xfffff1ac <__eeprom_end+0xff7ef1ac>
     1ac:	0c 33       	cpi	r16, 0x3C	; 60
     1ae:	33 33       	cpi	r19, 0x33	; 51
     1b0:	33 0f       	add	r19, r19
     1b2:	98 6e       	ori	r25, 0xE8	; 232
     1b4:	12 83       	std	Z+2, r17	; 0x02
     1b6:	11 41       	sbci	r17, 0x11	; 17
     1b8:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1ba:	21 14       	cp	r2, r1
     1bc:	89 3b       	cpi	r24, 0xB9	; 185
     1be:	e6 55       	subi	r30, 0x56	; 86
     1c0:	16 cf       	rjmp	.-468    	; 0xffffffee <__eeprom_end+0xff7effee>
     1c2:	fe e6       	ldi	r31, 0x6E	; 110
     1c4:	db 18       	sub	r13, r11
     1c6:	d1 84       	ldd	r13, Z+9	; 0x09
     1c8:	4b 38       	cpi	r20, 0x8B	; 139
     1ca:	1b f7       	brvc	.-58     	; 0x192 <__trampolines_end+0xa8>
     1cc:	7c 1d       	adc	r23, r12
     1ce:	90 1d       	adc	r25, r0
     1d0:	a4 bb       	out	0x14, r26	; 20
     1d2:	e4 24       	eor	r14, r4
     1d4:	20 32       	cpi	r18, 0x20	; 32
     1d6:	84 72       	andi	r24, 0x24	; 36
     1d8:	5e 22       	and	r5, r30
     1da:	81 00       	.word	0x0081	; ????
     1dc:	c9 f1       	breq	.+114    	; 0x250 <adc_readsel+0xa>
     1de:	24 ec       	ldi	r18, 0xC4	; 196
     1e0:	a1 e5       	ldi	r26, 0x51	; 81
     1e2:	3d 27       	eor	r19, r29

000001e4 <__ctors_end>:
     1e4:	11 24       	eor	r1, r1
     1e6:	1f be       	out	0x3f, r1	; 63
     1e8:	cf ef       	ldi	r28, 0xFF	; 255
     1ea:	d8 e0       	ldi	r29, 0x08	; 8
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	cd bf       	out	0x3d, r28	; 61

000001f0 <__do_copy_data>:
     1f0:	12 e0       	ldi	r17, 0x02	; 2
     1f2:	a0 e0       	ldi	r26, 0x00	; 0
     1f4:	b1 e0       	ldi	r27, 0x01	; 1
     1f6:	e6 e0       	ldi	r30, 0x06	; 6
     1f8:	f1 e3       	ldi	r31, 0x31	; 49
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <__do_copy_data+0x10>
     1fc:	05 90       	lpm	r0, Z+
     1fe:	0d 92       	st	X+, r0
     200:	a2 37       	cpi	r26, 0x72	; 114
     202:	b1 07       	cpc	r27, r17
     204:	d9 f7       	brne	.-10     	; 0x1fc <__do_copy_data+0xc>

00000206 <__do_clear_bss>:
     206:	22 e0       	ldi	r18, 0x02	; 2
     208:	a2 e7       	ldi	r26, 0x72	; 114
     20a:	b2 e0       	ldi	r27, 0x02	; 2
     20c:	01 c0       	rjmp	.+2      	; 0x210 <.do_clear_bss_start>

0000020e <.do_clear_bss_loop>:
     20e:	1d 92       	st	X+, r1

00000210 <.do_clear_bss_start>:
     210:	ac 38       	cpi	r26, 0x8C	; 140
     212:	b2 07       	cpc	r27, r18
     214:	e1 f7       	brne	.-8      	; 0x20e <.do_clear_bss_loop>
     216:	0e 94 78 05 	call	0xaf0	; 0xaf0 <main>
     21a:	0c 94 81 18 	jmp	0x3102	; 0x3102 <_exit>

0000021e <__bad_interrupt>:
     21e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000222 <adc_setchannel>:
	ADCSRA |= (1 << ADEN);
	//calculate internal voltage
	intvoltage = ((ADC_BANDGAPVOLTAGE * ADC_REFRES) / adc) / 1000.0;
	#endif
	return intvoltage;
}
     222:	ea e7       	ldi	r30, 0x7A	; 122
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	90 81       	ld	r25, Z
     228:	9f 77       	andi	r25, 0x7F	; 127
     22a:	90 83       	st	Z, r25
     22c:	ac e7       	ldi	r26, 0x7C	; 124
     22e:	b0 e0       	ldi	r27, 0x00	; 0
     230:	9c 91       	ld	r25, X
     232:	98 7f       	andi	r25, 0xF8	; 248
     234:	9c 93       	st	X, r25
     236:	9c 91       	ld	r25, X
     238:	87 70       	andi	r24, 0x07	; 7
     23a:	98 2b       	or	r25, r24
     23c:	9c 93       	st	X, r25
     23e:	80 81       	ld	r24, Z
     240:	80 68       	ori	r24, 0x80	; 128
     242:	80 83       	st	Z, r24
     244:	08 95       	ret

00000246 <adc_readsel>:
     246:	ea e7       	ldi	r30, 0x7A	; 122
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	80 64       	ori	r24, 0x40	; 64
     24e:	80 83       	st	Z, r24
     250:	80 81       	ld	r24, Z
     252:	84 ff       	sbrs	r24, 4
     254:	fd cf       	rjmp	.-6      	; 0x250 <adc_readsel+0xa>
     256:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     25a:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     25e:	ea e7       	ldi	r30, 0x7A	; 122
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	90 81       	ld	r25, Z
     264:	90 61       	ori	r25, 0x10	; 16
     266:	90 83       	st	Z, r25
     268:	c9 01       	movw	r24, r18
     26a:	08 95       	ret

0000026c <adc_read>:
     26c:	0e 94 11 01 	call	0x222	; 0x222 <adc_setchannel>
     270:	0e 94 23 01 	call	0x246	; 0x246 <adc_readsel>
     274:	08 95       	ret

00000276 <adc_init>:
     276:	ac e7       	ldi	r26, 0x7C	; 124
     278:	b0 e0       	ldi	r27, 0x00	; 0
     27a:	1c 92       	st	X, r1
     27c:	ea e7       	ldi	r30, 0x7A	; 122
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	10 82       	st	Z, r1
     282:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
     286:	8c 91       	ld	r24, X
     288:	80 64       	ori	r24, 0x40	; 64
     28a:	8c 93       	st	X, r24
     28c:	80 81       	ld	r24, Z
     28e:	86 60       	ori	r24, 0x06	; 6
     290:	80 83       	st	Z, r24
     292:	8c 91       	ld	r24, X
     294:	8f 7d       	andi	r24, 0xDF	; 223
     296:	8c 93       	st	X, r24
     298:	80 81       	ld	r24, Z
     29a:	80 68       	ori	r24, 0x80	; 128
     29c:	80 83       	st	Z, r24
     29e:	08 95       	ret

000002a0 <adc_getresistence>:

/*
 * convert an adc value to a resistence value
 */
long adc_getresistence(uint16_t adcread, uint16_t adcbalanceresistor)
{
     2a0:	cf 92       	push	r12
     2a2:	df 92       	push	r13
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	9c 01       	movw	r18, r24
	if(adcread == 0)
     2aa:	89 2b       	or	r24, r25
     2ac:	c9 f0       	breq	.+50     	; 0x2e0 <adc_getresistence+0x40>
		return 0;
	else
		return (long)((long)(ADC_REFRES*(long)adcbalanceresistor)/adcread-(long)adcbalanceresistor);
     2ae:	6b 01       	movw	r12, r22
     2b0:	e1 2c       	mov	r14, r1
     2b2:	f1 2c       	mov	r15, r1
     2b4:	c7 01       	movw	r24, r14
     2b6:	b6 01       	movw	r22, r12
     2b8:	05 2e       	mov	r0, r21
     2ba:	5a e0       	ldi	r21, 0x0A	; 10
     2bc:	66 0f       	add	r22, r22
     2be:	77 1f       	adc	r23, r23
     2c0:	88 1f       	adc	r24, r24
     2c2:	99 1f       	adc	r25, r25
     2c4:	5a 95       	dec	r21
     2c6:	d1 f7       	brne	.-12     	; 0x2bc <adc_getresistence+0x1c>
     2c8:	50 2d       	mov	r21, r0
     2ca:	40 e0       	ldi	r20, 0x00	; 0
     2cc:	50 e0       	ldi	r21, 0x00	; 0
     2ce:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__divmodsi4>
     2d2:	ca 01       	movw	r24, r20
     2d4:	b9 01       	movw	r22, r18
     2d6:	6c 19       	sub	r22, r12
     2d8:	7d 09       	sbc	r23, r13
     2da:	8e 09       	sbc	r24, r14
     2dc:	9f 09       	sbc	r25, r15
     2de:	03 c0       	rjmp	.+6      	; 0x2e6 <adc_getresistence+0x46>
 * convert an adc value to a resistence value
 */
long adc_getresistence(uint16_t adcread, uint16_t adcbalanceresistor)
{
	if(adcread == 0)
		return 0;
     2e0:	60 e0       	ldi	r22, 0x00	; 0
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	cb 01       	movw	r24, r22
	else
		return (long)((long)(ADC_REFRES*(long)adcbalanceresistor)/adcread-(long)adcbalanceresistor);
}
     2e6:	ff 90       	pop	r15
     2e8:	ef 90       	pop	r14
     2ea:	df 90       	pop	r13
     2ec:	cf 90       	pop	r12
     2ee:	08 95       	ret

000002f0 <adc_getvoltage>:

/*
 * convert an adc value to a voltage value
 */
double adc_getvoltage(uint16_t adcread, double adcvref) {
     2f0:	cf 92       	push	r12
     2f2:	df 92       	push	r13
     2f4:	ef 92       	push	r14
     2f6:	ff 92       	push	r15
	if(adcread == 0)
     2f8:	00 97       	sbiw	r24, 0x00	; 0
     2fa:	91 f0       	breq	.+36     	; 0x320 <adc_getvoltage+0x30>
     2fc:	6a 01       	movw	r12, r20
     2fe:	7b 01       	movw	r14, r22
		return 0;
	else
		return (double)(adcread*adcvref/(double)ADC_REFRES);
     300:	bc 01       	movw	r22, r24
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__floatunsisf>
     30a:	a7 01       	movw	r20, r14
     30c:	96 01       	movw	r18, r12
     30e:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	40 e8       	ldi	r20, 0x80	; 128
     318:	5a e3       	ldi	r21, 0x3A	; 58
     31a:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     31e:	03 c0       	rjmp	.+6      	; 0x326 <adc_getvoltage+0x36>
/*
 * convert an adc value to a voltage value
 */
double adc_getvoltage(uint16_t adcread, double adcvref) {
	if(adcread == 0)
		return 0;
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	cb 01       	movw	r24, r22
	else
		return (double)(adcread*adcvref/(double)ADC_REFRES);
}
     326:	ff 90       	pop	r15
     328:	ef 90       	pop	r14
     32a:	df 90       	pop	r13
     32c:	cf 90       	pop	r12
     32e:	08 95       	ret

00000330 <__vector_7>:
 * Timer Compare Match interrupt handler
 *
 * This handler is used to generate host start conditions (Periods P1 and P2).
 * Using a 8bit timer with prescaler such that a timer tick corresponds to 1us (freq. = 1MHz).
 */
ISR(TIMER_CTC_VECTOR){
     330:	1f 92       	push	r1
     332:	0f 92       	push	r0
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	0f 92       	push	r0
     338:	11 24       	eor	r1, r1
     33a:	8f 93       	push	r24
     33c:	ef 93       	push	r30
     33e:	ff 93       	push	r31
	
	/* Using a 8bit timer maximum delay is 255us, we need at least 500us in Period P1.
	   Se, we need two timer interrupts. We check this with overflow_cnt and comparing
	   it the the define OVERFLOWS_HOST_START.
	   We make the pin = 0 at the begining of the state machine (function DHT22_StartReading) */
	if((state == DHT_HOST_START) && (overflow_cnt < (OVERFLOWS_HOST_START - 1))){
     340:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <state>
     344:	81 30       	cpi	r24, 0x01	; 1
     346:	91 f4       	brne	.+36     	; 0x36c <__vector_7+0x3c>
     348:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <overflow_cnt>
     34c:	81 11       	cpse	r24, r1
     34e:	04 c0       	rjmp	.+8      	; 0x358 <__vector_7+0x28>
		overflow_cnt++;
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <overflow_cnt>
     356:	29 c0       	rjmp	.+82     	; 0x3aa <__vector_7+0x7a>
	}
	/* After Period P1, we need to hold the pin high for aprox. 40us. So, we change timer compare
	   register to 40. */
	else if((state == DHT_HOST_START) && (overflow_cnt >= (OVERFLOWS_HOST_START - 1))){ // 510us have passed.
		PIN_HIGH(DHT22_PORT,DHT22_PIN); // Change pin to High for period P2.
     358:	5a 9a       	sbi	0x0b, 2	; 11
		overflow_cnt = 0;
     35a:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <overflow_cnt>
		state = DHT_HOST_PULLUP;
     35e:	82 e0       	ldi	r24, 0x02	; 2
     360:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <state>
		TIMER_OCR_REGISTER = 40;
     364:	88 e2       	ldi	r24, 0x28	; 40
     366:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		return;
     36a:	1f c0       	rjmp	.+62     	; 0x3aa <__vector_7+0x7a>
	}
	/* The Period P2 have passed. We need now to change the pin to input and wait for sensor
	   to respond. External INT is used. Sensor will respond by pulling the line down for aprox. 
	   80us. So, we can measure period P3 at the next rising edge interrupt. */
	else if (state == DHT_HOST_PULLUP){ // more 40us have passed
     36c:	82 30       	cpi	r24, 0x02	; 2
     36e:	99 f4       	brne	.+38     	; 0x396 <__vector_7+0x66>
		TIMER_OCR_REGISTER = 255; // Change timer compare to 255, for now on, the timer interrupt should not fire.
     370:	8f ef       	ldi	r24, 0xFF	; 255
     372:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		                          // If if fires, too much time has passed and something is wrong. We will clear
					              // the timer counter at the beggining of the external interrupt handler.
		SET_PIN_INPUT(DHT22_DDR,DHT22_PIN); // Set pin as input.
     376:	52 98       	cbi	0x0a, 2	; 10
		PIN_HIGH(DHT22_PORT,DHT22_PIN); // Write 1 to enable pullup.
     378:	5a 9a       	sbi	0x0b, 2	; 11
		EXT_INTERRUPT_DISABLE  // Disable external interrupt (in case it is already enable)
     37a:	e8 98       	cbi	0x1d, 0	; 29
		EXT_INTERRUPT_SET_RISING_EDGE // Setting ext. int to rising edge.
     37c:	e9 e6       	ldi	r30, 0x69	; 105
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	80 81       	ld	r24, Z
     382:	83 60       	ori	r24, 0x03	; 3
     384:	80 83       	st	Z, r24
		EXT_INTERRUPT_CLEAR_FLAG // Clear flag to avoid spurious firing of ext. int.
     386:	e0 9a       	sbi	0x1c, 0	; 28
		EXT_INTERRUPT_ENABLE  // Re-enable external int.
     388:	e8 9a       	sbi	0x1d, 0	; 29
		TIMER_COUNTER_REGISTER = 0; // Reset counter
     38a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
		state = DHT_WAIT_SENSOR_RESPONSE; // Change state.
     38e:	83 e0       	ldi	r24, 0x03	; 3
     390:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <state>
		return; // Return of the int. handler.
     394:	0a c0       	rjmp	.+20     	; 0x3aa <__vector_7+0x7a>
	}
	/* If the timer interrupt fired while not in the previous states, than too much time
	   has passed and we signal a error. */
	else{ 
		state = DHT_ERROR_NOT_RESPOND; // Change to a error state
     396:	88 e0       	ldi	r24, 0x08	; 8
     398:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <state>
		TIMER_STOP // Stop timer.
     39c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
		EXT_INTERRUPT_DISABLE  // Disable external interrupt
     3a0:	e8 98       	cbi	0x1d, 0	; 29
		SET_PIN_OUTPUT(DHT22_DDR,DHT22_PIN); // Set pin back to output.
     3a2:	52 9a       	sbi	0x0a, 2	; 10
		PIN_HIGH(DHT22_PORT,DHT22_PIN); // Set pin high to disable DHT22.
     3a4:	5a 9a       	sbi	0x0b, 2	; 11
		bitcounter = 0; // reset bit counter.
     3a6:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <bitcounter>
	}
}
     3aa:	ff 91       	pop	r31
     3ac:	ef 91       	pop	r30
     3ae:	8f 91       	pop	r24
     3b0:	0f 90       	pop	r0
     3b2:	0f be       	out	0x3f, r0	; 63
     3b4:	0f 90       	pop	r0
     3b6:	1f 90       	pop	r1
     3b8:	18 95       	reti

000003ba <__vector_1>:
 * External interrupt handler
 * 
 * The external interrupt is used to measure the width of a pulse and change
 * the state accordingly.
 */
ISR(EXT_INTERRUPT_VECTOR){
     3ba:	1f 92       	push	r1
     3bc:	0f 92       	push	r0
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	0f 92       	push	r0
     3c2:	11 24       	eor	r1, r1
     3c4:	2f 93       	push	r18
     3c6:	3f 93       	push	r19
     3c8:	4f 93       	push	r20
     3ca:	5f 93       	push	r21
     3cc:	8f 93       	push	r24
     3ce:	9f 93       	push	r25
     3d0:	ef 93       	push	r30
     3d2:	ff 93       	push	r31
	
	uint8_t counter_us;
	counter_us = TIMER_COUNTER_REGISTER; // Store counter value
     3d4:	e2 eb       	ldi	r30, 0xB2	; 178
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
	TIMER_COUNTER_REGISTER = 0; // Reset counter.
     3da:	10 82       	st	Z, r1
	   (or  < 100 in this case) when the line rises it
	   indicates that the sensor responded.
	   Now we have to change interrupt sense to falling edge in order to
	   detect the period P4.
	 */
	if ((state == DHT_WAIT_SENSOR_RESPONSE && (counter_us > 40) && counter_us < 100)){ // Sensor responded (Period P3).
     3dc:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <state>
     3e0:	93 30       	cpi	r25, 0x03	; 3
     3e2:	99 f4       	brne	.+38     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3e4:	89 52       	subi	r24, 0x29	; 41
     3e6:	8b 33       	cpi	r24, 0x3B	; 59
     3e8:	08 f0       	brcs	.+2      	; 0x3ec <__vector_1+0x32>
     3ea:	75 c0       	rjmp	.+234    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
		EXT_INTERRUPT_DISABLE  // Disabling interrupt.
     3ec:	e8 98       	cbi	0x1d, 0	; 29
		EXT_INTERRUPT_SET_FALLING_EDGE  // Changing interrupt sense to falling edge.
     3ee:	e9 e6       	ldi	r30, 0x69	; 105
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	80 81       	ld	r24, Z
     3f4:	82 60       	ori	r24, 0x02	; 2
     3f6:	80 83       	st	Z, r24
     3f8:	80 81       	ld	r24, Z
     3fa:	8e 7f       	andi	r24, 0xFE	; 254
     3fc:	80 83       	st	Z, r24
		EXT_INTERRUPT_CLEAR_FLAG  // clearing flag (this prevents interrupt to fire when changing to falling edge).
     3fe:	e0 9a       	sbi	0x1c, 0	; 28
		EXT_INTERRUPT_ENABLE  // Re-enabling interrupt.
     400:	e8 9a       	sbi	0x1d, 0	; 29
		state = DHT_SENSOR_PULLUP; // Changing state.
     402:	84 e0       	ldi	r24, 0x04	; 4
     404:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <state>
		return;
     408:	76 c0       	rjmp	.+236    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
	/* Period P4. When the falling edge interrupt occurs, indicating the end of P4,
	   we get the counter register and check it value. If it is less than 100 (period
	   P4 is also aprox. 80us) then the sensor responded pulling up the line. Now the 
	   bit transmission will start and we only need to measure the with of each bit. So,
	   the external interrupt can stay on falling edge. */
	else if((state == DHT_SENSOR_PULLUP) && (counter_us > 40) && (counter_us < 100)){ // Sensor responded (Period P4).
     40a:	94 30       	cpi	r25, 0x04	; 4
     40c:	41 f4       	brne	.+16     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     40e:	89 52       	subi	r24, 0x29	; 41
     410:	8b 33       	cpi	r24, 0x3B	; 59
     412:	08 f0       	brcs	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     414:	60 c0       	rjmp	.+192    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
		state = DHT_TRANSFERING; // Change state
     416:	85 e0       	ldi	r24, 0x05	; 5
     418:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <state>
		return;
     41c:	6c c0       	rjmp	.+216    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
	}
	/* Period P5. Measuring the with of the pulse in order to determine if it is a 0 or a 1.
	   Bit 0 has a period of 50us + 28us. So we check if it is larger than 50us and smaller than 110. (DHT22 timing is no precise, neither the timer) */
	else if((state == DHT_TRANSFERING) && (counter_us > 50) && (counter_us <= 110)){ // Sensor sent a databit 0 (Period P5).
     41e:	95 30       	cpi	r25, 0x05	; 5
     420:	09 f0       	breq	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     422:	59 c0       	rjmp	.+178    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     424:	83 33       	cpi	r24, 0x33	; 51
     426:	40 f0       	brcs	.+16     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     428:	8f 36       	cpi	r24, 0x6F	; 111
     42a:	48 f4       	brcc	.+18     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		// If bit is a 0, only increment the bit counter (we need only to shift 1's).
		bitcounter++; 
     42c:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <bitcounter>
     430:	8f 5f       	subi	r24, 0xFF	; 255
     432:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <bitcounter>
     436:	4f c0       	rjmp	.+158    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
	}
	/* Period P5. Bit 1 has a period of 50us + 70us. So, we check if it is lager than 50us and smaller than 160. */
	else if((state == DHT_TRANSFERING) && (counter_us > 110) && (counter_us <= 160)){ // Sensor sent a databit 1 (Period P5).
     438:	8f 36       	cpi	r24, 0x6F	; 111
     43a:	08 f4       	brcc	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     43c:	4c c0       	rjmp	.+152    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     43e:	81 3a       	cpi	r24, 0xA1	; 161
     440:	08 f0       	brcs	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     442:	49 c0       	rjmp	.+146    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
		/* If bit is one, we shift one to the variables rawHumidity, rawTemperature and checkSum according
		   with bit position givem by bitcounter */
		if (bitcounter < 16) // Humidity
     444:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <bitcounter>
     448:	80 31       	cpi	r24, 0x10	; 16
     44a:	a8 f4       	brcc	.+42     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
		{
			rawHumidity |= (1 << (15 - bitcounter));
     44c:	4f e0       	ldi	r20, 0x0F	; 15
     44e:	50 e0       	ldi	r21, 0x00	; 0
     450:	48 1b       	sub	r20, r24
     452:	51 09       	sbc	r21, r1
     454:	21 e0       	ldi	r18, 0x01	; 1
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	02 c0       	rjmp	.+4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     45a:	22 0f       	add	r18, r18
     45c:	33 1f       	adc	r19, r19
     45e:	4a 95       	dec	r20
     460:	e2 f7       	brpl	.-8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     462:	40 91 75 02 	lds	r20, 0x0275	; 0x800275 <rawHumidity>
     466:	50 91 76 02 	lds	r21, 0x0276	; 0x800276 <rawHumidity+0x1>
     46a:	24 2b       	or	r18, r20
     46c:	35 2b       	or	r19, r21
     46e:	30 93 76 02 	sts	0x0276, r19	; 0x800276 <rawHumidity+0x1>
     472:	20 93 75 02 	sts	0x0275, r18	; 0x800275 <rawHumidity>
		}
		if ((bitcounter > 15) && (bitcounter < 32))  // Temperature
     476:	90 ef       	ldi	r25, 0xF0	; 240
     478:	98 0f       	add	r25, r24
     47a:	90 31       	cpi	r25, 0x10	; 16
     47c:	a8 f4       	brcc	.+42     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
		{
			rawTemperature |= (1 << (31 - bitcounter));
     47e:	4f e1       	ldi	r20, 0x1F	; 31
     480:	50 e0       	ldi	r21, 0x00	; 0
     482:	48 1b       	sub	r20, r24
     484:	51 09       	sbc	r21, r1
     486:	21 e0       	ldi	r18, 0x01	; 1
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	02 c0       	rjmp	.+4      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     48c:	22 0f       	add	r18, r18
     48e:	33 1f       	adc	r19, r19
     490:	4a 95       	dec	r20
     492:	e2 f7       	brpl	.-8      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     494:	40 91 73 02 	lds	r20, 0x0273	; 0x800273 <rawTemperature>
     498:	50 91 74 02 	lds	r21, 0x0274	; 0x800274 <rawTemperature+0x1>
     49c:	24 2b       	or	r18, r20
     49e:	35 2b       	or	r19, r21
     4a0:	30 93 74 02 	sts	0x0274, r19	; 0x800274 <rawTemperature+0x1>
     4a4:	20 93 73 02 	sts	0x0273, r18	; 0x800273 <rawTemperature>
		}
		if ((bitcounter > 31) && (bitcounter < 40))  // CRC data
     4a8:	90 ee       	ldi	r25, 0xE0	; 224
     4aa:	98 0f       	add	r25, r24
     4ac:	98 30       	cpi	r25, 0x08	; 8
     4ae:	80 f4       	brcc	.+32     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
		{
			checkSum |= (1 << (39 - bitcounter));
     4b0:	47 e2       	ldi	r20, 0x27	; 39
     4b2:	50 e0       	ldi	r21, 0x00	; 0
     4b4:	48 1b       	sub	r20, r24
     4b6:	51 09       	sbc	r21, r1
     4b8:	21 e0       	ldi	r18, 0x01	; 1
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4be:	22 0f       	add	r18, r18
     4c0:	33 1f       	adc	r19, r19
     4c2:	4a 95       	dec	r20
     4c4:	e2 f7       	brpl	.-8      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4c6:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <__data_end>
     4ca:	29 2b       	or	r18, r25
     4cc:	20 93 72 02 	sts	0x0272, r18	; 0x800272 <__data_end>
		}
		bitcounter++; // Increments bit counter, the state does not change. 
     4d0:	8f 5f       	subi	r24, 0xFF	; 255
     4d2:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <bitcounter>
	}
	
	/* Check if all bits arrived. If so, stop the timer and external interrupt. */
	if (bitcounter > 39){ // Transfer done
     4d6:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <bitcounter>
     4da:	88 32       	cpi	r24, 0x28	; 40
     4dc:	60 f0       	brcs	.+24     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
		TIMER_STOP // Stop timer.
     4de:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
		TIMER_COUNTER_REGISTER = 0; // Reset counter.
     4e2:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
		EXT_INTERRUPT_DISABLE // Disabling interrupt
     4e6:	e8 98       	cbi	0x1d, 0	; 29
		SET_PIN_OUTPUT(DHT22_DDR,DHT22_PIN);
     4e8:	52 9a       	sbi	0x0a, 2	; 10
		PIN_HIGH(DHT22_PORT,DHT22_PIN);
     4ea:	5a 9a       	sbi	0x0b, 2	; 11
		bitcounter = 0; // Reset bit counter.
     4ec:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <bitcounter>
		state = DHT_CHECK_CRC; // Change state.
     4f0:	86 e0       	ldi	r24, 0x06	; 6
     4f2:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <state>
	}
	
	/* CRC check is done at outside interrupt handler, by the
	function DHT22_CheckStatus. This way, this handler is very fast. */
				
}
     4f6:	ff 91       	pop	r31
     4f8:	ef 91       	pop	r30
     4fa:	9f 91       	pop	r25
     4fc:	8f 91       	pop	r24
     4fe:	5f 91       	pop	r21
     500:	4f 91       	pop	r20
     502:	3f 91       	pop	r19
     504:	2f 91       	pop	r18
     506:	0f 90       	pop	r0
     508:	0f be       	out	0x3f, r0	; 63
     50a:	0f 90       	pop	r0
     50c:	1f 90       	pop	r1
     50e:	18 95       	reti

00000510 <DHT22_CheckStatus>:
 *    DHT_DATA_READY: Data is ok and can be used by the main program.
 *    DHT_ERROR_CHECKSUM: Error, checksum does no match.
 *    DHT_ERROR_NOT_RESPOND: Sensor is not connected or not responding for some reason.
 */

DHT22_STATE_t DHT22_CheckStatus(DHT22_DATA_t* data){
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	ec 01       	movw	r28, r24
	
	/* If a transfer is complete, check CRC and update sensor data structure */
	if (state == DHT_CHECK_CRC){
     516:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <state>
     51a:	86 30       	cpi	r24, 0x06	; 6
     51c:	09 f0       	breq	.+2      	; 0x520 <DHT22_CheckStatus+0x10>
     51e:	98 c0       	rjmp	.+304    	; 0x650 <DHT22_CheckStatus+0x140>
		
		// calculate checksum:
		csPart1 = rawHumidity >> 8;
     520:	40 91 75 02 	lds	r20, 0x0275	; 0x800275 <rawHumidity>
     524:	50 91 76 02 	lds	r21, 0x0276	; 0x800276 <rawHumidity+0x1>
     528:	25 2f       	mov	r18, r21
     52a:	33 27       	eor	r19, r19
     52c:	20 93 7e 02 	sts	0x027E, r18	; 0x80027e <csPart1>
		csPart2 = rawHumidity & 0xFF;
     530:	40 93 80 02 	sts	0x0280, r20	; 0x800280 <csPart2>
		csPart3 = rawTemperature >> 8;
     534:	e0 91 73 02 	lds	r30, 0x0273	; 0x800273 <rawTemperature>
     538:	f0 91 74 02 	lds	r31, 0x0274	; 0x800274 <rawTemperature+0x1>
     53c:	8f 2f       	mov	r24, r31
     53e:	99 27       	eor	r25, r25
     540:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <csPart3>
		csPart4 = rawTemperature & 0xFF;
     544:	e0 93 81 02 	sts	0x0281, r30	; 0x800281 <csPart4>
		
		if( checkSum == ( (csPart1 + csPart2 + csPart3 + csPart4) & 0xFF ) ){ // Checksum correct
     548:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <__data_end>
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	24 0f       	add	r18, r20
     550:	31 1d       	adc	r19, r1
     552:	82 0f       	add	r24, r18
     554:	93 1f       	adc	r25, r19
     556:	8e 0f       	add	r24, r30
     558:	91 1d       	adc	r25, r1
     55a:	99 27       	eor	r25, r25
     55c:	68 17       	cp	r22, r24
     55e:	79 07       	cpc	r23, r25
     560:	09 f0       	breq	.+2      	; 0x564 <DHT22_CheckStatus+0x54>
     562:	73 c0       	rjmp	.+230    	; 0x64a <DHT22_CheckStatus+0x13a>
			
			/* raw data to sensor values */
			data->humidity_integral = (uint8_t)(rawHumidity / 10);
     564:	9a 01       	movw	r18, r20
     566:	ad ec       	ldi	r26, 0xCD	; 205
     568:	bc ec       	ldi	r27, 0xCC	; 204
     56a:	0e 94 93 10 	call	0x2126	; 0x2126 <__umulhisi3>
     56e:	96 95       	lsr	r25
     570:	87 95       	ror	r24
     572:	96 95       	lsr	r25
     574:	87 95       	ror	r24
     576:	96 95       	lsr	r25
     578:	87 95       	ror	r24
     57a:	8a 83       	std	Y+2, r24	; 0x02
			data->humidity_decimal = (uint8_t)(rawHumidity % 10);			
     57c:	9c 01       	movw	r18, r24
     57e:	22 0f       	add	r18, r18
     580:	33 1f       	adc	r19, r19
     582:	88 0f       	add	r24, r24
     584:	99 1f       	adc	r25, r25
     586:	88 0f       	add	r24, r24
     588:	99 1f       	adc	r25, r25
     58a:	88 0f       	add	r24, r24
     58c:	99 1f       	adc	r25, r25
     58e:	82 0f       	add	r24, r18
     590:	93 1f       	adc	r25, r19
     592:	48 1b       	sub	r20, r24
     594:	59 0b       	sbc	r21, r25
     596:	4b 83       	std	Y+3, r20	; 0x03
			if(rawTemperature & 0x8000)	// Check if temperature is below zero, non standard way of encoding negative numbers!
     598:	ff 23       	and	r31, r31
     59a:	64 f5       	brge	.+88     	; 0x5f4 <DHT22_CheckStatus+0xe4>
			{
				rawTemperature &= 0x7FFF; // Remove signal bit
     59c:	9f 01       	movw	r18, r30
     59e:	3f 77       	andi	r19, 0x7F	; 127
     5a0:	30 93 74 02 	sts	0x0274, r19	; 0x800274 <rawTemperature+0x1>
     5a4:	20 93 73 02 	sts	0x0273, r18	; 0x800273 <rawTemperature>
				data->temperature_integral = (int8_t)(rawTemperature / 10) * -1;
     5a8:	0e 94 93 10 	call	0x2126	; 0x2126 <__umulhisi3>
     5ac:	96 95       	lsr	r25
     5ae:	87 95       	ror	r24
     5b0:	96 95       	lsr	r25
     5b2:	87 95       	ror	r24
     5b4:	96 95       	lsr	r25
     5b6:	87 95       	ror	r24
     5b8:	81 95       	neg	r24
     5ba:	88 83       	st	Y, r24
				data->temperature_decimal = (uint8_t)(rawTemperature % 10);
     5bc:	40 91 73 02 	lds	r20, 0x0273	; 0x800273 <rawTemperature>
     5c0:	50 91 74 02 	lds	r21, 0x0274	; 0x800274 <rawTemperature+0x1>
     5c4:	9a 01       	movw	r18, r20
     5c6:	0e 94 93 10 	call	0x2126	; 0x2126 <__umulhisi3>
     5ca:	96 95       	lsr	r25
     5cc:	87 95       	ror	r24
     5ce:	96 95       	lsr	r25
     5d0:	87 95       	ror	r24
     5d2:	96 95       	lsr	r25
     5d4:	87 95       	ror	r24
     5d6:	9c 01       	movw	r18, r24
     5d8:	22 0f       	add	r18, r18
     5da:	33 1f       	adc	r19, r19
     5dc:	88 0f       	add	r24, r24
     5de:	99 1f       	adc	r25, r25
     5e0:	88 0f       	add	r24, r24
     5e2:	99 1f       	adc	r25, r25
     5e4:	88 0f       	add	r24, r24
     5e6:	99 1f       	adc	r25, r25
     5e8:	82 0f       	add	r24, r18
     5ea:	93 1f       	adc	r25, r19
     5ec:	48 1b       	sub	r20, r24
     5ee:	59 0b       	sbc	r21, r25
     5f0:	49 83       	std	Y+1, r20	; 0x01
     5f2:	27 c0       	rjmp	.+78     	; 0x642 <DHT22_CheckStatus+0x132>
			} else
			{
				data->temperature_integral = (int8_t)(rawTemperature / 10);
     5f4:	9f 01       	movw	r18, r30
     5f6:	ad ec       	ldi	r26, 0xCD	; 205
     5f8:	bc ec       	ldi	r27, 0xCC	; 204
     5fa:	0e 94 93 10 	call	0x2126	; 0x2126 <__umulhisi3>
     5fe:	96 95       	lsr	r25
     600:	87 95       	ror	r24
     602:	96 95       	lsr	r25
     604:	87 95       	ror	r24
     606:	96 95       	lsr	r25
     608:	87 95       	ror	r24
     60a:	88 83       	st	Y, r24
				data->temperature_decimal = (uint8_t)(rawTemperature % 10);
     60c:	40 91 73 02 	lds	r20, 0x0273	; 0x800273 <rawTemperature>
     610:	50 91 74 02 	lds	r21, 0x0274	; 0x800274 <rawTemperature+0x1>
     614:	9a 01       	movw	r18, r20
     616:	0e 94 93 10 	call	0x2126	; 0x2126 <__umulhisi3>
     61a:	96 95       	lsr	r25
     61c:	87 95       	ror	r24
     61e:	96 95       	lsr	r25
     620:	87 95       	ror	r24
     622:	96 95       	lsr	r25
     624:	87 95       	ror	r24
     626:	9c 01       	movw	r18, r24
     628:	22 0f       	add	r18, r18
     62a:	33 1f       	adc	r19, r19
     62c:	88 0f       	add	r24, r24
     62e:	99 1f       	adc	r25, r25
     630:	88 0f       	add	r24, r24
     632:	99 1f       	adc	r25, r25
     634:	88 0f       	add	r24, r24
     636:	99 1f       	adc	r25, r25
     638:	82 0f       	add	r24, r18
     63a:	93 1f       	adc	r25, r19
     63c:	48 1b       	sub	r20, r24
     63e:	59 0b       	sbc	r21, r25
     640:	49 83       	std	Y+1, r20	; 0x01
			}
			state = DHT_DATA_READY;
     642:	87 e0       	ldi	r24, 0x07	; 7
     644:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <state>
     648:	03 c0       	rjmp	.+6      	; 0x650 <DHT22_CheckStatus+0x140>
		}
		else{
			state = DHT_ERROR_CHECKSUM;
     64a:	89 e0       	ldi	r24, 0x09	; 9
     64c:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <state>
		}
	}
	
	return state;
}
     650:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <state>
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	08 95       	ret

0000065a <DHT22_Init>:
 * It configures the sensor pin and timer mode.
 */
void DHT22_Init(void){
	
	/* Configuring DHT pin as output (initially) */
	DHT22_DDR |= (1 << DHT22_PIN);
     65a:	52 9a       	sbi	0x0a, 2	; 10
	PIN_HIGH(DHT22_PORT,DHT22_PIN);
     65c:	5a 9a       	sbi	0x0b, 2	; 11
	
	/* Timer config. */
	TIMER_SETUP_CTC  // Seting timer to CTC
     65e:	82 e0       	ldi	r24, 0x02	; 2
     660:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TIMER_ENABLE_CTC_INTERRUPT  // Enable compare match interrupt
     664:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	// Timer is started by the function DHT22_StartReading. For now
	// it remains with prescaler = 0 (disable).
	TIMER_STOP
     668:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	
	state = DHT_STOPPED;
     66c:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <state>
     670:	08 95       	ret

00000672 <DHT22_StartReading>:
 *                 can wait for data using DHT22_CheckStatus() function.
 */
DHT22_STATE_t DHT22_StartReading(void){
	
	/* Check if the state machine is stopped. If so, start it. */
	if (state == DHT_STOPPED || state == DHT_DATA_READY || state == DHT_ERROR_CHECKSUM || state == DHT_ERROR_NOT_RESPOND){
     672:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <state>
     676:	88 23       	and	r24, r24
     678:	19 f0       	breq	.+6      	; 0x680 <DHT22_StartReading+0xe>
     67a:	87 50       	subi	r24, 0x07	; 7
     67c:	83 30       	cpi	r24, 0x03	; 3
     67e:	f0 f4       	brcc	.+60     	; 0x6bc <DHT22_StartReading+0x4a>
		/* Reset values and counters */
		rawTemperature = 0;
     680:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <rawTemperature+0x1>
     684:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <rawTemperature>
		rawHumidity = 0;
     688:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <rawHumidity+0x1>
     68c:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <rawHumidity>
		checkSum = 0;
     690:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <__data_end>
		overflow_cnt = 0;
     694:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <overflow_cnt>
		bitcounter = 0;
     698:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <bitcounter>
		/* Configuring peripherals */
		//EIMSK &= ~(1 << INT0); // Disable external interrupt
		EXT_INTERRUPT_DISABLE;
     69c:	e8 98       	cbi	0x1d, 0	; 29
		DHT22_DDR |= (1 << DHT22_PIN); // Configuring sensor pin as output.
     69e:	52 9a       	sbi	0x0a, 2	; 10
		PIN_LOW(DHT22_PORT,DHT22_PIN); // Write 0 to pin. Start condition sent to sensor.
     6a0:	5a 98       	cbi	0x0b, 2	; 11
		TIMER_OCR_REGISTER = 255; // Timer compare value equals to overflow (interrupt will fired at 255us).
     6a2:	8f ef       	ldi	r24, 0xFF	; 255
     6a4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		TIMER_COUNTER_REGISTER = 0; // Reset counter value.
     6a8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
		state = DHT_HOST_START; // Change state.
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <state>
		TIMER_START // Start timer with prescaler such that 1 tick equals 1us (freq = 1MHz).
     6b2:	82 e0       	ldi	r24, 0x02	; 2
     6b4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
		return DHT_STARTED; // Return value indicating that the state machine started.
     6b8:	8b e0       	ldi	r24, 0x0B	; 11
     6ba:	08 95       	ret
	}
	else{
		return DHT_BUSY; // If state machine is busy, return this value.
     6bc:	8a e0       	ldi	r24, 0x0A	; 10
	}
	
     6be:	08 95       	ret

000006c0 <init_struct_trx_buffer>:
 }

 float packetSnr(void)
 {
	 return ((int8_t)SPI_LoRa_Read(RegPktSnrValue)) * 0.25;
 }
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	86 e0       	ldi	r24, 0x06	; 6
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <malloc>
     6cc:	ec 01       	movw	r28, r24
     6ce:	84 e0       	ldi	r24, 0x04	; 4
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <malloc>
     6d6:	99 83       	std	Y+1, r25	; 0x01
     6d8:	88 83       	st	Y, r24
     6da:	84 e0       	ldi	r24, 0x04	; 4
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	9d 83       	std	Y+5, r25	; 0x05
     6e0:	8c 83       	std	Y+4, r24	; 0x04
     6e2:	1b 82       	std	Y+3, r1	; 0x03
     6e4:	1a 82       	std	Y+2, r1	; 0x02
     6e6:	ce 01       	movw	r24, r28
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	08 95       	ret

000006ee <insert_array>:
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	ec 01       	movw	r28, r24
     6f6:	16 2f       	mov	r17, r22
     6f8:	6a 81       	ldd	r22, Y+2	; 0x02
     6fa:	7b 81       	ldd	r23, Y+3	; 0x03
     6fc:	8c 81       	ldd	r24, Y+4	; 0x04
     6fe:	9d 81       	ldd	r25, Y+5	; 0x05
     700:	68 17       	cp	r22, r24
     702:	79 07       	cpc	r23, r25
     704:	51 f4       	brne	.+20     	; 0x71a <insert_array+0x2c>
     706:	66 0f       	add	r22, r22
     708:	77 1f       	adc	r23, r23
     70a:	7d 83       	std	Y+5, r23	; 0x05
     70c:	6c 83       	std	Y+4, r22	; 0x04
     70e:	88 81       	ld	r24, Y
     710:	99 81       	ldd	r25, Y+1	; 0x01
     712:	0e 94 05 12 	call	0x240a	; 0x240a <realloc>
     716:	99 83       	std	Y+1, r25	; 0x01
     718:	88 83       	st	Y, r24
     71a:	e8 81       	ld	r30, Y
     71c:	f9 81       	ldd	r31, Y+1	; 0x01
     71e:	8a 81       	ldd	r24, Y+2	; 0x02
     720:	9b 81       	ldd	r25, Y+3	; 0x03
     722:	e8 0f       	add	r30, r24
     724:	f9 1f       	adc	r31, r25
     726:	10 83       	st	Z, r17
     728:	8a 81       	ldd	r24, Y+2	; 0x02
     72a:	9b 81       	ldd	r25, Y+3	; 0x03
     72c:	01 96       	adiw	r24, 0x01	; 1
     72e:	9b 83       	std	Y+3, r25	; 0x03
     730:	8a 83       	std	Y+2, r24	; 0x02
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	1f 91       	pop	r17
     738:	08 95       	ret

0000073a <free_array>:
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
     740:	88 81       	ld	r24, Y
     742:	99 81       	ldd	r25, Y+1	; 0x01
     744:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <free>
     748:	19 82       	std	Y+1, r1	; 0x01
     74a:	18 82       	st	Y, r1
     74c:	1d 82       	std	Y+5, r1	; 0x05
     74e:	1c 82       	std	Y+4, r1	; 0x04
     750:	1b 82       	std	Y+3, r1	; 0x03
     752:	1a 82       	std	Y+2, r1	; 0x02
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <SPI_LoRa_Read>:
     75a:	2a 98       	cbi	0x05, 2	; 5
     75c:	00 00       	nop
     75e:	8e bd       	out	0x2e, r24	; 46
     760:	00 00       	nop
     762:	0d b4       	in	r0, 0x2d	; 45
     764:	07 fe       	sbrs	r0, 7
     766:	fd cf       	rjmp	.-6      	; 0x762 <SPI_LoRa_Read+0x8>
     768:	1e bc       	out	0x2e, r1	; 46
     76a:	00 00       	nop
     76c:	0d b4       	in	r0, 0x2d	; 45
     76e:	07 fe       	sbrs	r0, 7
     770:	fd cf       	rjmp	.-6      	; 0x76c <SPI_LoRa_Read+0x12>
     772:	2a 9a       	sbi	0x05, 2	; 5
     774:	8e b5       	in	r24, 0x2e	; 46
     776:	08 95       	ret

00000778 <SPI_LoRa_Write>:
     778:	2a 98       	cbi	0x05, 2	; 5
     77a:	80 68       	ori	r24, 0x80	; 128
     77c:	8e bd       	out	0x2e, r24	; 46
     77e:	00 00       	nop
     780:	0d b4       	in	r0, 0x2d	; 45
     782:	07 fe       	sbrs	r0, 7
     784:	fd cf       	rjmp	.-6      	; 0x780 <SPI_LoRa_Write+0x8>
     786:	6e bd       	out	0x2e, r22	; 46
     788:	00 00       	nop
     78a:	0d b4       	in	r0, 0x2d	; 45
     78c:	07 fe       	sbrs	r0, 7
     78e:	fd cf       	rjmp	.-6      	; 0x78a <SPI_LoRa_Write+0x12>
     790:	2a 9a       	sbi	0x05, 2	; 5
     792:	08 95       	ret

00000794 <status_check_bit>:
     794:	cf 93       	push	r28
     796:	c6 2f       	mov	r28, r22
     798:	0e 94 ad 03 	call	0x75a	; 0x75a <SPI_LoRa_Read>
     79c:	21 e0       	ldi	r18, 0x01	; 1
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <status_check_bit+0x12>
     7a2:	22 0f       	add	r18, r18
     7a4:	33 1f       	adc	r19, r19
     7a6:	ca 95       	dec	r28
     7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <status_check_bit+0xe>
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	28 23       	and	r18, r24
     7ae:	39 23       	and	r19, r25
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	23 2b       	or	r18, r19
     7b6:	11 f4       	brne	.+4      	; 0x7bc <status_check_bit+0x28>
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	cf 91       	pop	r28
     7be:	08 95       	ret

000007c0 <TX_mode>:
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	8f e0       	ldi	r24, 0x0F	; 15
     7c6:	0e 94 ad 03 	call	0x75a	; 0x75a <SPI_LoRa_Read>
     7ca:	68 2f       	mov	r22, r24
     7cc:	8d e0       	ldi	r24, 0x0D	; 13
     7ce:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     7d2:	6f ef       	ldi	r22, 0xFF	; 255
     7d4:	82 e1       	ldi	r24, 0x12	; 18
     7d6:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     7da:	6c e8       	ldi	r22, 0x8C	; 140
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     7e2:	8f ec       	ldi	r24, 0xCF	; 207
     7e4:	97 e0       	ldi	r25, 0x07	; 7
     7e6:	01 97       	sbiw	r24, 0x01	; 1
     7e8:	f1 f7       	brne	.-4      	; 0x7e6 <TX_mode+0x26>
     7ea:	00 c0       	rjmp	.+0      	; 0x7ec <TX_mode+0x2c>
     7ec:	00 00       	nop
     7ee:	6f e8       	ldi	r22, 0x8F	; 143
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	0e 94 ad 03 	call	0x75a	; 0x75a <SPI_LoRa_Read>
     7fc:	62 e0       	ldi	r22, 0x02	; 2
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	82 e1       	ldi	r24, 0x12	; 18
     802:	0e 94 ca 03 	call	0x794	; 0x794 <status_check_bit>
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	c9 f7       	brne	.-14     	; 0x7fc <TX_mode+0x3c>
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	82 e1       	ldi	r24, 0x12	; 18
     810:	0e 94 ca 03 	call	0x794	; 0x794 <status_check_bit>
     814:	89 2b       	or	r24, r25
     816:	39 f0       	breq	.+14     	; 0x826 <TX_mode+0x66>
     818:	6f ef       	ldi	r22, 0xFF	; 255
     81a:	82 e1       	ldi	r24, 0x12	; 18
     81c:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     820:	c2 e0       	ldi	r28, 0x02	; 2
     822:	d0 e0       	ldi	r29, 0x00	; 0
     824:	1b c0       	rjmp	.+54     	; 0x85c <TX_mode+0x9c>
     826:	6f ef       	ldi	r22, 0xFF	; 255
     828:	82 e1       	ldi	r24, 0x12	; 18
     82a:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     82e:	8e e0       	ldi	r24, 0x0E	; 14
     830:	0e 94 ad 03 	call	0x75a	; 0x75a <SPI_LoRa_Read>
     834:	68 2f       	mov	r22, r24
     836:	8d e0       	ldi	r24, 0x0D	; 13
     838:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     83c:	6b e8       	ldi	r22, 0x8B	; 139
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     844:	63 e0       	ldi	r22, 0x03	; 3
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	82 e1       	ldi	r24, 0x12	; 18
     84a:	0e 94 ca 03 	call	0x794	; 0x794 <status_check_bit>
     84e:	ec 01       	movw	r28, r24
     850:	01 97       	sbiw	r24, 0x01	; 1
     852:	c1 f7       	brne	.-16     	; 0x844 <TX_mode+0x84>
     854:	6f ef       	ldi	r22, 0xFF	; 255
     856:	82 e1       	ldi	r24, 0x12	; 18
     858:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     85c:	ce 01       	movw	r24, r28
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <RXCONT_mode>:
     864:	69 e8       	ldi	r22, 0x89	; 137
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     86c:	8f e0       	ldi	r24, 0x0F	; 15
     86e:	0e 94 ad 03 	call	0x75a	; 0x75a <SPI_LoRa_Read>
     872:	68 2f       	mov	r22, r24
     874:	8d e0       	ldi	r24, 0x0D	; 13
     876:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     87a:	6f ef       	ldi	r22, 0xFF	; 255
     87c:	82 e1       	ldi	r24, 0x12	; 18
     87e:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     882:	6d e8       	ldi	r22, 0x8D	; 141
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	0e 94 ad 03 	call	0x75a	; 0x75a <SPI_LoRa_Read>
     890:	8d 38       	cpi	r24, 0x8D	; 141
     892:	d9 f7       	brne	.-10     	; 0x88a <RXCONT_mode+0x26>
     894:	08 95       	ret

00000896 <r_FIFO>:
     896:	ef 92       	push	r14
     898:	ff 92       	push	r15
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	7c 01       	movw	r14, r24
     8a4:	f8 94       	cli
     8a6:	69 e8       	ldi	r22, 0x89	; 137
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	0e 94 ad 03 	call	0x75a	; 0x75a <SPI_LoRa_Read>
     8b4:	89 38       	cpi	r24, 0x89	; 137
     8b6:	d9 f7       	brne	.-10     	; 0x8ae <r_FIFO+0x18>
     8b8:	80 e1       	ldi	r24, 0x10	; 16
     8ba:	0e 94 ad 03 	call	0x75a	; 0x75a <SPI_LoRa_Read>
     8be:	68 2f       	mov	r22, r24
     8c0:	8d e0       	ldi	r24, 0x0D	; 13
     8c2:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     8c6:	83 e1       	ldi	r24, 0x13	; 19
     8c8:	0e 94 ad 03 	call	0x75a	; 0x75a <SPI_LoRa_Read>
     8cc:	08 2f       	mov	r16, r24
     8ce:	64 e0       	ldi	r22, 0x04	; 4
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	82 e1       	ldi	r24, 0x12	; 18
     8d4:	0e 94 ca 03 	call	0x794	; 0x794 <status_check_bit>
     8d8:	01 97       	sbiw	r24, 0x01	; 1
     8da:	29 f5       	brne	.+74     	; 0x926 <__stack+0x27>
     8dc:	65 e0       	ldi	r22, 0x05	; 5
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	82 e1       	ldi	r24, 0x12	; 18
     8e2:	0e 94 ca 03 	call	0x794	; 0x794 <status_check_bit>
     8e6:	01 97       	sbiw	r24, 0x01	; 1
     8e8:	f1 f0       	breq	.+60     	; 0x926 <__stack+0x27>
     8ea:	2a 98       	cbi	0x05, 2	; 5
     8ec:	1e bc       	out	0x2e, r1	; 46
     8ee:	00 00       	nop
     8f0:	0d b4       	in	r0, 0x2d	; 45
     8f2:	07 fe       	sbrs	r0, 7
     8f4:	fd cf       	rjmp	.-6      	; 0x8f0 <r_FIFO+0x5a>
     8f6:	10 e0       	ldi	r17, 0x00	; 0
     8f8:	10 16       	cp	r1, r16
     8fa:	11 06       	cpc	r1, r17
     8fc:	7c f4       	brge	.+30     	; 0x91c <__stack+0x1d>
     8fe:	c0 e0       	ldi	r28, 0x00	; 0
     900:	d0 e0       	ldi	r29, 0x00	; 0
     902:	1e bc       	out	0x2e, r1	; 46
     904:	00 00       	nop
     906:	0d b4       	in	r0, 0x2d	; 45
     908:	07 fe       	sbrs	r0, 7
     90a:	fd cf       	rjmp	.-6      	; 0x906 <__stack+0x7>
     90c:	6e b5       	in	r22, 0x2e	; 46
     90e:	c7 01       	movw	r24, r14
     910:	0e 94 77 03 	call	0x6ee	; 0x6ee <insert_array>
     914:	21 96       	adiw	r28, 0x01	; 1
     916:	c0 17       	cp	r28, r16
     918:	d1 07       	cpc	r29, r17
     91a:	99 f7       	brne	.-26     	; 0x902 <__stack+0x3>
     91c:	2a 9a       	sbi	0x05, 2	; 5
     91e:	6f ef       	ldi	r22, 0xFF	; 255
     920:	82 e1       	ldi	r24, 0x12	; 18
     922:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	ff 90       	pop	r15
     930:	ef 90       	pop	r14
     932:	08 95       	ret

00000934 <w_FIFO>:
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	ec 01       	movw	r28, r24
     93a:	f8 94       	cli
     93c:	68 e8       	ldi	r22, 0x88	; 136
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     944:	69 e8       	ldi	r22, 0x89	; 137
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	0e 94 ad 03 	call	0x75a	; 0x75a <SPI_LoRa_Read>
     952:	89 38       	cpi	r24, 0x89	; 137
     954:	d9 f7       	brne	.-10     	; 0x94c <w_FIFO+0x18>
     956:	8e e0       	ldi	r24, 0x0E	; 14
     958:	0e 94 ad 03 	call	0x75a	; 0x75a <SPI_LoRa_Read>
     95c:	68 2f       	mov	r22, r24
     95e:	8d e0       	ldi	r24, 0x0D	; 13
     960:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     964:	6a 81       	ldd	r22, Y+2	; 0x02
     966:	7b 81       	ldd	r23, Y+3	; 0x03
     968:	61 15       	cp	r22, r1
     96a:	71 05       	cpc	r23, r1
     96c:	d9 f0       	breq	.+54     	; 0x9a4 <w_FIFO+0x70>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	40 e8       	ldi	r20, 0x80	; 128
     974:	9c 01       	movw	r18, r24
     976:	2a 98       	cbi	0x05, 2	; 5
     978:	4e bd       	out	0x2e, r20	; 46
     97a:	00 00       	nop
     97c:	0d b4       	in	r0, 0x2d	; 45
     97e:	07 fe       	sbrs	r0, 7
     980:	fd cf       	rjmp	.-6      	; 0x97c <w_FIFO+0x48>
     982:	e8 81       	ld	r30, Y
     984:	f9 81       	ldd	r31, Y+1	; 0x01
     986:	e2 0f       	add	r30, r18
     988:	f3 1f       	adc	r31, r19
     98a:	20 81       	ld	r18, Z
     98c:	2e bd       	out	0x2e, r18	; 46
     98e:	00 00       	nop
     990:	0d b4       	in	r0, 0x2d	; 45
     992:	07 fe       	sbrs	r0, 7
     994:	fd cf       	rjmp	.-6      	; 0x990 <w_FIFO+0x5c>
     996:	2a 9a       	sbi	0x05, 2	; 5
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	6a 81       	ldd	r22, Y+2	; 0x02
     99c:	7b 81       	ldd	r23, Y+3	; 0x03
     99e:	86 17       	cp	r24, r22
     9a0:	97 07       	cpc	r25, r23
     9a2:	40 f3       	brcs	.-48     	; 0x974 <w_FIFO+0x40>
     9a4:	82 e2       	ldi	r24, 0x22	; 34
     9a6:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	08 95       	ret

000009b0 <sx1278_LoRa_mode>:
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	0e 94 ca 03 	call	0x794	; 0x794 <status_check_bit>
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	c9 f7       	brne	.-14     	; 0x9b0 <sx1278_LoRa_mode>
     9be:	68 e0       	ldi	r22, 0x08	; 8
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	0e 94 ad 03 	call	0x75a	; 0x75a <SPI_LoRa_Read>
     9cc:	88 30       	cpi	r24, 0x08	; 8
     9ce:	51 f5       	brne	.+84     	; 0xa24 <sx1278_LoRa_mode+0x74>
     9d0:	68 e8       	ldi	r22, 0x88	; 136
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	0e 94 ad 03 	call	0x75a	; 0x75a <SPI_LoRa_Read>
     9de:	88 38       	cpi	r24, 0x88	; 136
     9e0:	d9 f7       	brne	.-10     	; 0x9d8 <sx1278_LoRa_mode+0x28>
     9e2:	69 e8       	ldi	r22, 0x89	; 137
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	0e 94 ad 03 	call	0x75a	; 0x75a <SPI_LoRa_Read>
     9f0:	89 38       	cpi	r24, 0x89	; 137
     9f2:	d9 f7       	brne	.-10     	; 0x9ea <sx1278_LoRa_mode+0x3a>
     9f4:	60 e2       	ldi	r22, 0x20	; 32
     9f6:	8c e0       	ldi	r24, 0x0C	; 12
     9f8:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     9fc:	89 e0       	ldi	r24, 0x09	; 9
     9fe:	0e 94 ad 03 	call	0x75a	; 0x75a <SPI_LoRa_Read>
     a02:	68 2f       	mov	r22, r24
     a04:	60 68       	ori	r22, 0x80	; 128
     a06:	89 e0       	ldi	r24, 0x09	; 9
     a08:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     a0c:	64 e0       	ldi	r22, 0x04	; 4
     a0e:	86 e2       	ldi	r24, 0x26	; 38
     a10:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     a14:	6f ef       	ldi	r22, 0xFF	; 255
     a16:	81 e2       	ldi	r24, 0x21	; 33
     a18:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     a1c:	6f ef       	ldi	r22, 0xFF	; 255
     a1e:	82 e1       	ldi	r24, 0x12	; 18
     a20:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     a24:	08 95       	ret

00000a26 <setTxPower>:
     a26:	82 30       	cpi	r24, 0x02	; 2
     a28:	91 05       	cpc	r25, r1
     a2a:	34 f0       	brlt	.+12     	; 0xa38 <setTxPower+0x12>
     a2c:	82 31       	cpi	r24, 0x12	; 18
     a2e:	91 05       	cpc	r25, r1
     a30:	2c f0       	brlt	.+10     	; 0xa3c <setTxPower+0x16>
     a32:	81 e1       	ldi	r24, 0x11	; 17
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	02 c0       	rjmp	.+4      	; 0xa3c <setTxPower+0x16>
     a38:	82 e0       	ldi	r24, 0x02	; 2
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	82 50       	subi	r24, 0x02	; 2
     a3e:	68 2f       	mov	r22, r24
     a40:	60 68       	ori	r22, 0x80	; 128
     a42:	89 e0       	ldi	r24, 0x09	; 9
     a44:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     a48:	08 95       	ret

00000a4a <setSpreadingFactor>:
 void setSpreadingFactor(int sf)
 {
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
	if (sf < 6) {
     a4e:	86 30       	cpi	r24, 0x06	; 6
     a50:	91 05       	cpc	r25, r1
     a52:	44 f0       	brlt	.+16     	; 0xa64 <setSpreadingFactor+0x1a>
     a54:	ec 01       	movw	r28, r24
     a56:	0d 97       	sbiw	r24, 0x0d	; 13
     a58:	14 f0       	brlt	.+4      	; 0xa5e <setSpreadingFactor+0x14>
     a5a:	cc e0       	ldi	r28, 0x0C	; 12
     a5c:	d0 e0       	ldi	r29, 0x00	; 0
	} 
	else if (sf > 12) {
	sf = 12;
	}

	if (sf == 6) {
     a5e:	c6 30       	cpi	r28, 0x06	; 6
     a60:	d1 05       	cpc	r29, r1
     a62:	59 f4       	brne	.+22     	; 0xa7a <setSpreadingFactor+0x30>
		SPI_LoRa_Write(RegDetectOptimize, 0xc5);
     a64:	65 ec       	ldi	r22, 0xC5	; 197
     a66:	81 e3       	ldi	r24, 0x31	; 49
     a68:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
		SPI_LoRa_Write(RegDetectionThreshold, 0x0c);
     a6c:	6c e0       	ldi	r22, 0x0C	; 12
     a6e:	87 e3       	ldi	r24, 0x37	; 55
     a70:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     a74:	c6 e0       	ldi	r28, 0x06	; 6
     a76:	d0 e0       	ldi	r29, 0x00	; 0
     a78:	08 c0       	rjmp	.+16     	; 0xa8a <setSpreadingFactor+0x40>
		} 
		else {
		SPI_LoRa_Write(RegDetectOptimize, 0xc3);
     a7a:	63 ec       	ldi	r22, 0xC3	; 195
     a7c:	81 e3       	ldi	r24, 0x31	; 49
     a7e:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
		SPI_LoRa_Write(RegDetectionThreshold, 0x0a);
     a82:	6a e0       	ldi	r22, 0x0A	; 10
     a84:	87 e3       	ldi	r24, 0x37	; 55
     a86:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
	}
	 SPI_LoRa_Write(RegModemConfig2, (SPI_LoRa_Read(RegModemConfig2) & 0x0f) | ((sf << 4) & 0xf0));
     a8a:	8e e1       	ldi	r24, 0x1E	; 30
     a8c:	0e 94 ad 03 	call	0x75a	; 0x75a <SPI_LoRa_Read>
     a90:	8f 70       	andi	r24, 0x0F	; 15
     a92:	c2 95       	swap	r28
     a94:	d2 95       	swap	r29
     a96:	d0 7f       	andi	r29, 0xF0	; 240
     a98:	dc 27       	eor	r29, r28
     a9a:	c0 7f       	andi	r28, 0xF0	; 240
     a9c:	dc 27       	eor	r29, r28
     a9e:	6c 2f       	mov	r22, r28
     aa0:	68 2b       	or	r22, r24
     aa2:	8e e1       	ldi	r24, 0x1E	; 30
     aa4:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
 }
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	08 95       	ret

00000aae <setSignalBandwidth>:
 void setSignalBandwidth(int bw){
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
	//set bandwidth values are 0=7.8KHz,1=10.4KHz,2=15.6KHz,3=20.8KHz,4=31.25KHz,5=41.7KHz,6=62.5KHz,7=125KHz,8=250KHz,9=500KHz
	if(bw>=0 && bw<=9){
     ab2:	8a 30       	cpi	r24, 0x0A	; 10
     ab4:	91 05       	cpc	r25, r1
     ab6:	80 f4       	brcc	.+32     	; 0xad8 <setSignalBandwidth+0x2a>
     ab8:	ec 01       	movw	r28, r24
		SPI_LoRa_Write(RegModemConfig1, (SPI_LoRa_Read(RegModemConfig1) & 0x0f) | (bw << 4));
     aba:	8d e1       	ldi	r24, 0x1D	; 29
     abc:	0e 94 ad 03 	call	0x75a	; 0x75a <SPI_LoRa_Read>
     ac0:	8f 70       	andi	r24, 0x0F	; 15
     ac2:	c2 95       	swap	r28
     ac4:	d2 95       	swap	r29
     ac6:	d0 7f       	andi	r29, 0xF0	; 240
     ac8:	dc 27       	eor	r29, r28
     aca:	c0 7f       	andi	r28, 0xF0	; 240
     acc:	dc 27       	eor	r29, r28
     ace:	6c 2f       	mov	r22, r28
     ad0:	68 2b       	or	r22, r24
     ad2:	8d e1       	ldi	r24, 0x1D	; 29
     ad4:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
	}	
 }
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	08 95       	ret

00000ade <enableCrc>:
 void enableCrc(void)
 {
	 SPI_LoRa_Write(RegModemConfig2, SPI_LoRa_Read(RegModemConfig2) | 0x04);
     ade:	8e e1       	ldi	r24, 0x1E	; 30
     ae0:	0e 94 ad 03 	call	0x75a	; 0x75a <SPI_LoRa_Read>
     ae4:	68 2f       	mov	r22, r24
     ae6:	64 60       	ori	r22, 0x04	; 4
     ae8:	8e e1       	ldi	r24, 0x1E	; 30
     aea:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_LoRa_Write>
     aee:	08 95       	ret

00000af0 <main>:

int tx = 0;
int rx = 0;

int main(void)
{
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	cd b7       	in	r28, 0x3d	; 61
     af6:	de b7       	in	r29, 0x3e	; 62
     af8:	ce 59       	subi	r28, 0x9E	; 158
     afa:	d1 09       	sbc	r29, r1
     afc:	0f b6       	in	r0, 0x3f	; 63
     afe:	f8 94       	cli
     b00:	de bf       	out	0x3e, r29	; 62
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	cd bf       	out	0x3d, r28	; 61
	cli();
     b06:	f8 94       	cli
	
	//initialize uart
	ioinit();
     b08:	0e 94 9e 0c 	call	0x193c	; 0x193c <ioinit>
	printf("uart werks\n");
     b0c:	86 e7       	ldi	r24, 0x76	; 118
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	0e 94 47 13 	call	0x268e	; 0x268e <puts>

	//initialize adc
	adc_init();
     b14:	0e 94 3b 01 	call	0x276	; 0x276 <adc_init>
	long ro = 0;
	double ppm = 0;
	
	DHT22_STATE_t state;
	DHT22_DATA_t sensor_data;
	DHT22_Init();
     b18:	0e 94 2d 03 	call	0x65a	; 0x65a <DHT22_Init>
	{
		printf("dht22 initialized\n");
	}*/
	
	int lookupthsize = MQ_LOOKUPTHSIZE;
	double lookuptht[] = MQ_LOOKUPTHT;
     b1c:	8c e1       	ldi	r24, 0x1C	; 28
     b1e:	e2 e2       	ldi	r30, 0x22	; 34
     b20:	f1 e0       	ldi	r31, 0x01	; 1
     b22:	de 01       	movw	r26, r28
     b24:	d7 96       	adiw	r26, 0x37	; 55
     b26:	01 90       	ld	r0, Z+
     b28:	0d 92       	st	X+, r0
     b2a:	8a 95       	dec	r24
     b2c:	e1 f7       	brne	.-8      	; 0xb26 <main+0x36>
	double lookupth1[] = MQ_LOOKUPTH1;
     b2e:	8c e1       	ldi	r24, 0x1C	; 28
     b30:	ee e3       	ldi	r30, 0x3E	; 62
     b32:	f1 e0       	ldi	r31, 0x01	; 1
     b34:	de 01       	movw	r26, r28
     b36:	ad 5a       	subi	r26, 0xAD	; 173
     b38:	bf 4f       	sbci	r27, 0xFF	; 255
     b3a:	01 90       	ld	r0, Z+
     b3c:	0d 92       	st	X+, r0
     b3e:	8a 95       	dec	r24
     b40:	e1 f7       	brne	.-8      	; 0xb3a <main+0x4a>
	double lookupth2[] = MQ_LOOKUPTH2;
     b42:	8c e1       	ldi	r24, 0x1C	; 28
     b44:	ea e5       	ldi	r30, 0x5A	; 90
     b46:	f1 e0       	ldi	r31, 0x01	; 1
     b48:	de 01       	movw	r26, r28
     b4a:	a1 59       	subi	r26, 0x91	; 145
     b4c:	bf 4f       	sbci	r27, 0xFF	; 255
     b4e:	01 90       	ld	r0, Z+
     b50:	0d 92       	st	X+, r0
     b52:	8a 95       	dec	r24
     b54:	e1 f7       	brne	.-8      	; 0xb4e <main+0x5e>
	double lookupth2humdvalue = MQ_LOOKUPTH2HUMDVALUE;
	int senreftemp = MQ_SENREFTEMP;
	int senrefhumd = MQ_SENREFHUMD;
	
	//Set MOSI, SCK, SS, and sx1278 RST as output, PINB6 (sx1278 DIO0 is the pin from LoRa which goes high when it has received something) as input
	DDRB |= (1<<PINB3) | (1<<PINB5) | (1<<PINB2) | (1<<PINB1) | (PINB6<<0);
     b56:	84 b1       	in	r24, 0x04	; 4
     b58:	8e 62       	ori	r24, 0x2E	; 46
     b5a:	84 b9       	out	0x04, r24	; 4
	//PINC5(button for tx) as input
	DDRC |= (PINC5<<0);
     b5c:	87 b1       	in	r24, 0x07	; 7
     b5e:	85 60       	ori	r24, 0x05	; 5
     b60:	87 b9       	out	0x07, r24	; 7
	//Set SS and sx1278 RST to high, sx1278 SPI is enabled on SS LOW
	PORTB|= (1<<PINB2) | (1<<PINB1) | (PINB6<<0);
     b62:	85 b1       	in	r24, 0x05	; 5
     b64:	86 60       	ori	r24, 0x06	; 6
     b66:	85 b9       	out	0x05, r24	; 5
	//set pullup on button input
	PORTC|= (1<<PORTC5);
     b68:	45 9a       	sbi	0x08, 5	; 8
	
	//Enable master SPI at clock rate 8mHz/128 = 62.5KHz
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0) | (CPOL<<0) | (CPHA<<0);
     b6a:	83 e5       	ldi	r24, 0x53	; 83
     b6c:	8c bd       	out	0x2c, r24	; 44
	// pin change interrupt enable pin on PCINT[0:7] and PCINT[8:14]
	PCICR |= (1<<PCIE0) | (1<<PCIE1);
     b6e:	e8 e6       	ldi	r30, 0x68	; 104
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	83 60       	ori	r24, 0x03	; 3
     b76:	80 83       	st	Z, r24
	//pin change interrupt enable on PCINT6(PINB6)
	PCMSK0 |= (1<<PCINT6);
     b78:	eb e6       	ldi	r30, 0x6B	; 107
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	80 64       	ori	r24, 0x40	; 64
     b80:	80 83       	st	Z, r24
	//pin change interrupt enable on PCINT13(PINC5)
	PCMSK1 |= (1<<PCINT13);
     b82:	ec e6       	ldi	r30, 0x6C	; 108
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	80 62       	ori	r24, 0x20	; 32
     b8a:	80 83       	st	Z, r24

	sei();
     b8c:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b8e:	2f ef       	ldi	r18, 0xFF	; 255
     b90:	89 e6       	ldi	r24, 0x69	; 105
     b92:	98 e1       	ldi	r25, 0x18	; 24
     b94:	21 50       	subi	r18, 0x01	; 1
     b96:	80 40       	sbci	r24, 0x00	; 0
     b98:	90 40       	sbci	r25, 0x00	; 0
     b9a:	e1 f7       	brne	.-8      	; 0xb94 <main+0xa4>
     b9c:	00 c0       	rjmp	.+0      	; 0xb9e <main+0xae>
     b9e:	00 00       	nop
	
	_delay_ms(1000);		//delay to make sure the lora module is up and running before communication is started

	sx1278_LoRa_mode();		//setting the LoRa module to LoRa mode
     ba0:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <sx1278_LoRa_mode>
	setSignalBandwidth(7);	//BW 7 = 125KHz
     ba4:	87 e0       	ldi	r24, 0x07	; 7
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 57 05 	call	0xaae	; 0xaae <setSignalBandwidth>
	setSpreadingFactor(9);	//Spreading factor of 9
     bac:	89 e0       	ldi	r24, 0x09	; 9
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 25 05 	call	0xa4a	; 0xa4a <setSpreadingFactor>
	setTxPower(2);			//dBm power settings. go from 2-17
     bb4:	82 e0       	ldi	r24, 0x02	; 2
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 13 05 	call	0xa26	; 0xa26 <setTxPower>
	enableCrc();
     bbc:	0e 94 6f 05 	call	0xade	; 0xade <enableCrc>
		ro = mq_getro(res, MQ_DEFAULTPPM, MQ_SCALINGFACTOR, MQ_EXPONENT);
		//get ppm using DEFAULT_RO
		ppm = mq_getppm(res, MQ_DEFAULTRO, MQ_SCALINGFACTOR, MQ_EXPONENT, MQ_MAXRSRO, MQ_MINRSRO);
		
		//get ro T/H
		ro = mq_getrotemphumd(res, MQ_DEFAULTPPM, MQ_SCALINGFACTOR, MQ_EXPONENT, (int)sensor_data.temperature_integral, (int)sensor_data.humidity_integral, senreftemp, senrefhumd, lookupthsize, lookuptht, lookupth1, lookupth2, lookupth1humdvalue, lookupth2humdvalue);
     bc0:	de 01       	movw	r26, r28
     bc2:	a1 59       	subi	r26, 0x91	; 145
     bc4:	bf 4f       	sbci	r27, 0xFF	; 255
     bc6:	c5 57       	subi	r28, 0x75	; 117
     bc8:	df 4f       	sbci	r29, 0xFF	; 255
     bca:	b9 83       	std	Y+1, r27	; 0x01
     bcc:	a8 83       	st	Y, r26
     bce:	cb 58       	subi	r28, 0x8B	; 139
     bd0:	d0 40       	sbci	r29, 0x00	; 0
     bd2:	ce 01       	movw	r24, r28
     bd4:	8d 5a       	subi	r24, 0xAD	; 173
     bd6:	9f 4f       	sbci	r25, 0xFF	; 255
     bd8:	c3 57       	subi	r28, 0x73	; 115
     bda:	df 4f       	sbci	r29, 0xFF	; 255
     bdc:	99 83       	std	Y+1, r25	; 0x01
     bde:	88 83       	st	Y, r24
     be0:	cd 58       	subi	r28, 0x8D	; 141
     be2:	d0 40       	sbci	r29, 0x00	; 0
     be4:	d8 97       	sbiw	r26, 0x38	; 56
     be6:	c1 57       	subi	r28, 0x71	; 113
     be8:	df 4f       	sbci	r29, 0xFF	; 255
     bea:	b9 83       	std	Y+1, r27	; 0x01
     bec:	a8 83       	st	Y, r26
     bee:	cf 58       	subi	r28, 0x8F	; 143
     bf0:	d0 40       	sbci	r29, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     bf2:	82 55       	subi	r24, 0x52	; 82
     bf4:	91 09       	sbc	r25, r1
     bf6:	3c 01       	movw	r6, r24
				buffer = init_struct_trx_buffer();			//initialize the struct as it is a pointer.
				r_FIFO(buffer);								//put data recived from the LoRa FIFO int to the buffer struct
			
				printf("lora data:");
				for (uint8_t count = 0; count <= sizeof(buffer->array)+1; count++) {
					printf("%d", buffer[0].array[count]); 
     bf8:	0f 2e       	mov	r0, r31
     bfa:	f7 e4       	ldi	r31, 0x47	; 71
     bfc:	4f 2e       	mov	r4, r31
     bfe:	f2 e0       	ldi	r31, 0x02	; 2
     c00:	5f 2e       	mov	r5, r31
     c02:	f0 2d       	mov	r31, r0
	
	//strFont5XY("LoRa TEST EXAMPLE",0,0);
    while (1) 
    {
		/***************************************/
		state = DHT22_StartReading();
     c04:	0e 94 39 03 	call	0x672	; 0x672 <DHT22_StartReading>
		if (state != DHT_STARTED)
     c08:	8b 30       	cpi	r24, 0x0B	; 11
     c0a:	49 f0       	breq	.+18     	; 0xc1e <main+0x12e>
		{
			printf("DHT state machine busy\r");
     c0c:	81 e8       	ldi	r24, 0x81	; 129
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	9f 93       	push	r25
     c12:	8f 93       	push	r24
     c14:	0e 94 2a 13 	call	0x2654	; 0x2654 <printf>
			continue;
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	f3 cf       	rjmp	.-26     	; 0xc04 <main+0x114>
		}
		printf("reading...\r\n");
     c1e:	89 e9       	ldi	r24, 0x99	; 153
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	0e 94 47 13 	call	0x268e	; 0x268e <puts>

		//get temperature and humidity
		state = DHT22_CheckStatus(&sensor_data);
     c26:	ce 01       	movw	r24, r28
     c28:	c3 96       	adiw	r24, 0x33	; 51
     c2a:	0e 94 88 02 	call	0x510	; 0x510 <DHT22_CheckStatus>

		if (state == DHT_DATA_READY){
     c2e:	87 30       	cpi	r24, 0x07	; 7
     c30:	11 f5       	brne	.+68     	; 0xc76 <main+0x186>
			// Do something with the data.
			printf("temperature: %d.%d C\n", sensor_data.temperature_integral, sensor_data.temperature_decimal);
     c32:	8c a9       	ldd	r24, Y+52	; 0x34
     c34:	1f 92       	push	r1
     c36:	8f 93       	push	r24
     c38:	8b a9       	ldd	r24, Y+51	; 0x33
     c3a:	28 2f       	mov	r18, r24
     c3c:	08 2e       	mov	r0, r24
     c3e:	00 0c       	add	r0, r0
     c40:	33 0b       	sbc	r19, r19
     c42:	3f 93       	push	r19
     c44:	8f 93       	push	r24
     c46:	85 ea       	ldi	r24, 0xA5	; 165
     c48:	91 e0       	ldi	r25, 0x01	; 1
     c4a:	9f 93       	push	r25
     c4c:	8f 93       	push	r24
     c4e:	0e 94 2a 13 	call	0x2654	; 0x2654 <printf>
			printf("humidity: %d.%d %%\n\n", sensor_data.humidity_integral,sensor_data.humidity_decimal);
     c52:	8e a9       	ldd	r24, Y+54	; 0x36
     c54:	1f 92       	push	r1
     c56:	8f 93       	push	r24
     c58:	8d a9       	ldd	r24, Y+53	; 0x35
     c5a:	1f 92       	push	r1
     c5c:	8f 93       	push	r24
     c5e:	8b eb       	ldi	r24, 0xBB	; 187
     c60:	91 e0       	ldi	r25, 0x01	; 1
     c62:	9f 93       	push	r25
     c64:	8f 93       	push	r24
     c66:	0e 94 2a 13 	call	0x2654	; 0x2654 <printf>
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	15 c0       	rjmp	.+42     	; 0xca0 <main+0x1b0>
		}
		else if (state == DHT_ERROR_CHECKSUM){
     c76:	89 30       	cpi	r24, 0x09	; 9
     c78:	49 f4       	brne	.+18     	; 0xc8c <main+0x19c>
			printf("DHT_ERROR_CHECKSUM \r");
     c7a:	80 ed       	ldi	r24, 0xD0	; 208
     c7c:	91 e0       	ldi	r25, 0x01	; 1
     c7e:	9f 93       	push	r25
     c80:	8f 93       	push	r24
     c82:	0e 94 2a 13 	call	0x2654	; 0x2654 <printf>
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	0a c0       	rjmp	.+20     	; 0xca0 <main+0x1b0>
			// Do something if there is a Checksum error
		}
		else if (state == DHT_ERROR_NOT_RESPOND){
     c8c:	88 30       	cpi	r24, 0x08	; 8
     c8e:	41 f4       	brne	.+16     	; 0xca0 <main+0x1b0>
			printf("DHT_ERROR_NOT_RESPOND \r");
     c90:	85 ee       	ldi	r24, 0xE5	; 229
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	9f 93       	push	r25
     c96:	8f 93       	push	r24
     c98:	0e 94 2a 13 	call	0x2654	; 0x2654 <printf>
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
			// Do something if the sensor did not respond
		}
		/***********************************/
		
		//get adc
		adc = adc_read(MQ_ADCCHANNEL);
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	0e 94 36 01 	call	0x26c	; 0x26c <adc_read>
     ca6:	cb 56       	subi	r28, 0x6B	; 107
     ca8:	df 4f       	sbci	r29, 0xFF	; 255
     caa:	99 83       	std	Y+1, r25	; 0x01
     cac:	88 83       	st	Y, r24
     cae:	c5 59       	subi	r28, 0x95	; 149
     cb0:	d0 40       	sbci	r29, 0x00	; 0
		//calculated resistence depends on the sensor pulldown resistor
		long res = adc_getresistence(adc, MQ_PULLDOWNRES);
     cb2:	60 ef       	ldi	r22, 0xF0	; 240
     cb4:	75 e5       	ldi	r23, 0x55	; 85
     cb6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <adc_getresistence>
     cba:	cf 56       	subi	r28, 0x6F	; 111
     cbc:	df 4f       	sbci	r29, 0xFF	; 255
     cbe:	68 83       	st	Y, r22
     cc0:	79 83       	std	Y+1, r23	; 0x01
     cc2:	8a 83       	std	Y+2, r24	; 0x02
     cc4:	9b 83       	std	Y+3, r25	; 0x03
     cc6:	c1 59       	subi	r28, 0x91	; 145
     cc8:	d0 40       	sbci	r29, 0x00	; 0
		double adcvol = adc_getvoltage(adc, 5.0);
     cca:	40 e0       	ldi	r20, 0x00	; 0
     ccc:	50 e0       	ldi	r21, 0x00	; 0
     cce:	60 ea       	ldi	r22, 0xA0	; 160
     cd0:	70 e4       	ldi	r23, 0x40	; 64
     cd2:	cb 56       	subi	r28, 0x6B	; 107
     cd4:	df 4f       	sbci	r29, 0xFF	; 255
     cd6:	88 81       	ld	r24, Y
     cd8:	99 81       	ldd	r25, Y+1	; 0x01
     cda:	c5 59       	subi	r28, 0x95	; 149
     cdc:	d0 40       	sbci	r29, 0x00	; 0
     cde:	0e 94 78 01 	call	0x2f0	; 0x2f0 <adc_getvoltage>
     ce2:	c5 56       	subi	r28, 0x65	; 101
     ce4:	df 4f       	sbci	r29, 0xFF	; 255
     ce6:	68 83       	st	Y, r22
     ce8:	79 83       	std	Y+1, r23	; 0x01
     cea:	8a 83       	std	Y+2, r24	; 0x02
     cec:	9b 83       	std	Y+3, r25	; 0x03
     cee:	cb 59       	subi	r28, 0x9B	; 155
     cf0:	d0 40       	sbci	r29, 0x00	; 0
		
		//get ro
		ro = mq_getro(res, MQ_DEFAULTPPM, MQ_SCALINGFACTOR, MQ_EXPONENT);
     cf2:	0f 2e       	mov	r0, r31
     cf4:	fe ed       	ldi	r31, 0xDE	; 222
     cf6:	af 2e       	mov	r10, r31
     cf8:	f7 e3       	ldi	r31, 0x37	; 55
     cfa:	bf 2e       	mov	r11, r31
     cfc:	f1 e3       	ldi	r31, 0x31	; 49
     cfe:	cf 2e       	mov	r12, r31
     d00:	f0 ec       	ldi	r31, 0xC0	; 192
     d02:	df 2e       	mov	r13, r31
     d04:	f0 2d       	mov	r31, r0
     d06:	12 e4       	ldi	r17, 0x42	; 66
     d08:	e1 2e       	mov	r14, r17
     d0a:	14 e3       	ldi	r17, 0x34	; 52
     d0c:	f1 2e       	mov	r15, r17
     d0e:	09 ee       	ldi	r16, 0xE9	; 233
     d10:	12 e4       	ldi	r17, 0x42	; 66
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	44 ec       	ldi	r20, 0xC4	; 196
     d18:	53 e4       	ldi	r21, 0x43	; 67
     d1a:	cf 56       	subi	r28, 0x6F	; 111
     d1c:	df 4f       	sbci	r29, 0xFF	; 255
     d1e:	68 81       	ld	r22, Y
     d20:	79 81       	ldd	r23, Y+1	; 0x01
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	9b 81       	ldd	r25, Y+3	; 0x03
     d26:	c1 59       	subi	r28, 0x91	; 145
     d28:	d0 40       	sbci	r29, 0x00	; 0
     d2a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <mq_getro>
		//get ppm using DEFAULT_RO
		ppm = mq_getppm(res, MQ_DEFAULTRO, MQ_SCALINGFACTOR, MQ_EXPONENT, MQ_MAXRSRO, MQ_MINRSRO);
     d2e:	be e3       	ldi	r27, 0x3E	; 62
     d30:	bf 93       	push	r27
     d32:	27 eb       	ldi	r18, 0xB7	; 183
     d34:	2f 93       	push	r18
     d36:	8b e4       	ldi	r24, 0x4B	; 75
     d38:	8f 93       	push	r24
     d3a:	97 ec       	ldi	r25, 0xC7	; 199
     d3c:	9f 93       	push	r25
     d3e:	a0 e4       	ldi	r26, 0x40	; 64
     d40:	af 93       	push	r26
     d42:	bb e1       	ldi	r27, 0x1B	; 27
     d44:	bf 93       	push	r27
     d46:	24 e6       	ldi	r18, 0x64	; 100
     d48:	2f 93       	push	r18
     d4a:	8a e5       	ldi	r24, 0x5A	; 90
     d4c:	8f 93       	push	r24
     d4e:	23 e2       	ldi	r18, 0x23	; 35
     d50:	33 ea       	ldi	r19, 0xA3	; 163
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	50 e0       	ldi	r21, 0x00	; 0
     d56:	cf 56       	subi	r28, 0x6F	; 111
     d58:	df 4f       	sbci	r29, 0xFF	; 255
     d5a:	68 81       	ld	r22, Y
     d5c:	79 81       	ldd	r23, Y+1	; 0x01
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	9b 81       	ldd	r25, Y+3	; 0x03
     d62:	c1 59       	subi	r28, 0x91	; 145
     d64:	d0 40       	sbci	r29, 0x00	; 0
     d66:	0e 94 56 09 	call	0x12ac	; 0x12ac <mq_getppm>
		
		//get ro T/H
		ro = mq_getrotemphumd(res, MQ_DEFAULTPPM, MQ_SCALINGFACTOR, MQ_EXPONENT, (int)sensor_data.temperature_integral, (int)sensor_data.humidity_integral, senreftemp, senrefhumd, lookupthsize, lookuptht, lookupth1, lookupth2, lookupth1humdvalue, lookupth2humdvalue);
     d6a:	0f 2e       	mov	r0, r31
     d6c:	f2 e4       	ldi	r31, 0x42	; 66
     d6e:	9f 2e       	mov	r9, r31
     d70:	f0 2d       	mov	r31, r0
     d72:	9f 92       	push	r9
     d74:	0f 2e       	mov	r0, r31
     d76:	fa ea       	ldi	r31, 0xAA	; 170
     d78:	8f 2e       	mov	r8, r31
     d7a:	f0 2d       	mov	r31, r0
     d7c:	8f 92       	push	r8
     d7e:	1f 92       	push	r1
     d80:	1f 92       	push	r1
     d82:	9f 92       	push	r9
     d84:	68 94       	set
     d86:	33 24       	eor	r3, r3
     d88:	32 f8       	bld	r3, 2
     d8a:	3f 92       	push	r3
     d8c:	1f 92       	push	r1
     d8e:	1f 92       	push	r1
     d90:	c4 57       	subi	r28, 0x74	; 116
     d92:	df 4f       	sbci	r29, 0xFF	; 255
     d94:	98 81       	ld	r25, Y
     d96:	cc 58       	subi	r28, 0x8C	; 140
     d98:	d0 40       	sbci	r29, 0x00	; 0
     d9a:	9f 93       	push	r25
     d9c:	c5 57       	subi	r28, 0x75	; 117
     d9e:	df 4f       	sbci	r29, 0xFF	; 255
     da0:	a8 81       	ld	r26, Y
     da2:	cb 58       	subi	r28, 0x8B	; 139
     da4:	d0 40       	sbci	r29, 0x00	; 0
     da6:	af 93       	push	r26
     da8:	c2 57       	subi	r28, 0x72	; 114
     daa:	df 4f       	sbci	r29, 0xFF	; 255
     dac:	b8 81       	ld	r27, Y
     dae:	ce 58       	subi	r28, 0x8E	; 142
     db0:	d0 40       	sbci	r29, 0x00	; 0
     db2:	bf 93       	push	r27
     db4:	c3 57       	subi	r28, 0x73	; 115
     db6:	df 4f       	sbci	r29, 0xFF	; 255
     db8:	28 81       	ld	r18, Y
     dba:	cd 58       	subi	r28, 0x8D	; 141
     dbc:	d0 40       	sbci	r29, 0x00	; 0
     dbe:	2f 93       	push	r18
     dc0:	c0 57       	subi	r28, 0x70	; 112
     dc2:	df 4f       	sbci	r29, 0xFF	; 255
     dc4:	88 81       	ld	r24, Y
     dc6:	c0 59       	subi	r28, 0x90	; 144
     dc8:	d0 40       	sbci	r29, 0x00	; 0
     dca:	8f 93       	push	r24
     dcc:	c1 57       	subi	r28, 0x71	; 113
     dce:	df 4f       	sbci	r29, 0xFF	; 255
     dd0:	98 81       	ld	r25, Y
     dd2:	cf 58       	subi	r28, 0x8F	; 143
     dd4:	d0 40       	sbci	r29, 0x00	; 0
     dd6:	9f 93       	push	r25
     dd8:	1f 92       	push	r1
     dda:	0f 2e       	mov	r0, r31
     ddc:	f7 e0       	ldi	r31, 0x07	; 7
     dde:	2f 2e       	mov	r2, r31
     de0:	f0 2d       	mov	r31, r0
     de2:	2f 92       	push	r2
     de4:	9f 92       	push	r9
     de6:	a2 e8       	ldi	r26, 0x82	; 130
     de8:	af 93       	push	r26
     dea:	1f 92       	push	r1
     dec:	1f 92       	push	r1
     dee:	b1 e4       	ldi	r27, 0x41	; 65
     df0:	bf 93       	push	r27
     df2:	20 ea       	ldi	r18, 0xA0	; 160
     df4:	2f 93       	push	r18
     df6:	1f 92       	push	r1
     df8:	1f 92       	push	r1
     dfa:	6d a9       	ldd	r22, Y+53	; 0x35
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__floatsisf>
     e06:	9f 93       	push	r25
     e08:	8f 93       	push	r24
     e0a:	7f 93       	push	r23
     e0c:	6f 93       	push	r22
     e0e:	6b a9       	ldd	r22, Y+51	; 0x33
     e10:	06 2e       	mov	r0, r22
     e12:	00 0c       	add	r0, r0
     e14:	77 0b       	sbc	r23, r23
     e16:	88 0b       	sbc	r24, r24
     e18:	99 0b       	sbc	r25, r25
     e1a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__floatsisf>
     e1e:	9f 93       	push	r25
     e20:	8f 93       	push	r24
     e22:	7f 93       	push	r23
     e24:	6f 93       	push	r22
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	44 ec       	ldi	r20, 0xC4	; 196
     e2c:	53 e4       	ldi	r21, 0x43	; 67
     e2e:	cf 56       	subi	r28, 0x6F	; 111
     e30:	df 4f       	sbci	r29, 0xFF	; 255
     e32:	68 81       	ld	r22, Y
     e34:	79 81       	ldd	r23, Y+1	; 0x01
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	9b 81       	ldd	r25, Y+3	; 0x03
     e3a:	c1 59       	subi	r28, 0x91	; 145
     e3c:	d0 40       	sbci	r29, 0x00	; 0
     e3e:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <mq_getrotemphumd>
     e42:	c9 56       	subi	r28, 0x69	; 105
     e44:	df 4f       	sbci	r29, 0xFF	; 255
     e46:	68 83       	st	Y, r22
     e48:	79 83       	std	Y+1, r23	; 0x01
     e4a:	8a 83       	std	Y+2, r24	; 0x02
     e4c:	9b 83       	std	Y+3, r25	; 0x03
     e4e:	c7 59       	subi	r28, 0x97	; 151
     e50:	d0 40       	sbci	r29, 0x00	; 0
		//get ppm using DEFAULT_ROTH
		ppm = mq_getppmtemphumd(res, MQ_DEFAULTRO, MQ_SCALINGFACTOR, MQ_EXPONENT, MQ_MAXRSRO, MQ_MINRSRO, (int)sensor_data.temperature_integral, (int)sensor_data.humidity_integral, senreftemp, senrefhumd, lookupthsize, lookuptht, lookupth1, lookupth2, lookupth1humdvalue, lookupth2humdvalue);
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	9f 92       	push	r9
     e5e:	8f 92       	push	r8
     e60:	1f 92       	push	r1
     e62:	1f 92       	push	r1
     e64:	9f 92       	push	r9
     e66:	3f 92       	push	r3
     e68:	1f 92       	push	r1
     e6a:	1f 92       	push	r1
     e6c:	c4 57       	subi	r28, 0x74	; 116
     e6e:	df 4f       	sbci	r29, 0xFF	; 255
     e70:	98 81       	ld	r25, Y
     e72:	cc 58       	subi	r28, 0x8C	; 140
     e74:	d0 40       	sbci	r29, 0x00	; 0
     e76:	9f 93       	push	r25
     e78:	c5 57       	subi	r28, 0x75	; 117
     e7a:	df 4f       	sbci	r29, 0xFF	; 255
     e7c:	a8 81       	ld	r26, Y
     e7e:	cb 58       	subi	r28, 0x8B	; 139
     e80:	d0 40       	sbci	r29, 0x00	; 0
     e82:	af 93       	push	r26
     e84:	c2 57       	subi	r28, 0x72	; 114
     e86:	df 4f       	sbci	r29, 0xFF	; 255
     e88:	b8 81       	ld	r27, Y
     e8a:	ce 58       	subi	r28, 0x8E	; 142
     e8c:	d0 40       	sbci	r29, 0x00	; 0
     e8e:	bf 93       	push	r27
     e90:	c3 57       	subi	r28, 0x73	; 115
     e92:	df 4f       	sbci	r29, 0xFF	; 255
     e94:	28 81       	ld	r18, Y
     e96:	cd 58       	subi	r28, 0x8D	; 141
     e98:	d0 40       	sbci	r29, 0x00	; 0
     e9a:	2f 93       	push	r18
     e9c:	c0 57       	subi	r28, 0x70	; 112
     e9e:	df 4f       	sbci	r29, 0xFF	; 255
     ea0:	88 81       	ld	r24, Y
     ea2:	c0 59       	subi	r28, 0x90	; 144
     ea4:	d0 40       	sbci	r29, 0x00	; 0
     ea6:	8f 93       	push	r24
     ea8:	c1 57       	subi	r28, 0x71	; 113
     eaa:	df 4f       	sbci	r29, 0xFF	; 255
     eac:	98 81       	ld	r25, Y
     eae:	cf 58       	subi	r28, 0x8F	; 143
     eb0:	d0 40       	sbci	r29, 0x00	; 0
     eb2:	9f 93       	push	r25
     eb4:	1f 92       	push	r1
     eb6:	2f 92       	push	r2
     eb8:	9f 92       	push	r9
     eba:	a2 e8       	ldi	r26, 0x82	; 130
     ebc:	af 93       	push	r26
     ebe:	1f 92       	push	r1
     ec0:	1f 92       	push	r1
     ec2:	b1 e4       	ldi	r27, 0x41	; 65
     ec4:	bf 93       	push	r27
     ec6:	20 ea       	ldi	r18, 0xA0	; 160
     ec8:	2f 93       	push	r18
     eca:	1f 92       	push	r1
     ecc:	1f 92       	push	r1
     ece:	6d a9       	ldd	r22, Y+53	; 0x35
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__floatsisf>
     eda:	9f 93       	push	r25
     edc:	8f 93       	push	r24
     ede:	7f 93       	push	r23
     ee0:	6f 93       	push	r22
     ee2:	6b a9       	ldd	r22, Y+51	; 0x33
     ee4:	06 2e       	mov	r0, r22
     ee6:	00 0c       	add	r0, r0
     ee8:	77 0b       	sbc	r23, r23
     eea:	88 0b       	sbc	r24, r24
     eec:	99 0b       	sbc	r25, r25
     eee:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__floatsisf>
     ef2:	9f 93       	push	r25
     ef4:	8f 93       	push	r24
     ef6:	7f 93       	push	r23
     ef8:	6f 93       	push	r22
     efa:	8e e3       	ldi	r24, 0x3E	; 62
     efc:	8f 93       	push	r24
     efe:	97 eb       	ldi	r25, 0xB7	; 183
     f00:	9f 93       	push	r25
     f02:	ab e4       	ldi	r26, 0x4B	; 75
     f04:	af 93       	push	r26
     f06:	b7 ec       	ldi	r27, 0xC7	; 199
     f08:	bf 93       	push	r27
     f0a:	20 e4       	ldi	r18, 0x40	; 64
     f0c:	2f 93       	push	r18
     f0e:	8b e1       	ldi	r24, 0x1B	; 27
     f10:	8f 93       	push	r24
     f12:	94 e6       	ldi	r25, 0x64	; 100
     f14:	9f 93       	push	r25
     f16:	aa e5       	ldi	r26, 0x5A	; 90
     f18:	af 93       	push	r26
     f1a:	23 e2       	ldi	r18, 0x23	; 35
     f1c:	33 ea       	ldi	r19, 0xA3	; 163
     f1e:	40 e0       	ldi	r20, 0x00	; 0
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	cf 56       	subi	r28, 0x6F	; 111
     f24:	df 4f       	sbci	r29, 0xFF	; 255
     f26:	68 81       	ld	r22, Y
     f28:	79 81       	ldd	r23, Y+1	; 0x01
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	9b 81       	ldd	r25, Y+3	; 0x03
     f2e:	c1 59       	subi	r28, 0x91	; 145
     f30:	d0 40       	sbci	r29, 0x00	; 0
     f32:	0e 94 80 0b 	call	0x1700	; 0x1700 <mq_getppmtemphumd>
     f36:	6b 01       	movw	r12, r22
     f38:	7c 01       	movw	r14, r24
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
     f44:	4a e0       	ldi	r20, 0x0A	; 10
     f46:	b3 01       	movw	r22, r6
     f48:	cb 56       	subi	r28, 0x6B	; 107
     f4a:	df 4f       	sbci	r29, 0xFF	; 255
     f4c:	88 81       	ld	r24, Y
     f4e:	99 81       	ldd	r25, Y+1	; 0x01
     f50:	c5 59       	subi	r28, 0x95	; 149
     f52:	d0 40       	sbci	r29, 0x00	; 0
     f54:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <__itoa_ncheck>
		
		/******************************/
		//print out values
		itoa(adc, printbuff, 10);
		printf("ADC "); printf(printbuff); printf("\r\n");
     f58:	ad ef       	ldi	r26, 0xFD	; 253
     f5a:	b1 e0       	ldi	r27, 0x01	; 1
     f5c:	bf 93       	push	r27
     f5e:	af 93       	push	r26
     f60:	0e 94 2a 13 	call	0x2654	; 0x2654 <printf>
     f64:	7f 92       	push	r7
     f66:	6f 92       	push	r6
     f68:	0e 94 2a 13 	call	0x2654	; 0x2654 <printf>
     f6c:	8b ef       	ldi	r24, 0xFB	; 251
     f6e:	91 e0       	ldi	r25, 0x01	; 1
     f70:	0e 94 47 13 	call	0x268e	; 0x268e <puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
     f74:	2a e0       	ldi	r18, 0x0A	; 10
     f76:	a3 01       	movw	r20, r6
     f78:	cf 56       	subi	r28, 0x6F	; 111
     f7a:	df 4f       	sbci	r29, 0xFF	; 255
     f7c:	68 81       	ld	r22, Y
     f7e:	79 81       	ldd	r23, Y+1	; 0x01
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	9b 81       	ldd	r25, Y+3	; 0x03
     f84:	c1 59       	subi	r28, 0x91	; 145
     f86:	d0 40       	sbci	r29, 0x00	; 0
     f88:	0e 94 df 12 	call	0x25be	; 0x25be <__ltoa_ncheck>
		ltoa(res, printbuff, 10);
		printf("RES "); printf(printbuff); printf("\r\n");
     f8c:	82 e0       	ldi	r24, 0x02	; 2
     f8e:	92 e0       	ldi	r25, 0x02	; 2
     f90:	9f 93       	push	r25
     f92:	8f 93       	push	r24
     f94:	0e 94 2a 13 	call	0x2654	; 0x2654 <printf>
     f98:	7f 92       	push	r7
     f9a:	6f 92       	push	r6
     f9c:	0e 94 2a 13 	call	0x2654	; 0x2654 <printf>
     fa0:	8b ef       	ldi	r24, 0xFB	; 251
     fa2:	91 e0       	ldi	r25, 0x01	; 1
     fa4:	0e 94 47 13 	call	0x268e	; 0x268e <puts>
		dtostrf(adcvol, 3, 3, printbuff);
     fa8:	83 01       	movw	r16, r6
     faa:	23 e0       	ldi	r18, 0x03	; 3
     fac:	43 e0       	ldi	r20, 0x03	; 3
     fae:	c5 56       	subi	r28, 0x65	; 101
     fb0:	df 4f       	sbci	r29, 0xFF	; 255
     fb2:	68 81       	ld	r22, Y
     fb4:	79 81       	ldd	r23, Y+1	; 0x01
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	9b 81       	ldd	r25, Y+3	; 0x03
     fba:	cb 59       	subi	r28, 0x9B	; 155
     fbc:	d0 40       	sbci	r29, 0x00	; 0
     fbe:	0e 94 c4 10 	call	0x2188	; 0x2188 <dtostrf>
		printf("VOL "); printf(printbuff); printf("\r\n");
     fc2:	87 e0       	ldi	r24, 0x07	; 7
     fc4:	92 e0       	ldi	r25, 0x02	; 2
     fc6:	9f 93       	push	r25
     fc8:	8f 93       	push	r24
     fca:	0e 94 2a 13 	call	0x2654	; 0x2654 <printf>
     fce:	7f 92       	push	r7
     fd0:	6f 92       	push	r6
     fd2:	0e 94 2a 13 	call	0x2654	; 0x2654 <printf>
     fd6:	8b ef       	ldi	r24, 0xFB	; 251
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	0e 94 47 13 	call	0x268e	; 0x268e <puts>
     fde:	2a e0       	ldi	r18, 0x0A	; 10
     fe0:	a3 01       	movw	r20, r6
     fe2:	c9 56       	subi	r28, 0x69	; 105
     fe4:	df 4f       	sbci	r29, 0xFF	; 255
     fe6:	68 81       	ld	r22, Y
     fe8:	79 81       	ldd	r23, Y+1	; 0x01
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	9b 81       	ldd	r25, Y+3	; 0x03
     fee:	c7 59       	subi	r28, 0x97	; 151
     ff0:	d0 40       	sbci	r29, 0x00	; 0
     ff2:	0e 94 df 12 	call	0x25be	; 0x25be <__ltoa_ncheck>
		
		//print out values
		ltoa(ro, printbuff, 10);
		printf("ro        "); printf(printbuff); printf("\r\n");
     ff6:	8c e0       	ldi	r24, 0x0C	; 12
     ff8:	92 e0       	ldi	r25, 0x02	; 2
     ffa:	9f 93       	push	r25
     ffc:	8f 93       	push	r24
     ffe:	0e 94 2a 13 	call	0x2654	; 0x2654 <printf>
    1002:	7f 92       	push	r7
    1004:	6f 92       	push	r6
    1006:	0e 94 2a 13 	call	0x2654	; 0x2654 <printf>
    100a:	8b ef       	ldi	r24, 0xFB	; 251
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	0e 94 47 13 	call	0x268e	; 0x268e <puts>
		dtostrf(ppm, 3, 5, printbuff);
    1012:	25 e0       	ldi	r18, 0x05	; 5
    1014:	43 e0       	ldi	r20, 0x03	; 3
    1016:	c7 01       	movw	r24, r14
    1018:	b6 01       	movw	r22, r12
    101a:	0e 94 c4 10 	call	0x2188	; 0x2188 <dtostrf>
		printf("ppm_roDef "); printf(printbuff); printf("\r\n");
    101e:	87 e1       	ldi	r24, 0x17	; 23
    1020:	92 e0       	ldi	r25, 0x02	; 2
    1022:	9f 93       	push	r25
    1024:	8f 93       	push	r24
    1026:	0e 94 2a 13 	call	0x2654	; 0x2654 <printf>
    102a:	7f 92       	push	r7
    102c:	6f 92       	push	r6
    102e:	0e 94 2a 13 	call	0x2654	; 0x2654 <printf>
    1032:	8b ef       	ldi	r24, 0xFB	; 251
    1034:	91 e0       	ldi	r25, 0x01	; 1
    1036:	0e 94 47 13 	call	0x268e	; 0x268e <puts>
    103a:	2a e0       	ldi	r18, 0x0A	; 10
    103c:	a3 01       	movw	r20, r6
    103e:	c9 56       	subi	r28, 0x69	; 105
    1040:	df 4f       	sbci	r29, 0xFF	; 255
    1042:	68 81       	ld	r22, Y
    1044:	79 81       	ldd	r23, Y+1	; 0x01
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	9b 81       	ldd	r25, Y+3	; 0x03
    104a:	c7 59       	subi	r28, 0x97	; 151
    104c:	d0 40       	sbci	r29, 0x00	; 0
    104e:	0e 94 df 12 	call	0x25be	; 0x25be <__ltoa_ncheck>

		//print out values
		ltoa(ro, printbuff, 10);
		printf("roTH        "); printf(printbuff); printf("\r\n");
    1052:	82 e2       	ldi	r24, 0x22	; 34
    1054:	92 e0       	ldi	r25, 0x02	; 2
    1056:	9f 93       	push	r25
    1058:	8f 93       	push	r24
    105a:	0e 94 2a 13 	call	0x2654	; 0x2654 <printf>
    105e:	7f 92       	push	r7
    1060:	6f 92       	push	r6
    1062:	0e 94 2a 13 	call	0x2654	; 0x2654 <printf>
    1066:	8b ef       	ldi	r24, 0xFB	; 251
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	0e 94 47 13 	call	0x268e	; 0x268e <puts>
		dtostrf(ppm, 3, 5, printbuff);
    106e:	25 e0       	ldi	r18, 0x05	; 5
    1070:	43 e0       	ldi	r20, 0x03	; 3
    1072:	c7 01       	movw	r24, r14
    1074:	b6 01       	movw	r22, r12
    1076:	0e 94 c4 10 	call	0x2188	; 0x2188 <dtostrf>
		printf("ppm_roTHDef "); printf(printbuff); printf("\r\n");
    107a:	8f e2       	ldi	r24, 0x2F	; 47
    107c:	92 e0       	ldi	r25, 0x02	; 2
    107e:	9f 93       	push	r25
    1080:	8f 93       	push	r24
    1082:	0e 94 2a 13 	call	0x2654	; 0x2654 <printf>
    1086:	7f 92       	push	r7
    1088:	6f 92       	push	r6
    108a:	0e 94 2a 13 	call	0x2654	; 0x2654 <printf>
    108e:	8b ef       	ldi	r24, 0xFB	; 251
    1090:	91 e0       	ldi	r25, 0x01	; 1
    1092:	0e 94 47 13 	call	0x268e	; 0x268e <puts>

		/***********************************/
		RXCONT_mode();			//set LoRa radio to continuous receive mode
    1096:	0e 94 32 04 	call	0x864	; 0x864 <RXCONT_mode>
		while(1) 
		{
			if(rx == 1){
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <rx>
    10a8:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <rx+0x1>
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	41 f0       	breq	.+16     	; 0x10c0 <main+0x5d0>
						
				sei();										//enable interrupts
				rx = 0;										//clear the rx var so we dont run the code again
				break;
			}
			if(tx == 1){
    10b0:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <tx>
    10b4:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <tx+0x1>
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	09 f0       	breq	.+2      	; 0x10be <main+0x5ce>
    10bc:	64 c0       	rjmp	.+200    	; 0x1186 <main+0x696>
    10be:	3c c0       	rjmp	.+120    	; 0x1138 <main+0x648>
		/***********************************/
		RXCONT_mode();			//set LoRa radio to continuous receive mode
		while(1) 
		{
			if(rx == 1){
				cli();										//disable interrupts to prevent data and communication corruption
    10c0:	f8 94       	cli
				TRX_buffer *buffer;							//buffer for transfering data to and from the LoRa module
				buffer = init_struct_trx_buffer();			//initialize the struct as it is a pointer.
    10c2:	0e 94 60 03 	call	0x6c0	; 0x6c0 <init_struct_trx_buffer>
    10c6:	6c 01       	movw	r12, r24
				r_FIFO(buffer);								//put data recived from the LoRa FIFO int to the buffer struct
    10c8:	0e 94 4b 04 	call	0x896	; 0x896 <r_FIFO>
			
				printf("lora data:");
    10cc:	8c e3       	ldi	r24, 0x3C	; 60
    10ce:	92 e0       	ldi	r25, 0x02	; 2
    10d0:	9f 93       	push	r25
    10d2:	8f 93       	push	r24
    10d4:	0e 94 2a 13 	call	0x2654	; 0x2654 <printf>
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	e1 2c       	mov	r14, r1
    10de:	f1 2c       	mov	r15, r1
				for (uint8_t count = 0; count <= sizeof(buffer->array)+1; count++) {
					printf("%d", buffer[0].array[count]); 
    10e0:	d6 01       	movw	r26, r12
    10e2:	ed 91       	ld	r30, X+
    10e4:	fc 91       	ld	r31, X
    10e6:	ee 0d       	add	r30, r14
    10e8:	ff 1d       	adc	r31, r15
    10ea:	80 81       	ld	r24, Z
    10ec:	1f 92       	push	r1
    10ee:	8f 93       	push	r24
    10f0:	5f 92       	push	r5
    10f2:	4f 92       	push	r4
    10f4:	0e 94 2a 13 	call	0x2654	; 0x2654 <printf>
    10f8:	bf ef       	ldi	r27, 0xFF	; 255
    10fa:	eb 1a       	sub	r14, r27
    10fc:	fb 0a       	sbc	r15, r27
				TRX_buffer *buffer;							//buffer for transfering data to and from the LoRa module
				buffer = init_struct_trx_buffer();			//initialize the struct as it is a pointer.
				r_FIFO(buffer);								//put data recived from the LoRa FIFO int to the buffer struct
			
				printf("lora data:");
				for (uint8_t count = 0; count <= sizeof(buffer->array)+1; count++) {
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	24 e0       	ldi	r18, 0x04	; 4
    1108:	e2 16       	cp	r14, r18
    110a:	f1 04       	cpc	r15, r1
    110c:	49 f7       	brne	.-46     	; 0x10e0 <main+0x5f0>
					printf("%d", buffer[0].array[count]); 
				}
				printf("\n");
    110e:	8a e0       	ldi	r24, 0x0A	; 10
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	0e 94 40 13 	call	0x2680	; 0x2680 <putchar>
				byteFont5XY(buffer[0].array[4],0,4);
				byteFont5XY(buffer[0].array[5],0,5);									
				*/
				//after you have handled you data you should free the struct so it free's the memory.

				free_array(buffer);							//free the struct 
    1116:	c6 01       	movw	r24, r12
    1118:	0e 94 9d 03 	call	0x73a	; 0x73a <free_array>
				RXCONT_mode();								//put radio in continuous receive mode
    111c:	0e 94 32 04 	call	0x864	; 0x864 <RXCONT_mode>
						
				sei();										//enable interrupts
    1120:	78 94       	sei
				rx = 0;										//clear the rx var so we dont run the code again
    1122:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <rx+0x1>
    1126:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <rx>
				break;
    112a:	38 c0       	rjmp	.+112    	; 0x119c <main+0x6ac>
			}
			if(tx == 1){
    112c:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <tx>
    1130:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <tx+0x1>
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	39 f5       	brne	.+78     	; 0x1186 <main+0x696>
				cli();										//disable interrupts
    1138:	f8 94       	cli
				printf("tx mode on \n");
    113a:	8a e4       	ldi	r24, 0x4A	; 74
    113c:	92 e0       	ldi	r25, 0x02	; 2
    113e:	0e 94 47 13 	call	0x268e	; 0x268e <puts>
				TRX_buffer *buffer;							//struct for data
				buffer = init_struct_trx_buffer();			//initialize struct
    1142:	0e 94 60 03 	call	0x6c0	; 0x6c0 <init_struct_trx_buffer>
    1146:	7c 01       	movw	r14, r24
				//inserting number 0 to 6 in buffer and transmitting
				/*for(unsigned char i = 0; i <= 6; i++){
					insert_array(buffer, i);
				}*/
				insert_array(buffer, sensor_data.temperature_integral);
    1148:	6b a9       	ldd	r22, Y+51	; 0x33
    114a:	0e 94 77 03 	call	0x6ee	; 0x6ee <insert_array>
				insert_array(buffer, sensor_data.temperature_decimal);
    114e:	6c a9       	ldd	r22, Y+52	; 0x34
    1150:	c7 01       	movw	r24, r14
    1152:	0e 94 77 03 	call	0x6ee	; 0x6ee <insert_array>
				insert_array(buffer, sensor_data.humidity_integral);
    1156:	6d a9       	ldd	r22, Y+53	; 0x35
    1158:	c7 01       	movw	r24, r14
    115a:	0e 94 77 03 	call	0x6ee	; 0x6ee <insert_array>
				insert_array(buffer, sensor_data.humidity_decimal);
    115e:	6e a9       	ldd	r22, Y+54	; 0x36
    1160:	c7 01       	movw	r24, r14
    1162:	0e 94 77 03 	call	0x6ee	; 0x6ee <insert_array>
			
				strFont5XY("WRITE FIFO BEGIN",0,0);
				*/
				//********************************//
			
				w_FIFO(buffer);
    1166:	c7 01       	movw	r24, r14
    1168:	0e 94 9a 04 	call	0x934	; 0x934 <w_FIFO>
				//remove this if you dont have OLED
				/*strFont5XY("WRITE FIFO END",0,1);
				*/
				//********************************//

				free_array(buffer);							//free array after it has been written to the LoRa module FIFO
    116c:	c7 01       	movw	r24, r14
    116e:	0e 94 9d 03 	call	0x73a	; 0x73a <free_array>

				//remove this if you dont have OLED
				//strFont5XY("TX BEGIN",0,2);
				//*************************//

				TX_mode();									//put LoRa in TX mode after FIFO have been filled to transmit the data.
    1172:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <TX_mode>
				//remove this if you dont have OLED
				/*strFont5XY("TX END",0,3);
				*/
				//***********************//

				RXCONT_mode();								//put LoRa back in continuous receive mode after TX is 
    1176:	0e 94 32 04 	call	0x864	; 0x864 <RXCONT_mode>
				tx = 0;										//reset tx interrupt var
    117a:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <tx+0x1>
    117e:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <tx>
				sei();										//enable interrupts
    1182:	78 94       	sei
				break;
    1184:	0b c0       	rjmp	.+22     	; 0x119c <main+0x6ac>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1186:	82 e0       	ldi	r24, 0x02	; 2
    1188:	8a 95       	dec	r24
    118a:	f1 f7       	brne	.-4      	; 0x1188 <main+0x698>
    118c:	00 c0       	rjmp	.+0      	; 0x118e <main+0x69e>

		/***********************************/
		RXCONT_mode();			//set LoRa radio to continuous receive mode
		while(1) 
		{
			if(rx == 1){
    118e:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <rx>
    1192:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <rx+0x1>
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	49 f6       	brne	.-110    	; 0x112c <main+0x63c>
    119a:	92 cf       	rjmp	.-220    	; 0x10c0 <main+0x5d0>
				sei();										//enable interrupts
				break;
			}
			_delay_us(1);
		}
		printf("now reading sensor data...\n");
    119c:	86 e5       	ldi	r24, 0x56	; 86
    119e:	92 e0       	ldi	r25, 0x02	; 2
    11a0:	0e 94 47 13 	call	0x268e	; 0x268e <puts>
    11a4:	2f cd       	rjmp	.-1442   	; 0xc04 <main+0x114>

000011a6 <__vector_3>:
		//_delay_ms(2000);
    }
}

ISR(PCINT0_vect){	
    11a6:	1f 92       	push	r1
    11a8:	0f 92       	push	r0
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	0f 92       	push	r0
    11ae:	11 24       	eor	r1, r1
    11b0:	8f 93       	push	r24
    11b2:	9f 93       	push	r25
	cli();
    11b4:	f8 94       	cli
	rx = 1;												//set rx interrupt var
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <rx+0x1>
    11be:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <rx>
	
}
    11c2:	9f 91       	pop	r25
    11c4:	8f 91       	pop	r24
    11c6:	0f 90       	pop	r0
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	0f 90       	pop	r0
    11cc:	1f 90       	pop	r1
    11ce:	18 95       	reti

000011d0 <__vector_4>:
ISR(PCINT1_vect){
    11d0:	1f 92       	push	r1
    11d2:	0f 92       	push	r0
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	0f 92       	push	r0
    11d8:	11 24       	eor	r1, r1
    11da:	8f 93       	push	r24
    11dc:	9f 93       	push	r25
	cli();
    11de:	f8 94       	cli
	tx = 1;												//set tx interrupt var
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	90 93 7c 02 	sts	0x027C, r25	; 0x80027c <tx+0x1>
    11e8:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <tx>
	
}
    11ec:	9f 91       	pop	r25
    11ee:	8f 91       	pop	r24
    11f0:	0f 90       	pop	r0
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	0f 90       	pop	r0
    11f6:	1f 90       	pop	r1
    11f8:	18 95       	reti

000011fa <mq_getro>:

/*
 * get the calibrated Ro based upon read resistance
 * given the know ppm amount of gas, scalingfactor and exponent coefficient for the correlation function
 */
long mq_getro(long resvalue, double ppm, double scalingfactor, double exponent) {
    11fa:	4f 92       	push	r4
    11fc:	5f 92       	push	r5
    11fe:	6f 92       	push	r6
    1200:	7f 92       	push	r7
    1202:	af 92       	push	r10
    1204:	bf 92       	push	r11
    1206:	cf 92       	push	r12
    1208:	df 92       	push	r13
    120a:	ef 92       	push	r14
    120c:	ff 92       	push	r15
    120e:	0f 93       	push	r16
    1210:	1f 93       	push	r17
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	28 97       	sbiw	r28, 0x08	; 8
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	2b 01       	movw	r4, r22
    1228:	3c 01       	movw	r6, r24
    122a:	29 83       	std	Y+1, r18	; 0x01
    122c:	3a 83       	std	Y+2, r19	; 0x02
    122e:	4b 83       	std	Y+3, r20	; 0x03
    1230:	5c 83       	std	Y+4, r21	; 0x04
    1232:	ed 82       	std	Y+5, r14	; 0x05
    1234:	fe 82       	std	Y+6, r15	; 0x06
    1236:	0f 83       	std	Y+7, r16	; 0x07
    1238:	18 87       	std	Y+8, r17	; 0x08
    123a:	a6 01       	movw	r20, r12
    123c:	95 01       	movw	r18, r10
	return (long)((double)resvalue * pow((scalingfactor/ppm), (1/exponent)));
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	80 e8       	ldi	r24, 0x80	; 128
    1244:	9f e3       	ldi	r25, 0x3F	; 63
    1246:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divsf3>
    124a:	6b 01       	movw	r12, r22
    124c:	7c 01       	movw	r14, r24
    124e:	29 81       	ldd	r18, Y+1	; 0x01
    1250:	3a 81       	ldd	r19, Y+2	; 0x02
    1252:	4b 81       	ldd	r20, Y+3	; 0x03
    1254:	5c 81       	ldd	r21, Y+4	; 0x04
    1256:	6d 81       	ldd	r22, Y+5	; 0x05
    1258:	7e 81       	ldd	r23, Y+6	; 0x06
    125a:	8f 81       	ldd	r24, Y+7	; 0x07
    125c:	98 85       	ldd	r25, Y+8	; 0x08
    125e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divsf3>
    1262:	a7 01       	movw	r20, r14
    1264:	96 01       	movw	r18, r12
    1266:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <pow>
    126a:	6b 01       	movw	r12, r22
    126c:	7c 01       	movw	r14, r24
    126e:	c3 01       	movw	r24, r6
    1270:	b2 01       	movw	r22, r4
    1272:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__floatsisf>
    1276:	a7 01       	movw	r20, r14
    1278:	96 01       	movw	r18, r12
    127a:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
    127e:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__fixsfsi>
}
    1282:	28 96       	adiw	r28, 0x08	; 8
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	1f 91       	pop	r17
    1294:	0f 91       	pop	r16
    1296:	ff 90       	pop	r15
    1298:	ef 90       	pop	r14
    129a:	df 90       	pop	r13
    129c:	cf 90       	pop	r12
    129e:	bf 90       	pop	r11
    12a0:	af 90       	pop	r10
    12a2:	7f 90       	pop	r7
    12a4:	6f 90       	pop	r6
    12a6:	5f 90       	pop	r5
    12a8:	4f 90       	pop	r4
    12aa:	08 95       	ret

000012ac <mq_getppm>:
/*
 * get the ppm concentration based upon read resistance
 * given the Ro of the gas, scalingfactor and exponent coefficient for the correlation function
 * set maxrsro and mixrsro limits to prevent correlation error
 */
double mq_getppm(long resvalue, long ro, double scalingfactor, double exponent, double maxrsro, double minrsro) {
    12ac:	4f 92       	push	r4
    12ae:	5f 92       	push	r5
    12b0:	6f 92       	push	r6
    12b2:	7f 92       	push	r7
    12b4:	af 92       	push	r10
    12b6:	bf 92       	push	r11
    12b8:	cf 92       	push	r12
    12ba:	df 92       	push	r13
    12bc:	ef 92       	push	r14
    12be:	ff 92       	push	r15
    12c0:	0f 93       	push	r16
    12c2:	1f 93       	push	r17
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	28 97       	sbiw	r28, 0x08	; 8
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	29 01       	movw	r4, r18
    12da:	3a 01       	movw	r6, r20
    12dc:	ed 82       	std	Y+5, r14	; 0x05
    12de:	fe 82       	std	Y+6, r15	; 0x06
    12e0:	0f 83       	std	Y+7, r16	; 0x07
    12e2:	18 87       	std	Y+8, r17	; 0x08
	double ret = 0;
	double validinterval = resvalue/(double)ro;
    12e4:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__floatsisf>
    12e8:	69 83       	std	Y+1, r22	; 0x01
    12ea:	7a 83       	std	Y+2, r23	; 0x02
    12ec:	8b 83       	std	Y+3, r24	; 0x03
    12ee:	9c 83       	std	Y+4, r25	; 0x04
    12f0:	c3 01       	movw	r24, r6
    12f2:	b2 01       	movw	r22, r4
    12f4:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__floatsisf>
    12f8:	9b 01       	movw	r18, r22
    12fa:	ac 01       	movw	r20, r24
    12fc:	69 81       	ldd	r22, Y+1	; 0x01
    12fe:	7a 81       	ldd	r23, Y+2	; 0x02
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	9c 81       	ldd	r25, Y+4	; 0x04
    1304:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divsf3>
    1308:	2b 01       	movw	r4, r22
    130a:	3c 01       	movw	r6, r24
	//check valid interval
	if(validinterval<maxrsro && validinterval>minrsro) {
    130c:	29 8d       	ldd	r18, Y+25	; 0x19
    130e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1310:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1312:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1314:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__cmpsf2>
    1318:	88 23       	and	r24, r24
    131a:	ac f4       	brge	.+42     	; 0x1346 <mq_getppm+0x9a>
    131c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    131e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1320:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1322:	58 a1       	ldd	r21, Y+32	; 0x20
    1324:	c3 01       	movw	r24, r6
    1326:	b2 01       	movw	r22, r4
    1328:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__gesf2>
    132c:	18 16       	cp	r1, r24
    132e:	7c f4       	brge	.+30     	; 0x134e <mq_getppm+0xa2>
		//perform correlation
		ret = scalingfactor * pow(((double)resvalue/ro), exponent);
    1330:	a6 01       	movw	r20, r12
    1332:	95 01       	movw	r18, r10
    1334:	c3 01       	movw	r24, r6
    1336:	b2 01       	movw	r22, r4
    1338:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <pow>
    133c:	a8 01       	movw	r20, r16
    133e:	97 01       	movw	r18, r14
    1340:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
    1344:	07 c0       	rjmp	.+14     	; 0x1354 <mq_getppm+0xa8>
 * get the ppm concentration based upon read resistance
 * given the Ro of the gas, scalingfactor and exponent coefficient for the correlation function
 * set maxrsro and mixrsro limits to prevent correlation error
 */
double mq_getppm(long resvalue, long ro, double scalingfactor, double exponent, double maxrsro, double minrsro) {
	double ret = 0;
    1346:	60 e0       	ldi	r22, 0x00	; 0
    1348:	70 e0       	ldi	r23, 0x00	; 0
    134a:	cb 01       	movw	r24, r22
    134c:	03 c0       	rjmp	.+6      	; 0x1354 <mq_getppm+0xa8>
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	70 e0       	ldi	r23, 0x00	; 0
    1352:	cb 01       	movw	r24, r22
	if(validinterval<maxrsro && validinterval>minrsro) {
		//perform correlation
		ret = scalingfactor * pow(((double)resvalue/ro), exponent);
	}
	return ret;
}
    1354:	28 96       	adiw	r28, 0x08	; 8
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	de bf       	out	0x3e, r29	; 62
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	cd bf       	out	0x3d, r28	; 61
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	1f 91       	pop	r17
    1366:	0f 91       	pop	r16
    1368:	ff 90       	pop	r15
    136a:	ef 90       	pop	r14
    136c:	df 90       	pop	r13
    136e:	cf 90       	pop	r12
    1370:	bf 90       	pop	r11
    1372:	af 90       	pop	r10
    1374:	7f 90       	pop	r7
    1376:	6f 90       	pop	r6
    1378:	5f 90       	pop	r5
    137a:	4f 90       	pop	r4
    137c:	08 95       	ret

0000137e <mq_rsrotemphumdgain>:
/*
 * find Rs/Ro ratio given the acutal temp and humd
 * given the dependency curve Ro reference temp and humd, the lookup temperature table, and the lookup Rs/Ro ratio
 * lookupth1 and lookupth2 at humidity value lookupth1humdvalue and lookupth2humdvalue
 */
double mq_rsrotemphumdgain(double actualtemp, double actualhumd, int lookupthsize, double *lookuptht, double *lookupth1, double *lookupth2, double lookupth1humdvalue, double lookupth2humdvalue) {
    137e:	2f 92       	push	r2
    1380:	3f 92       	push	r3
    1382:	4f 92       	push	r4
    1384:	5f 92       	push	r5
    1386:	6f 92       	push	r6
    1388:	7f 92       	push	r7
    138a:	8f 92       	push	r8
    138c:	9f 92       	push	r9
    138e:	af 92       	push	r10
    1390:	bf 92       	push	r11
    1392:	cf 92       	push	r12
    1394:	df 92       	push	r13
    1396:	ef 92       	push	r14
    1398:	ff 92       	push	r15
    139a:	0f 93       	push	r16
    139c:	1f 93       	push	r17
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	60 97       	sbiw	r28, 0x10	; 16
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
	int i = 0;
	double rsroth1 = -1;
	double rsroth2 = -1;

	//find lookup temperature point
	while((i < (lookupthsize)) && (actualtemp > lookuptht[i])) {
    13b2:	10 16       	cp	r1, r16
    13b4:	11 06       	cpc	r1, r17
    13b6:	0c f0       	brlt	.+2      	; 0x13ba <mq_rsrotemphumdgain+0x3c>
    13b8:	d4 c0       	rjmp	.+424    	; 0x1562 <mq_rsrotemphumdgain+0x1e4>
    13ba:	bc 82       	std	Y+4, r11	; 0x04
    13bc:	ab 82       	std	Y+3, r10	; 0x03
    13be:	da 82       	std	Y+2, r13	; 0x02
    13c0:	c9 82       	std	Y+1, r12	; 0x01
    13c2:	2d 87       	std	Y+13, r18	; 0x0d
    13c4:	3e 87       	std	Y+14, r19	; 0x0e
    13c6:	4f 87       	std	Y+15, r20	; 0x0f
    13c8:	58 8b       	std	Y+16, r21	; 0x10
    13ca:	2b 01       	movw	r4, r22
    13cc:	3c 01       	movw	r6, r24
    13ce:	d7 01       	movw	r26, r14
    13d0:	2d 91       	ld	r18, X+
    13d2:	3d 91       	ld	r19, X+
    13d4:	4d 91       	ld	r20, X+
    13d6:	5c 91       	ld	r21, X
    13d8:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__gesf2>
    13dc:	18 16       	cp	r1, r24
    13de:	0c f0       	brlt	.+2      	; 0x13e2 <mq_rsrotemphumdgain+0x64>
    13e0:	c5 c0       	rjmp	.+394    	; 0x156c <mq_rsrotemphumdgain+0x1ee>
    13e2:	57 01       	movw	r10, r14
    13e4:	b4 e0       	ldi	r27, 0x04	; 4
    13e6:	ab 0e       	add	r10, r27
    13e8:	b1 1c       	adc	r11, r1
    13ea:	c1 2c       	mov	r12, r1
    13ec:	d1 2c       	mov	r13, r1
		i++;
    13ee:	ef ef       	ldi	r30, 0xFF	; 255
    13f0:	ce 1a       	sub	r12, r30
    13f2:	de 0a       	sbc	r13, r30
	int i = 0;
	double rsroth1 = -1;
	double rsroth2 = -1;

	//find lookup temperature point
	while((i < (lookupthsize)) && (actualtemp > lookuptht[i])) {
    13f4:	0c 15       	cp	r16, r12
    13f6:	1d 05       	cpc	r17, r13
    13f8:	09 f4       	brne	.+2      	; 0x13fc <mq_rsrotemphumdgain+0x7e>
    13fa:	bd c0       	rjmp	.+378    	; 0x1576 <mq_rsrotemphumdgain+0x1f8>
    13fc:	d5 01       	movw	r26, r10
    13fe:	6d 91       	ld	r22, X+
    1400:	7d 91       	ld	r23, X+
    1402:	8d 91       	ld	r24, X+
    1404:	9d 91       	ld	r25, X+
    1406:	5d 01       	movw	r10, r26
    1408:	a3 01       	movw	r20, r6
    140a:	92 01       	movw	r18, r4
    140c:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__cmpsf2>
    1410:	88 23       	and	r24, r24
    1412:	6c f3       	brlt	.-38     	; 0x13ee <mq_rsrotemphumdgain+0x70>
    1414:	ba c0       	rjmp	.+372    	; 0x158a <mq_rsrotemphumdgain+0x20c>
		rsroth2 = lookupth2[i];
#endif
	//compute interpolation
	} else {
		//find ratio actualtemp and lookupth1humdvalue
		rsroth1 = (lookupth1[i] - lookupth1[i-1]) / (lookuptht[i] - lookuptht[i-1]) * (actualtemp - lookuptht[i]) + lookupth1[i];
    1416:	86 01       	movw	r16, r12
    1418:	00 0f       	add	r16, r16
    141a:	11 1f       	adc	r17, r17
    141c:	00 0f       	add	r16, r16
    141e:	11 1f       	adc	r17, r17
    1420:	e9 81       	ldd	r30, Y+1	; 0x01
    1422:	fa 81       	ldd	r31, Y+2	; 0x02
    1424:	e0 0f       	add	r30, r16
    1426:	f1 1f       	adc	r31, r17
    1428:	80 81       	ld	r24, Z
    142a:	91 81       	ldd	r25, Z+1	; 0x01
    142c:	a2 81       	ldd	r26, Z+2	; 0x02
    142e:	b3 81       	ldd	r27, Z+3	; 0x03
    1430:	8d 83       	std	Y+5, r24	; 0x05
    1432:	9e 83       	std	Y+6, r25	; 0x06
    1434:	af 83       	std	Y+7, r26	; 0x07
    1436:	b8 87       	std	Y+8, r27	; 0x08
    1438:	18 01       	movw	r2, r16
    143a:	94 e0       	ldi	r25, 0x04	; 4
    143c:	29 1a       	sub	r2, r25
    143e:	31 08       	sbc	r3, r1
    1440:	f7 01       	movw	r30, r14
    1442:	e0 0f       	add	r30, r16
    1444:	f1 1f       	adc	r31, r17
    1446:	80 80       	ld	r8, Z
    1448:	91 80       	ldd	r9, Z+1	; 0x01
    144a:	a2 80       	ldd	r10, Z+2	; 0x02
    144c:	b3 80       	ldd	r11, Z+3	; 0x03
    144e:	f7 01       	movw	r30, r14
    1450:	e2 0d       	add	r30, r2
    1452:	f3 1d       	adc	r31, r3
    1454:	20 81       	ld	r18, Z
    1456:	31 81       	ldd	r19, Z+1	; 0x01
    1458:	42 81       	ldd	r20, Z+2	; 0x02
    145a:	53 81       	ldd	r21, Z+3	; 0x03
    145c:	c5 01       	movw	r24, r10
    145e:	b4 01       	movw	r22, r8
    1460:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__subsf3>
    1464:	69 87       	std	Y+9, r22	; 0x09
    1466:	7a 87       	std	Y+10, r23	; 0x0a
    1468:	8b 87       	std	Y+11, r24	; 0x0b
    146a:	9c 87       	std	Y+12, r25	; 0x0c
    146c:	a5 01       	movw	r20, r10
    146e:	94 01       	movw	r18, r8
    1470:	c3 01       	movw	r24, r6
    1472:	b2 01       	movw	r22, r4
    1474:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__subsf3>
    1478:	4b 01       	movw	r8, r22
    147a:	5c 01       	movw	r10, r24
    147c:	e9 81       	ldd	r30, Y+1	; 0x01
    147e:	fa 81       	ldd	r31, Y+2	; 0x02
    1480:	e2 0d       	add	r30, r2
    1482:	f3 1d       	adc	r31, r3
    1484:	20 81       	ld	r18, Z
    1486:	31 81       	ldd	r19, Z+1	; 0x01
    1488:	42 81       	ldd	r20, Z+2	; 0x02
    148a:	53 81       	ldd	r21, Z+3	; 0x03
    148c:	6d 81       	ldd	r22, Y+5	; 0x05
    148e:	7e 81       	ldd	r23, Y+6	; 0x06
    1490:	8f 81       	ldd	r24, Y+7	; 0x07
    1492:	98 85       	ldd	r25, Y+8	; 0x08
    1494:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__subsf3>
    1498:	29 85       	ldd	r18, Y+9	; 0x09
    149a:	3a 85       	ldd	r19, Y+10	; 0x0a
    149c:	4b 85       	ldd	r20, Y+11	; 0x0b
    149e:	5c 85       	ldd	r21, Y+12	; 0x0c
    14a0:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divsf3>
    14a4:	a5 01       	movw	r20, r10
    14a6:	94 01       	movw	r18, r8
    14a8:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
    14ac:	2d 81       	ldd	r18, Y+5	; 0x05
    14ae:	3e 81       	ldd	r19, Y+6	; 0x06
    14b0:	4f 81       	ldd	r20, Y+7	; 0x07
    14b2:	58 85       	ldd	r21, Y+8	; 0x08
    14b4:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__addsf3>
    14b8:	6b 01       	movw	r12, r22
    14ba:	7c 01       	movw	r14, r24
		//find ratio actualtemp and lookupth2humdvalue
		rsroth2 = (lookupth2[i] - lookupth2[i-1]) / (lookuptht[i] - lookuptht[i-1]) * (actualtemp - lookuptht[i]) + lookupth2[i];
    14bc:	eb 81       	ldd	r30, Y+3	; 0x03
    14be:	fc 81       	ldd	r31, Y+4	; 0x04
    14c0:	e0 0f       	add	r30, r16
    14c2:	f1 1f       	adc	r31, r17
    14c4:	40 80       	ld	r4, Z
    14c6:	51 80       	ldd	r5, Z+1	; 0x01
    14c8:	62 80       	ldd	r6, Z+2	; 0x02
    14ca:	73 80       	ldd	r7, Z+3	; 0x03
    14cc:	eb 81       	ldd	r30, Y+3	; 0x03
    14ce:	fc 81       	ldd	r31, Y+4	; 0x04
    14d0:	e2 0d       	add	r30, r2
    14d2:	f3 1d       	adc	r31, r3
	}
	//compute interpolation, find ratio actualtemp and actualhumd
	ret = rsroth1 + (actualhumd - lookupth1humdvalue)*(rsroth2 - rsroth1)/(lookupth2humdvalue-lookupth1humdvalue);
    14d4:	20 81       	ld	r18, Z
    14d6:	31 81       	ldd	r19, Z+1	; 0x01
    14d8:	42 81       	ldd	r20, Z+2	; 0x02
    14da:	53 81       	ldd	r21, Z+3	; 0x03
    14dc:	c3 01       	movw	r24, r6
    14de:	b2 01       	movw	r22, r4
    14e0:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__subsf3>
    14e4:	29 85       	ldd	r18, Y+9	; 0x09
    14e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    14e8:	4b 85       	ldd	r20, Y+11	; 0x0b
    14ea:	5c 85       	ldd	r21, Y+12	; 0x0c
    14ec:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divsf3>
    14f0:	a5 01       	movw	r20, r10
    14f2:	94 01       	movw	r18, r8
    14f4:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
    14f8:	a3 01       	movw	r20, r6
    14fa:	92 01       	movw	r18, r4
    14fc:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__addsf3>
    1500:	a7 01       	movw	r20, r14
    1502:	96 01       	movw	r18, r12
    1504:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__subsf3>
    1508:	4b 01       	movw	r8, r22
    150a:	5c 01       	movw	r10, r24
    150c:	2d a1       	ldd	r18, Y+37	; 0x25
    150e:	3e a1       	ldd	r19, Y+38	; 0x26
    1510:	4f a1       	ldd	r20, Y+39	; 0x27
    1512:	58 a5       	ldd	r21, Y+40	; 0x28
    1514:	6d 85       	ldd	r22, Y+13	; 0x0d
    1516:	7e 85       	ldd	r23, Y+14	; 0x0e
    1518:	8f 85       	ldd	r24, Y+15	; 0x0f
    151a:	98 89       	ldd	r25, Y+16	; 0x10
    151c:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__subsf3>
    1520:	9b 01       	movw	r18, r22
    1522:	ac 01       	movw	r20, r24
    1524:	c5 01       	movw	r24, r10
    1526:	b4 01       	movw	r22, r8
    1528:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
    152c:	4b 01       	movw	r8, r22
    152e:	5c 01       	movw	r10, r24
    1530:	2d a1       	ldd	r18, Y+37	; 0x25
    1532:	3e a1       	ldd	r19, Y+38	; 0x26
    1534:	4f a1       	ldd	r20, Y+39	; 0x27
    1536:	58 a5       	ldd	r21, Y+40	; 0x28
    1538:	69 a5       	ldd	r22, Y+41	; 0x29
    153a:	7a a5       	ldd	r23, Y+42	; 0x2a
    153c:	8b a5       	ldd	r24, Y+43	; 0x2b
    153e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1540:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__subsf3>
    1544:	9b 01       	movw	r18, r22
    1546:	ac 01       	movw	r20, r24
    1548:	c5 01       	movw	r24, r10
    154a:	b4 01       	movw	r22, r8
    154c:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divsf3>
    1550:	a7 01       	movw	r20, r14
    1552:	96 01       	movw	r18, r12
    1554:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__addsf3>

	return ret;
    1558:	56 2f       	mov	r21, r22
    155a:	47 2f       	mov	r20, r23
    155c:	38 2f       	mov	r19, r24
    155e:	29 2f       	mov	r18, r25
    1560:	19 c0       	rjmp	.+50     	; 0x1594 <mq_rsrotemphumdgain+0x216>
		i++;
	}
	//check limit max
	if(i == lookupthsize) {
#if MQ_RSROTEMPHUMDGAINPREVENTOUTOFLIMITS == 1
		return -1;
    1562:	50 e0       	ldi	r21, 0x00	; 0
    1564:	40 e0       	ldi	r20, 0x00	; 0
    1566:	30 e8       	ldi	r19, 0x80	; 128
    1568:	2f eb       	ldi	r18, 0xBF	; 191
    156a:	14 c0       	rjmp	.+40     	; 0x1594 <mq_rsrotemphumdgain+0x216>
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	40 e0       	ldi	r20, 0x00	; 0
    1570:	30 e8       	ldi	r19, 0x80	; 128
    1572:	2f eb       	ldi	r18, 0xBF	; 191
    1574:	0f c0       	rjmp	.+30     	; 0x1594 <mq_rsrotemphumdgain+0x216>
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	40 e0       	ldi	r20, 0x00	; 0
    157a:	30 e8       	ldi	r19, 0x80	; 128
    157c:	2f eb       	ldi	r18, 0xBF	; 191
    157e:	0a c0       	rjmp	.+20     	; 0x1594 <mq_rsrotemphumdgain+0x216>
		rsroth2 = lookupth2[i-1];
#endif
	//check limit min
	} else if(i == 0){
#if MQ_RSROTEMPHUMDGAINPREVENTOUTOFLIMITS == 1
		return -1;
    1580:	50 e0       	ldi	r21, 0x00	; 0
    1582:	40 e0       	ldi	r20, 0x00	; 0
    1584:	30 e8       	ldi	r19, 0x80	; 128
    1586:	2f eb       	ldi	r18, 0xBF	; 191
    1588:	05 c0       	rjmp	.+10     	; 0x1594 <mq_rsrotemphumdgain+0x216>
#else
		rsroth1 = lookupth1[i-1];
		rsroth2 = lookupth2[i-1];
#endif
	//check limit min
	} else if(i == 0){
    158a:	c1 14       	cp	r12, r1
    158c:	d1 04       	cpc	r13, r1
    158e:	09 f0       	breq	.+2      	; 0x1592 <mq_rsrotemphumdgain+0x214>
    1590:	42 cf       	rjmp	.-380    	; 0x1416 <mq_rsrotemphumdgain+0x98>
    1592:	f6 cf       	rjmp	.-20     	; 0x1580 <mq_rsrotemphumdgain+0x202>
	}
	//compute interpolation, find ratio actualtemp and actualhumd
	ret = rsroth1 + (actualhumd - lookupth1humdvalue)*(rsroth2 - rsroth1)/(lookupth2humdvalue-lookupth1humdvalue);

	return ret;
}
    1594:	65 2f       	mov	r22, r21
    1596:	74 2f       	mov	r23, r20
    1598:	83 2f       	mov	r24, r19
    159a:	92 2f       	mov	r25, r18
    159c:	60 96       	adiw	r28, 0x10	; 16
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	df 91       	pop	r29
    15aa:	cf 91       	pop	r28
    15ac:	1f 91       	pop	r17
    15ae:	0f 91       	pop	r16
    15b0:	ff 90       	pop	r15
    15b2:	ef 90       	pop	r14
    15b4:	df 90       	pop	r13
    15b6:	cf 90       	pop	r12
    15b8:	bf 90       	pop	r11
    15ba:	af 90       	pop	r10
    15bc:	9f 90       	pop	r9
    15be:	8f 90       	pop	r8
    15c0:	7f 90       	pop	r7
    15c2:	6f 90       	pop	r6
    15c4:	5f 90       	pop	r5
    15c6:	4f 90       	pop	r4
    15c8:	3f 90       	pop	r3
    15ca:	2f 90       	pop	r2
    15cc:	08 95       	ret

000015ce <mq_getrotemphumd>:
 * given the know ppm amount of gas, scalingfactor and exponent coefficient for the correlation function
 * correlate the Ro to the actualtemp and actualhumd
 * given the sensitivity characteristics curve Ro reference temp and humd, the lookup temperature table, and the lookup Rs/Ro ratio
 * lookupth1 and lookupth2 at humidity value lookupth1humdvalue and lookupth2humdvalue
 */
long mq_getrotemphumd(long resvalue, double ppm, double scalingfactor, double exponent, double actualtemp, double actualhumd, double senreftemp, double senrefhumd, int lookupthsize, double *lookuptht, double *lookupth1, double *lookupth2, double lookupth1humdvalue, double lookupth2humdvalue) {
    15ce:	2f 92       	push	r2
    15d0:	3f 92       	push	r3
    15d2:	4f 92       	push	r4
    15d4:	5f 92       	push	r5
    15d6:	6f 92       	push	r6
    15d8:	7f 92       	push	r7
    15da:	8f 92       	push	r8
    15dc:	9f 92       	push	r9
    15de:	af 92       	push	r10
    15e0:	bf 92       	push	r11
    15e2:	cf 92       	push	r12
    15e4:	df 92       	push	r13
    15e6:	ef 92       	push	r14
    15e8:	ff 92       	push	r15
    15ea:	0f 93       	push	r16
    15ec:	1f 93       	push	r17
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	28 97       	sbiw	r28, 0x08	; 8
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	f8 94       	cli
    15fc:	de bf       	out	0x3e, r29	; 62
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	cd bf       	out	0x3d, r28	; 61
    1602:	7d a8       	ldd	r7, Y+53	; 0x35
    1604:	6e a8       	ldd	r6, Y+54	; 0x36
    1606:	5f a8       	ldd	r5, Y+55	; 0x37
    1608:	48 ac       	ldd	r4, Y+56	; 0x38
    160a:	29 ac       	ldd	r2, Y+57	; 0x39
    160c:	3a ac       	ldd	r3, Y+58	; 0x3a
    160e:	8b ac       	ldd	r8, Y+59	; 0x3b
    1610:	9c ac       	ldd	r9, Y+60	; 0x3c
	long ret = 0;
	//compute ro
	long ro = mq_getro(resvalue, ppm, scalingfactor, exponent);
    1612:	0e 94 fd 08 	call	0x11fa	; 0x11fa <mq_getro>
    1616:	69 83       	std	Y+1, r22	; 0x01
    1618:	7a 83       	std	Y+2, r23	; 0x02
    161a:	8b 83       	std	Y+3, r24	; 0x03
    161c:	9c 83       	std	Y+4, r25	; 0x04
	//get ratio actualtemp actualhumd over dependence curve
	double m = mq_rsrotemphumdgain(actualtemp, actualhumd, lookupthsize, lookuptht, lookupth1, lookupth2, lookupth1humdvalue, lookupth2humdvalue);
    161e:	9f 92       	push	r9
    1620:	8f 92       	push	r8
    1622:	3f 92       	push	r3
    1624:	2f 92       	push	r2
    1626:	4f 92       	push	r4
    1628:	5f 92       	push	r5
    162a:	6f 92       	push	r6
    162c:	7f 92       	push	r7
    162e:	ab a8       	ldd	r10, Y+51	; 0x33
    1630:	bc a8       	ldd	r11, Y+52	; 0x34
    1632:	c9 a8       	ldd	r12, Y+49	; 0x31
    1634:	da a8       	ldd	r13, Y+50	; 0x32
    1636:	ef a4       	ldd	r14, Y+47	; 0x2f
    1638:	f8 a8       	ldd	r15, Y+48	; 0x30
    163a:	0d a5       	ldd	r16, Y+45	; 0x2d
    163c:	1e a5       	ldd	r17, Y+46	; 0x2e
    163e:	29 a1       	ldd	r18, Y+33	; 0x21
    1640:	3a a1       	ldd	r19, Y+34	; 0x22
    1642:	4b a1       	ldd	r20, Y+35	; 0x23
    1644:	5c a1       	ldd	r21, Y+36	; 0x24
    1646:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1648:	7e 8d       	ldd	r23, Y+30	; 0x1e
    164a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    164c:	98 a1       	ldd	r25, Y+32	; 0x20
    164e:	0e 94 bf 09 	call	0x137e	; 0x137e <mq_rsrotemphumdgain>
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	f8 94       	cli
    1656:	de bf       	out	0x3e, r29	; 62
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	cd bf       	out	0x3d, r28	; 61
    165c:	6d 83       	std	Y+5, r22	; 0x05
    165e:	7e 83       	std	Y+6, r23	; 0x06
    1660:	8f 83       	std	Y+7, r24	; 0x07
    1662:	98 87       	std	Y+8, r25	; 0x08
	//get ratio reftemp refhumd over dependence curve
	double n = mq_rsrotemphumdgain(senreftemp, senrefhumd, lookupthsize, lookuptht, lookupth1, lookupth2, lookupth1humdvalue, lookupth2humdvalue);
    1664:	9f 92       	push	r9
    1666:	8f 92       	push	r8
    1668:	3f 92       	push	r3
    166a:	2f 92       	push	r2
    166c:	4f 92       	push	r4
    166e:	5f 92       	push	r5
    1670:	6f 92       	push	r6
    1672:	7f 92       	push	r7
    1674:	ab a8       	ldd	r10, Y+51	; 0x33
    1676:	bc a8       	ldd	r11, Y+52	; 0x34
    1678:	c9 a8       	ldd	r12, Y+49	; 0x31
    167a:	da a8       	ldd	r13, Y+50	; 0x32
    167c:	ef a4       	ldd	r14, Y+47	; 0x2f
    167e:	f8 a8       	ldd	r15, Y+48	; 0x30
    1680:	0d a5       	ldd	r16, Y+45	; 0x2d
    1682:	1e a5       	ldd	r17, Y+46	; 0x2e
    1684:	29 a5       	ldd	r18, Y+41	; 0x29
    1686:	3a a5       	ldd	r19, Y+42	; 0x2a
    1688:	4b a5       	ldd	r20, Y+43	; 0x2b
    168a:	5c a5       	ldd	r21, Y+44	; 0x2c
    168c:	6d a1       	ldd	r22, Y+37	; 0x25
    168e:	7e a1       	ldd	r23, Y+38	; 0x26
    1690:	8f a1       	ldd	r24, Y+39	; 0x27
    1692:	98 a5       	ldd	r25, Y+40	; 0x28
    1694:	0e 94 bf 09 	call	0x137e	; 0x137e <mq_rsrotemphumdgain>
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
	//compute correlated ro
	ret = (long)((n/m)*ro);
	return ret;
    16a2:	2d 81       	ldd	r18, Y+5	; 0x05
    16a4:	3e 81       	ldd	r19, Y+6	; 0x06
    16a6:	4f 81       	ldd	r20, Y+7	; 0x07
    16a8:	58 85       	ldd	r21, Y+8	; 0x08
    16aa:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divsf3>
    16ae:	4b 01       	movw	r8, r22
    16b0:	5c 01       	movw	r10, r24
    16b2:	69 81       	ldd	r22, Y+1	; 0x01
    16b4:	7a 81       	ldd	r23, Y+2	; 0x02
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ba:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__floatsisf>
    16be:	9b 01       	movw	r18, r22
    16c0:	ac 01       	movw	r20, r24
    16c2:	c5 01       	movw	r24, r10
    16c4:	b4 01       	movw	r22, r8
    16c6:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
    16ca:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__fixsfsi>
}
    16ce:	28 96       	adiw	r28, 0x08	; 8
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	1f 91       	pop	r17
    16e0:	0f 91       	pop	r16
    16e2:	ff 90       	pop	r15
    16e4:	ef 90       	pop	r14
    16e6:	df 90       	pop	r13
    16e8:	cf 90       	pop	r12
    16ea:	bf 90       	pop	r11
    16ec:	af 90       	pop	r10
    16ee:	9f 90       	pop	r9
    16f0:	8f 90       	pop	r8
    16f2:	7f 90       	pop	r7
    16f4:	6f 90       	pop	r6
    16f6:	5f 90       	pop	r5
    16f8:	4f 90       	pop	r4
    16fa:	3f 90       	pop	r3
    16fc:	2f 90       	pop	r2
    16fe:	08 95       	ret

00001700 <mq_getppmtemphumd>:
 * set maxrsro and mixrsro limits to prevent correlation error
 * correlate the ppm to the actualtemp and actualhumd
 * given the sensitivity characteristics curve Ro reference temp and humd, the lookup temperature table, and the lookup Rs/Ro ratio
 * lookupth1 and lookupth2 at humidity value lookupth1humdvalue and lookupth2humdvalue
 */
double mq_getppmtemphumd(long resvalue, long ro, double scalingfactor, double exponent, double maxrsro, double minrsro, double actualtemp, double actualhumd, double senreftemp, double senrefhumd, int lookupthsize, double *lookuptht, double *lookupth1, double *lookupth2, double lookupth1humdvalue, double lookupth2humdvalue) {
    1700:	2f 92       	push	r2
    1702:	3f 92       	push	r3
    1704:	4f 92       	push	r4
    1706:	5f 92       	push	r5
    1708:	6f 92       	push	r6
    170a:	7f 92       	push	r7
    170c:	8f 92       	push	r8
    170e:	9f 92       	push	r9
    1710:	af 92       	push	r10
    1712:	bf 92       	push	r11
    1714:	cf 92       	push	r12
    1716:	df 92       	push	r13
    1718:	ef 92       	push	r14
    171a:	ff 92       	push	r15
    171c:	0f 93       	push	r16
    171e:	1f 93       	push	r17
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	64 97       	sbiw	r28, 0x14	; 20
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	6d 83       	std	Y+5, r22	; 0x05
    1736:	7e 83       	std	Y+6, r23	; 0x06
    1738:	8f 83       	std	Y+7, r24	; 0x07
    173a:	98 87       	std	Y+8, r25	; 0x08
    173c:	29 87       	std	Y+9, r18	; 0x09
    173e:	3a 87       	std	Y+10, r19	; 0x0a
    1740:	4b 87       	std	Y+11, r20	; 0x0b
    1742:	5c 87       	std	Y+12, r21	; 0x0c
    1744:	ed 86       	std	Y+13, r14	; 0x0d
    1746:	fe 86       	std	Y+14, r15	; 0x0e
    1748:	0f 87       	std	Y+15, r16	; 0x0f
    174a:	18 8b       	std	Y+16, r17	; 0x10
    174c:	a9 8a       	std	Y+17, r10	; 0x11
    174e:	ba 8a       	std	Y+18, r11	; 0x12
    1750:	cb 8a       	std	Y+19, r12	; 0x13
    1752:	dc 8a       	std	Y+20, r13	; 0x14
    1754:	2a 96       	adiw	r28, 0x0a	; 10
    1756:	9f ac       	ldd	r9, Y+63	; 0x3f
    1758:	2a 97       	sbiw	r28, 0x0a	; 10
    175a:	2b 96       	adiw	r28, 0x0b	; 11
    175c:	8f ac       	ldd	r8, Y+63	; 0x3f
    175e:	2b 97       	sbiw	r28, 0x0b	; 11
    1760:	2c 96       	adiw	r28, 0x0c	; 12
    1762:	7f ac       	ldd	r7, Y+63	; 0x3f
    1764:	2c 97       	sbiw	r28, 0x0c	; 12
    1766:	2d 96       	adiw	r28, 0x0d	; 13
    1768:	6f ac       	ldd	r6, Y+63	; 0x3f
    176a:	2d 97       	sbiw	r28, 0x0d	; 13
    176c:	2e 96       	adiw	r28, 0x0e	; 14
    176e:	5f ac       	ldd	r5, Y+63	; 0x3f
    1770:	2e 97       	sbiw	r28, 0x0e	; 14
    1772:	2f 96       	adiw	r28, 0x0f	; 15
    1774:	4f ac       	ldd	r4, Y+63	; 0x3f
    1776:	2f 97       	sbiw	r28, 0x0f	; 15
    1778:	60 96       	adiw	r28, 0x10	; 16
    177a:	3f ac       	ldd	r3, Y+63	; 0x3f
    177c:	60 97       	sbiw	r28, 0x10	; 16
    177e:	61 96       	adiw	r28, 0x11	; 17
    1780:	2f ac       	ldd	r2, Y+63	; 0x3f
    1782:	61 97       	sbiw	r28, 0x11	; 17
	double ret = 0;
	//get ratio actualtemp actualhumd over dependence curve
	double t = mq_rsrotemphumdgain(actualtemp, actualhumd, lookupthsize, lookuptht, lookupth1, lookupth2, lookupth1humdvalue, lookupth2humdvalue);
    1784:	2f 92       	push	r2
    1786:	3f 92       	push	r3
    1788:	4f 92       	push	r4
    178a:	5f 92       	push	r5
    178c:	6f 92       	push	r6
    178e:	7f 92       	push	r7
    1790:	8f 92       	push	r8
    1792:	9f 92       	push	r9
    1794:	29 96       	adiw	r28, 0x09	; 9
    1796:	ae ac       	ldd	r10, Y+62	; 0x3e
    1798:	bf ac       	ldd	r11, Y+63	; 0x3f
    179a:	29 97       	sbiw	r28, 0x09	; 9
    179c:	27 96       	adiw	r28, 0x07	; 7
    179e:	ce ac       	ldd	r12, Y+62	; 0x3e
    17a0:	df ac       	ldd	r13, Y+63	; 0x3f
    17a2:	27 97       	sbiw	r28, 0x07	; 7
    17a4:	25 96       	adiw	r28, 0x05	; 5
    17a6:	ee ac       	ldd	r14, Y+62	; 0x3e
    17a8:	ff ac       	ldd	r15, Y+63	; 0x3f
    17aa:	25 97       	sbiw	r28, 0x05	; 5
    17ac:	23 96       	adiw	r28, 0x03	; 3
    17ae:	0e ad       	ldd	r16, Y+62	; 0x3e
    17b0:	1f ad       	ldd	r17, Y+63	; 0x3f
    17b2:	23 97       	sbiw	r28, 0x03	; 3
    17b4:	2d a9       	ldd	r18, Y+53	; 0x35
    17b6:	3e a9       	ldd	r19, Y+54	; 0x36
    17b8:	4f a9       	ldd	r20, Y+55	; 0x37
    17ba:	58 ad       	ldd	r21, Y+56	; 0x38
    17bc:	69 a9       	ldd	r22, Y+49	; 0x31
    17be:	7a a9       	ldd	r23, Y+50	; 0x32
    17c0:	8b a9       	ldd	r24, Y+51	; 0x33
    17c2:	9c a9       	ldd	r25, Y+52	; 0x34
    17c4:	0e 94 bf 09 	call	0x137e	; 0x137e <mq_rsrotemphumdgain>
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	69 83       	std	Y+1, r22	; 0x01
    17d4:	7a 83       	std	Y+2, r23	; 0x02
    17d6:	8b 83       	std	Y+3, r24	; 0x03
    17d8:	9c 83       	std	Y+4, r25	; 0x04
	//get ratio reftemp refhumd over dependence curve
	double q = mq_rsrotemphumdgain(senreftemp, senrefhumd, lookupthsize, lookuptht, lookupth1, lookupth2, lookupth1humdvalue, lookupth2humdvalue);
    17da:	2f 92       	push	r2
    17dc:	3f 92       	push	r3
    17de:	4f 92       	push	r4
    17e0:	5f 92       	push	r5
    17e2:	6f 92       	push	r6
    17e4:	7f 92       	push	r7
    17e6:	8f 92       	push	r8
    17e8:	9f 92       	push	r9
    17ea:	29 96       	adiw	r28, 0x09	; 9
    17ec:	ae ac       	ldd	r10, Y+62	; 0x3e
    17ee:	bf ac       	ldd	r11, Y+63	; 0x3f
    17f0:	29 97       	sbiw	r28, 0x09	; 9
    17f2:	27 96       	adiw	r28, 0x07	; 7
    17f4:	ce ac       	ldd	r12, Y+62	; 0x3e
    17f6:	df ac       	ldd	r13, Y+63	; 0x3f
    17f8:	27 97       	sbiw	r28, 0x07	; 7
    17fa:	25 96       	adiw	r28, 0x05	; 5
    17fc:	ee ac       	ldd	r14, Y+62	; 0x3e
    17fe:	ff ac       	ldd	r15, Y+63	; 0x3f
    1800:	25 97       	sbiw	r28, 0x05	; 5
    1802:	23 96       	adiw	r28, 0x03	; 3
    1804:	0e ad       	ldd	r16, Y+62	; 0x3e
    1806:	1f ad       	ldd	r17, Y+63	; 0x3f
    1808:	23 97       	sbiw	r28, 0x03	; 3
    180a:	21 96       	adiw	r28, 0x01	; 1
    180c:	2c ad       	ldd	r18, Y+60	; 0x3c
    180e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1810:	4e ad       	ldd	r20, Y+62	; 0x3e
    1812:	5f ad       	ldd	r21, Y+63	; 0x3f
    1814:	21 97       	sbiw	r28, 0x01	; 1
    1816:	69 ad       	ldd	r22, Y+57	; 0x39
    1818:	7a ad       	ldd	r23, Y+58	; 0x3a
    181a:	8b ad       	ldd	r24, Y+59	; 0x3b
    181c:	9c ad       	ldd	r25, Y+60	; 0x3c
    181e:	0e 94 bf 09 	call	0x137e	; 0x137e <mq_rsrotemphumdgain>
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
 * given the Ro of the gas, scalingfactor and exponent coefficient for the correlation function
 * set maxrsro and mixrsro limits to prevent correlation error
 */
double mq_getppm(long resvalue, long ro, double scalingfactor, double exponent, double maxrsro, double minrsro) {
	double ret = 0;
	double validinterval = resvalue/(double)ro;
    182c:	29 81       	ldd	r18, Y+1	; 0x01
    182e:	3a 81       	ldd	r19, Y+2	; 0x02
    1830:	4b 81       	ldd	r20, Y+3	; 0x03
    1832:	5c 81       	ldd	r21, Y+4	; 0x04
    1834:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divsf3>
    1838:	2b 01       	movw	r4, r22
    183a:	3c 01       	movw	r6, r24
    183c:	6d 81       	ldd	r22, Y+5	; 0x05
    183e:	7e 81       	ldd	r23, Y+6	; 0x06
    1840:	8f 81       	ldd	r24, Y+7	; 0x07
    1842:	98 85       	ldd	r25, Y+8	; 0x08
    1844:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__floatsisf>
    1848:	9b 01       	movw	r18, r22
    184a:	ac 01       	movw	r20, r24
    184c:	c3 01       	movw	r24, r6
    184e:	b2 01       	movw	r22, r4
    1850:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
    1854:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__fixsfsi>
    1858:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__floatsisf>
    185c:	2b 01       	movw	r4, r22
    185e:	3c 01       	movw	r6, r24
    1860:	69 85       	ldd	r22, Y+9	; 0x09
    1862:	7a 85       	ldd	r23, Y+10	; 0x0a
    1864:	8b 85       	ldd	r24, Y+11	; 0x0b
    1866:	9c 85       	ldd	r25, Y+12	; 0x0c
    1868:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__floatsisf>
    186c:	9b 01       	movw	r18, r22
    186e:	ac 01       	movw	r20, r24
    1870:	c3 01       	movw	r24, r6
    1872:	b2 01       	movw	r22, r4
    1874:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divsf3>
    1878:	2b 01       	movw	r4, r22
    187a:	3c 01       	movw	r6, r24
	//check valid interval
	if(validinterval<maxrsro && validinterval>minrsro) {
    187c:	9b 01       	movw	r18, r22
    187e:	ac 01       	movw	r20, r24
    1880:	69 a5       	ldd	r22, Y+41	; 0x29
    1882:	7a a5       	ldd	r23, Y+42	; 0x2a
    1884:	8b a5       	ldd	r24, Y+43	; 0x2b
    1886:	9c a5       	ldd	r25, Y+44	; 0x2c
    1888:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__gesf2>
    188c:	18 16       	cp	r1, r24
    188e:	dc f4       	brge	.+54     	; 0x18c6 <mq_getppmtemphumd+0x1c6>
    1890:	a3 01       	movw	r20, r6
    1892:	92 01       	movw	r18, r4
    1894:	6d a5       	ldd	r22, Y+45	; 0x2d
    1896:	7e a5       	ldd	r23, Y+46	; 0x2e
    1898:	8f a5       	ldd	r24, Y+47	; 0x2f
    189a:	98 a9       	ldd	r25, Y+48	; 0x30
    189c:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__cmpsf2>
    18a0:	88 23       	and	r24, r24
    18a2:	ac f4       	brge	.+42     	; 0x18ce <mq_getppmtemphumd+0x1ce>
		//perform correlation
		ret = scalingfactor * pow(((double)resvalue/ro), exponent);
    18a4:	29 89       	ldd	r18, Y+17	; 0x11
    18a6:	3a 89       	ldd	r19, Y+18	; 0x12
    18a8:	4b 89       	ldd	r20, Y+19	; 0x13
    18aa:	5c 89       	ldd	r21, Y+20	; 0x14
    18ac:	c3 01       	movw	r24, r6
    18ae:	b2 01       	movw	r22, r4
    18b0:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <pow>
    18b4:	9b 01       	movw	r18, r22
    18b6:	ac 01       	movw	r20, r24
    18b8:	6d 85       	ldd	r22, Y+13	; 0x0d
    18ba:	7e 85       	ldd	r23, Y+14	; 0x0e
    18bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    18be:	98 89       	ldd	r25, Y+16	; 0x10
    18c0:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
    18c4:	07 c0       	rjmp	.+14     	; 0x18d4 <mq_getppmtemphumd+0x1d4>
 * get the ppm concentration based upon read resistance
 * given the Ro of the gas, scalingfactor and exponent coefficient for the correlation function
 * set maxrsro and mixrsro limits to prevent correlation error
 */
double mq_getppm(long resvalue, long ro, double scalingfactor, double exponent, double maxrsro, double minrsro) {
	double ret = 0;
    18c6:	60 e0       	ldi	r22, 0x00	; 0
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	cb 01       	movw	r24, r22
    18cc:	03 c0       	rjmp	.+6      	; 0x18d4 <mq_getppmtemphumd+0x1d4>
    18ce:	60 e0       	ldi	r22, 0x00	; 0
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	cb 01       	movw	r24, r22
	//get correlated resvalue
	long resvaluetemphum = (long)((q/t)*resvalue);
	//compute correlated ppm
	ret = mq_getppm(resvaluetemphum, ro, scalingfactor, exponent, maxrsro, minrsro);
	return ret;
}
    18d4:	64 96       	adiw	r28, 0x14	; 20
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	de bf       	out	0x3e, r29	; 62
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	df 91       	pop	r29
    18e2:	cf 91       	pop	r28
    18e4:	1f 91       	pop	r17
    18e6:	0f 91       	pop	r16
    18e8:	ff 90       	pop	r15
    18ea:	ef 90       	pop	r14
    18ec:	df 90       	pop	r13
    18ee:	cf 90       	pop	r12
    18f0:	bf 90       	pop	r11
    18f2:	af 90       	pop	r10
    18f4:	9f 90       	pop	r9
    18f6:	8f 90       	pop	r8
    18f8:	7f 90       	pop	r7
    18fa:	6f 90       	pop	r6
    18fc:	5f 90       	pop	r5
    18fe:	4f 90       	pop	r4
    1900:	3f 90       	pop	r3
    1902:	2f 90       	pop	r2
    1904:	08 95       	ret

00001906 <uart_putchar>:
    stdout = &mystdout; //required by printf
    stdin  = &mystdin; //required by scanf
}

//redirect stdout to UART
int uart_putchar(char c, FILE *stream) {
    1906:	cf 93       	push	r28
    1908:	c8 2f       	mov	r28, r24
	if (c == '\n') {
    190a:	8a 30       	cpi	r24, 0x0A	; 10
    190c:	19 f4       	brne	.+6      	; 0x1914 <uart_putchar+0xe>
		uart_putchar('\r', stream);
    190e:	8d e0       	ldi	r24, 0x0D	; 13
    1910:	0e 94 83 0c 	call	0x1906	; 0x1906 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
    1914:	e0 ec       	ldi	r30, 0xC0	; 192
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	85 ff       	sbrs	r24, 5
    191c:	fd cf       	rjmp	.-6      	; 0x1918 <uart_putchar+0x12>
	UDR0 = c;
    191e:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	cf 91       	pop	r28
    1928:	08 95       	ret

0000192a <uart_getchar>:

//redirect stdin to UART
int uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
    192a:	e0 ec       	ldi	r30, 0xC0	; 192
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	88 23       	and	r24, r24
    1932:	ec f7       	brge	.-6      	; 0x192e <uart_getchar+0x4>
	return UDR0;
    1934:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	08 95       	ret

0000193c <ioinit>:
static FILE mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ); //redirect uart_getchar() to stdio

void ioinit (void)
{
    //USART Baud rate: 9600, 8data, 1stop
    UBRR0H = MYUBRR >> 8;
    193c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = MYUBRR;
    1940:	83 e3       	ldi	r24, 0x33	; 51
    1942:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1946:	88 e1       	ldi	r24, 0x18	; 24
    1948:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    
    stdout = &mystdout; //required by printf
    194c:	e6 e8       	ldi	r30, 0x86	; 134
    194e:	f2 e0       	ldi	r31, 0x02	; 2
    1950:	84 e1       	ldi	r24, 0x14	; 20
    1952:	91 e0       	ldi	r25, 0x01	; 1
    1954:	93 83       	std	Z+3, r25	; 0x03
    1956:	82 83       	std	Z+2, r24	; 0x02
    stdin  = &mystdin; //required by scanf
    1958:	86 e0       	ldi	r24, 0x06	; 6
    195a:	91 e0       	ldi	r25, 0x01	; 1
    195c:	91 83       	std	Z+1, r25	; 0x01
    195e:	80 83       	st	Z, r24
    1960:	08 95       	ret

00001962 <__subsf3>:
    1962:	50 58       	subi	r21, 0x80	; 128

00001964 <__addsf3>:
    1964:	bb 27       	eor	r27, r27
    1966:	aa 27       	eor	r26, r26
    1968:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__addsf3x>
    196c:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__fp_round>
    1970:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__fp_pscA>
    1974:	38 f0       	brcs	.+14     	; 0x1984 <__addsf3+0x20>
    1976:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__fp_pscB>
    197a:	20 f0       	brcs	.+8      	; 0x1984 <__addsf3+0x20>
    197c:	39 f4       	brne	.+14     	; 0x198c <__addsf3+0x28>
    197e:	9f 3f       	cpi	r25, 0xFF	; 255
    1980:	19 f4       	brne	.+6      	; 0x1988 <__addsf3+0x24>
    1982:	26 f4       	brtc	.+8      	; 0x198c <__addsf3+0x28>
    1984:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__fp_nan>
    1988:	0e f4       	brtc	.+2      	; 0x198c <__addsf3+0x28>
    198a:	e0 95       	com	r30
    198c:	e7 fb       	bst	r30, 7
    198e:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <__fp_inf>

00001992 <__addsf3x>:
    1992:	e9 2f       	mov	r30, r25
    1994:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__fp_split3>
    1998:	58 f3       	brcs	.-42     	; 0x1970 <__addsf3+0xc>
    199a:	ba 17       	cp	r27, r26
    199c:	62 07       	cpc	r22, r18
    199e:	73 07       	cpc	r23, r19
    19a0:	84 07       	cpc	r24, r20
    19a2:	95 07       	cpc	r25, r21
    19a4:	20 f0       	brcs	.+8      	; 0x19ae <__addsf3x+0x1c>
    19a6:	79 f4       	brne	.+30     	; 0x19c6 <__addsf3x+0x34>
    19a8:	a6 f5       	brtc	.+104    	; 0x1a12 <__addsf3x+0x80>
    19aa:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <__fp_zero>
    19ae:	0e f4       	brtc	.+2      	; 0x19b2 <__addsf3x+0x20>
    19b0:	e0 95       	com	r30
    19b2:	0b 2e       	mov	r0, r27
    19b4:	ba 2f       	mov	r27, r26
    19b6:	a0 2d       	mov	r26, r0
    19b8:	0b 01       	movw	r0, r22
    19ba:	b9 01       	movw	r22, r18
    19bc:	90 01       	movw	r18, r0
    19be:	0c 01       	movw	r0, r24
    19c0:	ca 01       	movw	r24, r20
    19c2:	a0 01       	movw	r20, r0
    19c4:	11 24       	eor	r1, r1
    19c6:	ff 27       	eor	r31, r31
    19c8:	59 1b       	sub	r21, r25
    19ca:	99 f0       	breq	.+38     	; 0x19f2 <__addsf3x+0x60>
    19cc:	59 3f       	cpi	r21, 0xF9	; 249
    19ce:	50 f4       	brcc	.+20     	; 0x19e4 <__addsf3x+0x52>
    19d0:	50 3e       	cpi	r21, 0xE0	; 224
    19d2:	68 f1       	brcs	.+90     	; 0x1a2e <__addsf3x+0x9c>
    19d4:	1a 16       	cp	r1, r26
    19d6:	f0 40       	sbci	r31, 0x00	; 0
    19d8:	a2 2f       	mov	r26, r18
    19da:	23 2f       	mov	r18, r19
    19dc:	34 2f       	mov	r19, r20
    19de:	44 27       	eor	r20, r20
    19e0:	58 5f       	subi	r21, 0xF8	; 248
    19e2:	f3 cf       	rjmp	.-26     	; 0x19ca <__addsf3x+0x38>
    19e4:	46 95       	lsr	r20
    19e6:	37 95       	ror	r19
    19e8:	27 95       	ror	r18
    19ea:	a7 95       	ror	r26
    19ec:	f0 40       	sbci	r31, 0x00	; 0
    19ee:	53 95       	inc	r21
    19f0:	c9 f7       	brne	.-14     	; 0x19e4 <__addsf3x+0x52>
    19f2:	7e f4       	brtc	.+30     	; 0x1a12 <__addsf3x+0x80>
    19f4:	1f 16       	cp	r1, r31
    19f6:	ba 0b       	sbc	r27, r26
    19f8:	62 0b       	sbc	r22, r18
    19fa:	73 0b       	sbc	r23, r19
    19fc:	84 0b       	sbc	r24, r20
    19fe:	ba f0       	brmi	.+46     	; 0x1a2e <__addsf3x+0x9c>
    1a00:	91 50       	subi	r25, 0x01	; 1
    1a02:	a1 f0       	breq	.+40     	; 0x1a2c <__addsf3x+0x9a>
    1a04:	ff 0f       	add	r31, r31
    1a06:	bb 1f       	adc	r27, r27
    1a08:	66 1f       	adc	r22, r22
    1a0a:	77 1f       	adc	r23, r23
    1a0c:	88 1f       	adc	r24, r24
    1a0e:	c2 f7       	brpl	.-16     	; 0x1a00 <__addsf3x+0x6e>
    1a10:	0e c0       	rjmp	.+28     	; 0x1a2e <__addsf3x+0x9c>
    1a12:	ba 0f       	add	r27, r26
    1a14:	62 1f       	adc	r22, r18
    1a16:	73 1f       	adc	r23, r19
    1a18:	84 1f       	adc	r24, r20
    1a1a:	48 f4       	brcc	.+18     	; 0x1a2e <__addsf3x+0x9c>
    1a1c:	87 95       	ror	r24
    1a1e:	77 95       	ror	r23
    1a20:	67 95       	ror	r22
    1a22:	b7 95       	ror	r27
    1a24:	f7 95       	ror	r31
    1a26:	9e 3f       	cpi	r25, 0xFE	; 254
    1a28:	08 f0       	brcs	.+2      	; 0x1a2c <__addsf3x+0x9a>
    1a2a:	b0 cf       	rjmp	.-160    	; 0x198c <__addsf3+0x28>
    1a2c:	93 95       	inc	r25
    1a2e:	88 0f       	add	r24, r24
    1a30:	08 f0       	brcs	.+2      	; 0x1a34 <__addsf3x+0xa2>
    1a32:	99 27       	eor	r25, r25
    1a34:	ee 0f       	add	r30, r30
    1a36:	97 95       	ror	r25
    1a38:	87 95       	ror	r24
    1a3a:	08 95       	ret

00001a3c <__cmpsf2>:
    1a3c:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__fp_cmp>
    1a40:	08 f4       	brcc	.+2      	; 0x1a44 <__cmpsf2+0x8>
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	08 95       	ret

00001a46 <__divsf3>:
    1a46:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__divsf3x>
    1a4a:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__fp_round>
    1a4e:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__fp_pscB>
    1a52:	58 f0       	brcs	.+22     	; 0x1a6a <__divsf3+0x24>
    1a54:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__fp_pscA>
    1a58:	40 f0       	brcs	.+16     	; 0x1a6a <__divsf3+0x24>
    1a5a:	29 f4       	brne	.+10     	; 0x1a66 <__divsf3+0x20>
    1a5c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a5e:	29 f0       	breq	.+10     	; 0x1a6a <__divsf3+0x24>
    1a60:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <__fp_inf>
    1a64:	51 11       	cpse	r21, r1
    1a66:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__fp_szero>
    1a6a:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__fp_nan>

00001a6e <__divsf3x>:
    1a6e:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__fp_split3>
    1a72:	68 f3       	brcs	.-38     	; 0x1a4e <__divsf3+0x8>

00001a74 <__divsf3_pse>:
    1a74:	99 23       	and	r25, r25
    1a76:	b1 f3       	breq	.-20     	; 0x1a64 <__divsf3+0x1e>
    1a78:	55 23       	and	r21, r21
    1a7a:	91 f3       	breq	.-28     	; 0x1a60 <__divsf3+0x1a>
    1a7c:	95 1b       	sub	r25, r21
    1a7e:	55 0b       	sbc	r21, r21
    1a80:	bb 27       	eor	r27, r27
    1a82:	aa 27       	eor	r26, r26
    1a84:	62 17       	cp	r22, r18
    1a86:	73 07       	cpc	r23, r19
    1a88:	84 07       	cpc	r24, r20
    1a8a:	38 f0       	brcs	.+14     	; 0x1a9a <__divsf3_pse+0x26>
    1a8c:	9f 5f       	subi	r25, 0xFF	; 255
    1a8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a90:	22 0f       	add	r18, r18
    1a92:	33 1f       	adc	r19, r19
    1a94:	44 1f       	adc	r20, r20
    1a96:	aa 1f       	adc	r26, r26
    1a98:	a9 f3       	breq	.-22     	; 0x1a84 <__divsf3_pse+0x10>
    1a9a:	35 d0       	rcall	.+106    	; 0x1b06 <__divsf3_pse+0x92>
    1a9c:	0e 2e       	mov	r0, r30
    1a9e:	3a f0       	brmi	.+14     	; 0x1aae <__divsf3_pse+0x3a>
    1aa0:	e0 e8       	ldi	r30, 0x80	; 128
    1aa2:	32 d0       	rcall	.+100    	; 0x1b08 <__divsf3_pse+0x94>
    1aa4:	91 50       	subi	r25, 0x01	; 1
    1aa6:	50 40       	sbci	r21, 0x00	; 0
    1aa8:	e6 95       	lsr	r30
    1aaa:	00 1c       	adc	r0, r0
    1aac:	ca f7       	brpl	.-14     	; 0x1aa0 <__divsf3_pse+0x2c>
    1aae:	2b d0       	rcall	.+86     	; 0x1b06 <__divsf3_pse+0x92>
    1ab0:	fe 2f       	mov	r31, r30
    1ab2:	29 d0       	rcall	.+82     	; 0x1b06 <__divsf3_pse+0x92>
    1ab4:	66 0f       	add	r22, r22
    1ab6:	77 1f       	adc	r23, r23
    1ab8:	88 1f       	adc	r24, r24
    1aba:	bb 1f       	adc	r27, r27
    1abc:	26 17       	cp	r18, r22
    1abe:	37 07       	cpc	r19, r23
    1ac0:	48 07       	cpc	r20, r24
    1ac2:	ab 07       	cpc	r26, r27
    1ac4:	b0 e8       	ldi	r27, 0x80	; 128
    1ac6:	09 f0       	breq	.+2      	; 0x1aca <__divsf3_pse+0x56>
    1ac8:	bb 0b       	sbc	r27, r27
    1aca:	80 2d       	mov	r24, r0
    1acc:	bf 01       	movw	r22, r30
    1ace:	ff 27       	eor	r31, r31
    1ad0:	93 58       	subi	r25, 0x83	; 131
    1ad2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad4:	3a f0       	brmi	.+14     	; 0x1ae4 <__divsf3_pse+0x70>
    1ad6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ad8:	51 05       	cpc	r21, r1
    1ada:	78 f0       	brcs	.+30     	; 0x1afa <__divsf3_pse+0x86>
    1adc:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <__fp_inf>
    1ae0:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__fp_szero>
    1ae4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ae6:	e4 f3       	brlt	.-8      	; 0x1ae0 <__divsf3_pse+0x6c>
    1ae8:	98 3e       	cpi	r25, 0xE8	; 232
    1aea:	d4 f3       	brlt	.-12     	; 0x1ae0 <__divsf3_pse+0x6c>
    1aec:	86 95       	lsr	r24
    1aee:	77 95       	ror	r23
    1af0:	67 95       	ror	r22
    1af2:	b7 95       	ror	r27
    1af4:	f7 95       	ror	r31
    1af6:	9f 5f       	subi	r25, 0xFF	; 255
    1af8:	c9 f7       	brne	.-14     	; 0x1aec <__divsf3_pse+0x78>
    1afa:	88 0f       	add	r24, r24
    1afc:	91 1d       	adc	r25, r1
    1afe:	96 95       	lsr	r25
    1b00:	87 95       	ror	r24
    1b02:	97 f9       	bld	r25, 7
    1b04:	08 95       	ret
    1b06:	e1 e0       	ldi	r30, 0x01	; 1
    1b08:	66 0f       	add	r22, r22
    1b0a:	77 1f       	adc	r23, r23
    1b0c:	88 1f       	adc	r24, r24
    1b0e:	bb 1f       	adc	r27, r27
    1b10:	62 17       	cp	r22, r18
    1b12:	73 07       	cpc	r23, r19
    1b14:	84 07       	cpc	r24, r20
    1b16:	ba 07       	cpc	r27, r26
    1b18:	20 f0       	brcs	.+8      	; 0x1b22 <__divsf3_pse+0xae>
    1b1a:	62 1b       	sub	r22, r18
    1b1c:	73 0b       	sbc	r23, r19
    1b1e:	84 0b       	sbc	r24, r20
    1b20:	ba 0b       	sbc	r27, r26
    1b22:	ee 1f       	adc	r30, r30
    1b24:	88 f7       	brcc	.-30     	; 0x1b08 <__divsf3_pse+0x94>
    1b26:	e0 95       	com	r30
    1b28:	08 95       	ret

00001b2a <__fixsfsi>:
    1b2a:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__fixunssfsi>
    1b2e:	68 94       	set
    1b30:	b1 11       	cpse	r27, r1
    1b32:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__fp_szero>
    1b36:	08 95       	ret

00001b38 <__fixunssfsi>:
    1b38:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__fp_splitA>
    1b3c:	88 f0       	brcs	.+34     	; 0x1b60 <__fixunssfsi+0x28>
    1b3e:	9f 57       	subi	r25, 0x7F	; 127
    1b40:	98 f0       	brcs	.+38     	; 0x1b68 <__fixunssfsi+0x30>
    1b42:	b9 2f       	mov	r27, r25
    1b44:	99 27       	eor	r25, r25
    1b46:	b7 51       	subi	r27, 0x17	; 23
    1b48:	b0 f0       	brcs	.+44     	; 0x1b76 <__fixunssfsi+0x3e>
    1b4a:	e1 f0       	breq	.+56     	; 0x1b84 <__fixunssfsi+0x4c>
    1b4c:	66 0f       	add	r22, r22
    1b4e:	77 1f       	adc	r23, r23
    1b50:	88 1f       	adc	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	1a f0       	brmi	.+6      	; 0x1b5c <__fixunssfsi+0x24>
    1b56:	ba 95       	dec	r27
    1b58:	c9 f7       	brne	.-14     	; 0x1b4c <__fixunssfsi+0x14>
    1b5a:	14 c0       	rjmp	.+40     	; 0x1b84 <__fixunssfsi+0x4c>
    1b5c:	b1 30       	cpi	r27, 0x01	; 1
    1b5e:	91 f0       	breq	.+36     	; 0x1b84 <__fixunssfsi+0x4c>
    1b60:	0e 94 76 0e 	call	0x1cec	; 0x1cec <__fp_zero>
    1b64:	b1 e0       	ldi	r27, 0x01	; 1
    1b66:	08 95       	ret
    1b68:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <__fp_zero>
    1b6c:	67 2f       	mov	r22, r23
    1b6e:	78 2f       	mov	r23, r24
    1b70:	88 27       	eor	r24, r24
    1b72:	b8 5f       	subi	r27, 0xF8	; 248
    1b74:	39 f0       	breq	.+14     	; 0x1b84 <__fixunssfsi+0x4c>
    1b76:	b9 3f       	cpi	r27, 0xF9	; 249
    1b78:	cc f3       	brlt	.-14     	; 0x1b6c <__fixunssfsi+0x34>
    1b7a:	86 95       	lsr	r24
    1b7c:	77 95       	ror	r23
    1b7e:	67 95       	ror	r22
    1b80:	b3 95       	inc	r27
    1b82:	d9 f7       	brne	.-10     	; 0x1b7a <__fixunssfsi+0x42>
    1b84:	3e f4       	brtc	.+14     	; 0x1b94 <__fixunssfsi+0x5c>
    1b86:	90 95       	com	r25
    1b88:	80 95       	com	r24
    1b8a:	70 95       	com	r23
    1b8c:	61 95       	neg	r22
    1b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b90:	8f 4f       	sbci	r24, 0xFF	; 255
    1b92:	9f 4f       	sbci	r25, 0xFF	; 255
    1b94:	08 95       	ret

00001b96 <__floatunsisf>:
    1b96:	e8 94       	clt
    1b98:	09 c0       	rjmp	.+18     	; 0x1bac <__floatsisf+0x12>

00001b9a <__floatsisf>:
    1b9a:	97 fb       	bst	r25, 7
    1b9c:	3e f4       	brtc	.+14     	; 0x1bac <__floatsisf+0x12>
    1b9e:	90 95       	com	r25
    1ba0:	80 95       	com	r24
    1ba2:	70 95       	com	r23
    1ba4:	61 95       	neg	r22
    1ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba8:	8f 4f       	sbci	r24, 0xFF	; 255
    1baa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bac:	99 23       	and	r25, r25
    1bae:	a9 f0       	breq	.+42     	; 0x1bda <__floatsisf+0x40>
    1bb0:	f9 2f       	mov	r31, r25
    1bb2:	96 e9       	ldi	r25, 0x96	; 150
    1bb4:	bb 27       	eor	r27, r27
    1bb6:	93 95       	inc	r25
    1bb8:	f6 95       	lsr	r31
    1bba:	87 95       	ror	r24
    1bbc:	77 95       	ror	r23
    1bbe:	67 95       	ror	r22
    1bc0:	b7 95       	ror	r27
    1bc2:	f1 11       	cpse	r31, r1
    1bc4:	f8 cf       	rjmp	.-16     	; 0x1bb6 <__floatsisf+0x1c>
    1bc6:	fa f4       	brpl	.+62     	; 0x1c06 <__floatsisf+0x6c>
    1bc8:	bb 0f       	add	r27, r27
    1bca:	11 f4       	brne	.+4      	; 0x1bd0 <__floatsisf+0x36>
    1bcc:	60 ff       	sbrs	r22, 0
    1bce:	1b c0       	rjmp	.+54     	; 0x1c06 <__floatsisf+0x6c>
    1bd0:	6f 5f       	subi	r22, 0xFF	; 255
    1bd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd8:	16 c0       	rjmp	.+44     	; 0x1c06 <__floatsisf+0x6c>
    1bda:	88 23       	and	r24, r24
    1bdc:	11 f0       	breq	.+4      	; 0x1be2 <__floatsisf+0x48>
    1bde:	96 e9       	ldi	r25, 0x96	; 150
    1be0:	11 c0       	rjmp	.+34     	; 0x1c04 <__floatsisf+0x6a>
    1be2:	77 23       	and	r23, r23
    1be4:	21 f0       	breq	.+8      	; 0x1bee <__floatsisf+0x54>
    1be6:	9e e8       	ldi	r25, 0x8E	; 142
    1be8:	87 2f       	mov	r24, r23
    1bea:	76 2f       	mov	r23, r22
    1bec:	05 c0       	rjmp	.+10     	; 0x1bf8 <__floatsisf+0x5e>
    1bee:	66 23       	and	r22, r22
    1bf0:	71 f0       	breq	.+28     	; 0x1c0e <__floatsisf+0x74>
    1bf2:	96 e8       	ldi	r25, 0x86	; 134
    1bf4:	86 2f       	mov	r24, r22
    1bf6:	70 e0       	ldi	r23, 0x00	; 0
    1bf8:	60 e0       	ldi	r22, 0x00	; 0
    1bfa:	2a f0       	brmi	.+10     	; 0x1c06 <__floatsisf+0x6c>
    1bfc:	9a 95       	dec	r25
    1bfe:	66 0f       	add	r22, r22
    1c00:	77 1f       	adc	r23, r23
    1c02:	88 1f       	adc	r24, r24
    1c04:	da f7       	brpl	.-10     	; 0x1bfc <__floatsisf+0x62>
    1c06:	88 0f       	add	r24, r24
    1c08:	96 95       	lsr	r25
    1c0a:	87 95       	ror	r24
    1c0c:	97 f9       	bld	r25, 7
    1c0e:	08 95       	ret

00001c10 <__fp_cmp>:
    1c10:	99 0f       	add	r25, r25
    1c12:	00 08       	sbc	r0, r0
    1c14:	55 0f       	add	r21, r21
    1c16:	aa 0b       	sbc	r26, r26
    1c18:	e0 e8       	ldi	r30, 0x80	; 128
    1c1a:	fe ef       	ldi	r31, 0xFE	; 254
    1c1c:	16 16       	cp	r1, r22
    1c1e:	17 06       	cpc	r1, r23
    1c20:	e8 07       	cpc	r30, r24
    1c22:	f9 07       	cpc	r31, r25
    1c24:	c0 f0       	brcs	.+48     	; 0x1c56 <__fp_cmp+0x46>
    1c26:	12 16       	cp	r1, r18
    1c28:	13 06       	cpc	r1, r19
    1c2a:	e4 07       	cpc	r30, r20
    1c2c:	f5 07       	cpc	r31, r21
    1c2e:	98 f0       	brcs	.+38     	; 0x1c56 <__fp_cmp+0x46>
    1c30:	62 1b       	sub	r22, r18
    1c32:	73 0b       	sbc	r23, r19
    1c34:	84 0b       	sbc	r24, r20
    1c36:	95 0b       	sbc	r25, r21
    1c38:	39 f4       	brne	.+14     	; 0x1c48 <__fp_cmp+0x38>
    1c3a:	0a 26       	eor	r0, r26
    1c3c:	61 f0       	breq	.+24     	; 0x1c56 <__fp_cmp+0x46>
    1c3e:	23 2b       	or	r18, r19
    1c40:	24 2b       	or	r18, r20
    1c42:	25 2b       	or	r18, r21
    1c44:	21 f4       	brne	.+8      	; 0x1c4e <__fp_cmp+0x3e>
    1c46:	08 95       	ret
    1c48:	0a 26       	eor	r0, r26
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <__fp_cmp+0x3e>
    1c4c:	a1 40       	sbci	r26, 0x01	; 1
    1c4e:	a6 95       	lsr	r26
    1c50:	8f ef       	ldi	r24, 0xFF	; 255
    1c52:	81 1d       	adc	r24, r1
    1c54:	81 1d       	adc	r24, r1
    1c56:	08 95       	ret

00001c58 <__fp_inf>:
    1c58:	97 f9       	bld	r25, 7
    1c5a:	9f 67       	ori	r25, 0x7F	; 127
    1c5c:	80 e8       	ldi	r24, 0x80	; 128
    1c5e:	70 e0       	ldi	r23, 0x00	; 0
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	08 95       	ret

00001c64 <__fp_nan>:
    1c64:	9f ef       	ldi	r25, 0xFF	; 255
    1c66:	80 ec       	ldi	r24, 0xC0	; 192
    1c68:	08 95       	ret

00001c6a <__fp_pscA>:
    1c6a:	00 24       	eor	r0, r0
    1c6c:	0a 94       	dec	r0
    1c6e:	16 16       	cp	r1, r22
    1c70:	17 06       	cpc	r1, r23
    1c72:	18 06       	cpc	r1, r24
    1c74:	09 06       	cpc	r0, r25
    1c76:	08 95       	ret

00001c78 <__fp_pscB>:
    1c78:	00 24       	eor	r0, r0
    1c7a:	0a 94       	dec	r0
    1c7c:	12 16       	cp	r1, r18
    1c7e:	13 06       	cpc	r1, r19
    1c80:	14 06       	cpc	r1, r20
    1c82:	05 06       	cpc	r0, r21
    1c84:	08 95       	ret

00001c86 <__fp_round>:
    1c86:	09 2e       	mov	r0, r25
    1c88:	03 94       	inc	r0
    1c8a:	00 0c       	add	r0, r0
    1c8c:	11 f4       	brne	.+4      	; 0x1c92 <__fp_round+0xc>
    1c8e:	88 23       	and	r24, r24
    1c90:	52 f0       	brmi	.+20     	; 0x1ca6 <__fp_round+0x20>
    1c92:	bb 0f       	add	r27, r27
    1c94:	40 f4       	brcc	.+16     	; 0x1ca6 <__fp_round+0x20>
    1c96:	bf 2b       	or	r27, r31
    1c98:	11 f4       	brne	.+4      	; 0x1c9e <__fp_round+0x18>
    1c9a:	60 ff       	sbrs	r22, 0
    1c9c:	04 c0       	rjmp	.+8      	; 0x1ca6 <__fp_round+0x20>
    1c9e:	6f 5f       	subi	r22, 0xFF	; 255
    1ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca6:	08 95       	ret

00001ca8 <__fp_split3>:
    1ca8:	57 fd       	sbrc	r21, 7
    1caa:	90 58       	subi	r25, 0x80	; 128
    1cac:	44 0f       	add	r20, r20
    1cae:	55 1f       	adc	r21, r21
    1cb0:	59 f0       	breq	.+22     	; 0x1cc8 <__fp_splitA+0x10>
    1cb2:	5f 3f       	cpi	r21, 0xFF	; 255
    1cb4:	71 f0       	breq	.+28     	; 0x1cd2 <__fp_splitA+0x1a>
    1cb6:	47 95       	ror	r20

00001cb8 <__fp_splitA>:
    1cb8:	88 0f       	add	r24, r24
    1cba:	97 fb       	bst	r25, 7
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	61 f0       	breq	.+24     	; 0x1cd8 <__fp_splitA+0x20>
    1cc0:	9f 3f       	cpi	r25, 0xFF	; 255
    1cc2:	79 f0       	breq	.+30     	; 0x1ce2 <__fp_splitA+0x2a>
    1cc4:	87 95       	ror	r24
    1cc6:	08 95       	ret
    1cc8:	12 16       	cp	r1, r18
    1cca:	13 06       	cpc	r1, r19
    1ccc:	14 06       	cpc	r1, r20
    1cce:	55 1f       	adc	r21, r21
    1cd0:	f2 cf       	rjmp	.-28     	; 0x1cb6 <__fp_split3+0xe>
    1cd2:	46 95       	lsr	r20
    1cd4:	f1 df       	rcall	.-30     	; 0x1cb8 <__fp_splitA>
    1cd6:	08 c0       	rjmp	.+16     	; 0x1ce8 <__fp_splitA+0x30>
    1cd8:	16 16       	cp	r1, r22
    1cda:	17 06       	cpc	r1, r23
    1cdc:	18 06       	cpc	r1, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	f1 cf       	rjmp	.-30     	; 0x1cc4 <__fp_splitA+0xc>
    1ce2:	86 95       	lsr	r24
    1ce4:	71 05       	cpc	r23, r1
    1ce6:	61 05       	cpc	r22, r1
    1ce8:	08 94       	sec
    1cea:	08 95       	ret

00001cec <__fp_zero>:
    1cec:	e8 94       	clt

00001cee <__fp_szero>:
    1cee:	bb 27       	eor	r27, r27
    1cf0:	66 27       	eor	r22, r22
    1cf2:	77 27       	eor	r23, r23
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	97 f9       	bld	r25, 7
    1cf8:	08 95       	ret

00001cfa <__gesf2>:
    1cfa:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__fp_cmp>
    1cfe:	08 f4       	brcc	.+2      	; 0x1d02 <__gesf2+0x8>
    1d00:	8f ef       	ldi	r24, 0xFF	; 255
    1d02:	08 95       	ret

00001d04 <__mulsf3>:
    1d04:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__mulsf3x>
    1d08:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__fp_round>
    1d0c:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__fp_pscA>
    1d10:	38 f0       	brcs	.+14     	; 0x1d20 <__mulsf3+0x1c>
    1d12:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__fp_pscB>
    1d16:	20 f0       	brcs	.+8      	; 0x1d20 <__mulsf3+0x1c>
    1d18:	95 23       	and	r25, r21
    1d1a:	11 f0       	breq	.+4      	; 0x1d20 <__mulsf3+0x1c>
    1d1c:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <__fp_inf>
    1d20:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__fp_nan>
    1d24:	11 24       	eor	r1, r1
    1d26:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__fp_szero>

00001d2a <__mulsf3x>:
    1d2a:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__fp_split3>
    1d2e:	70 f3       	brcs	.-36     	; 0x1d0c <__mulsf3+0x8>

00001d30 <__mulsf3_pse>:
    1d30:	95 9f       	mul	r25, r21
    1d32:	c1 f3       	breq	.-16     	; 0x1d24 <__mulsf3+0x20>
    1d34:	95 0f       	add	r25, r21
    1d36:	50 e0       	ldi	r21, 0x00	; 0
    1d38:	55 1f       	adc	r21, r21
    1d3a:	62 9f       	mul	r22, r18
    1d3c:	f0 01       	movw	r30, r0
    1d3e:	72 9f       	mul	r23, r18
    1d40:	bb 27       	eor	r27, r27
    1d42:	f0 0d       	add	r31, r0
    1d44:	b1 1d       	adc	r27, r1
    1d46:	63 9f       	mul	r22, r19
    1d48:	aa 27       	eor	r26, r26
    1d4a:	f0 0d       	add	r31, r0
    1d4c:	b1 1d       	adc	r27, r1
    1d4e:	aa 1f       	adc	r26, r26
    1d50:	64 9f       	mul	r22, r20
    1d52:	66 27       	eor	r22, r22
    1d54:	b0 0d       	add	r27, r0
    1d56:	a1 1d       	adc	r26, r1
    1d58:	66 1f       	adc	r22, r22
    1d5a:	82 9f       	mul	r24, r18
    1d5c:	22 27       	eor	r18, r18
    1d5e:	b0 0d       	add	r27, r0
    1d60:	a1 1d       	adc	r26, r1
    1d62:	62 1f       	adc	r22, r18
    1d64:	73 9f       	mul	r23, r19
    1d66:	b0 0d       	add	r27, r0
    1d68:	a1 1d       	adc	r26, r1
    1d6a:	62 1f       	adc	r22, r18
    1d6c:	83 9f       	mul	r24, r19
    1d6e:	a0 0d       	add	r26, r0
    1d70:	61 1d       	adc	r22, r1
    1d72:	22 1f       	adc	r18, r18
    1d74:	74 9f       	mul	r23, r20
    1d76:	33 27       	eor	r19, r19
    1d78:	a0 0d       	add	r26, r0
    1d7a:	61 1d       	adc	r22, r1
    1d7c:	23 1f       	adc	r18, r19
    1d7e:	84 9f       	mul	r24, r20
    1d80:	60 0d       	add	r22, r0
    1d82:	21 1d       	adc	r18, r1
    1d84:	82 2f       	mov	r24, r18
    1d86:	76 2f       	mov	r23, r22
    1d88:	6a 2f       	mov	r22, r26
    1d8a:	11 24       	eor	r1, r1
    1d8c:	9f 57       	subi	r25, 0x7F	; 127
    1d8e:	50 40       	sbci	r21, 0x00	; 0
    1d90:	9a f0       	brmi	.+38     	; 0x1db8 <__mulsf3_pse+0x88>
    1d92:	f1 f0       	breq	.+60     	; 0x1dd0 <__mulsf3_pse+0xa0>
    1d94:	88 23       	and	r24, r24
    1d96:	4a f0       	brmi	.+18     	; 0x1daa <__mulsf3_pse+0x7a>
    1d98:	ee 0f       	add	r30, r30
    1d9a:	ff 1f       	adc	r31, r31
    1d9c:	bb 1f       	adc	r27, r27
    1d9e:	66 1f       	adc	r22, r22
    1da0:	77 1f       	adc	r23, r23
    1da2:	88 1f       	adc	r24, r24
    1da4:	91 50       	subi	r25, 0x01	; 1
    1da6:	50 40       	sbci	r21, 0x00	; 0
    1da8:	a9 f7       	brne	.-22     	; 0x1d94 <__mulsf3_pse+0x64>
    1daa:	9e 3f       	cpi	r25, 0xFE	; 254
    1dac:	51 05       	cpc	r21, r1
    1dae:	80 f0       	brcs	.+32     	; 0x1dd0 <__mulsf3_pse+0xa0>
    1db0:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <__fp_inf>
    1db4:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__fp_szero>
    1db8:	5f 3f       	cpi	r21, 0xFF	; 255
    1dba:	e4 f3       	brlt	.-8      	; 0x1db4 <__mulsf3_pse+0x84>
    1dbc:	98 3e       	cpi	r25, 0xE8	; 232
    1dbe:	d4 f3       	brlt	.-12     	; 0x1db4 <__mulsf3_pse+0x84>
    1dc0:	86 95       	lsr	r24
    1dc2:	77 95       	ror	r23
    1dc4:	67 95       	ror	r22
    1dc6:	b7 95       	ror	r27
    1dc8:	f7 95       	ror	r31
    1dca:	e7 95       	ror	r30
    1dcc:	9f 5f       	subi	r25, 0xFF	; 255
    1dce:	c1 f7       	brne	.-16     	; 0x1dc0 <__mulsf3_pse+0x90>
    1dd0:	fe 2b       	or	r31, r30
    1dd2:	88 0f       	add	r24, r24
    1dd4:	91 1d       	adc	r25, r1
    1dd6:	96 95       	lsr	r25
    1dd8:	87 95       	ror	r24
    1dda:	97 f9       	bld	r25, 7
    1ddc:	08 95       	ret

00001dde <pow>:
    1dde:	fa 01       	movw	r30, r20
    1de0:	ee 0f       	add	r30, r30
    1de2:	ff 1f       	adc	r31, r31
    1de4:	30 96       	adiw	r30, 0x00	; 0
    1de6:	21 05       	cpc	r18, r1
    1de8:	31 05       	cpc	r19, r1
    1dea:	a1 f1       	breq	.+104    	; 0x1e54 <pow+0x76>
    1dec:	61 15       	cp	r22, r1
    1dee:	71 05       	cpc	r23, r1
    1df0:	61 f4       	brne	.+24     	; 0x1e0a <pow+0x2c>
    1df2:	80 38       	cpi	r24, 0x80	; 128
    1df4:	bf e3       	ldi	r27, 0x3F	; 63
    1df6:	9b 07       	cpc	r25, r27
    1df8:	49 f1       	breq	.+82     	; 0x1e4c <pow+0x6e>
    1dfa:	68 94       	set
    1dfc:	90 38       	cpi	r25, 0x80	; 128
    1dfe:	81 05       	cpc	r24, r1
    1e00:	61 f0       	breq	.+24     	; 0x1e1a <pow+0x3c>
    1e02:	80 38       	cpi	r24, 0x80	; 128
    1e04:	bf ef       	ldi	r27, 0xFF	; 255
    1e06:	9b 07       	cpc	r25, r27
    1e08:	41 f0       	breq	.+16     	; 0x1e1a <pow+0x3c>
    1e0a:	99 23       	and	r25, r25
    1e0c:	4a f5       	brpl	.+82     	; 0x1e60 <pow+0x82>
    1e0e:	ff 3f       	cpi	r31, 0xFF	; 255
    1e10:	e1 05       	cpc	r30, r1
    1e12:	31 05       	cpc	r19, r1
    1e14:	21 05       	cpc	r18, r1
    1e16:	19 f1       	breq	.+70     	; 0x1e5e <pow+0x80>
    1e18:	e8 94       	clt
    1e1a:	08 94       	sec
    1e1c:	e7 95       	ror	r30
    1e1e:	d9 01       	movw	r26, r18
    1e20:	aa 23       	and	r26, r26
    1e22:	29 f4       	brne	.+10     	; 0x1e2e <pow+0x50>
    1e24:	ab 2f       	mov	r26, r27
    1e26:	be 2f       	mov	r27, r30
    1e28:	f8 5f       	subi	r31, 0xF8	; 248
    1e2a:	d0 f3       	brcs	.-12     	; 0x1e20 <pow+0x42>
    1e2c:	10 c0       	rjmp	.+32     	; 0x1e4e <pow+0x70>
    1e2e:	ff 5f       	subi	r31, 0xFF	; 255
    1e30:	70 f4       	brcc	.+28     	; 0x1e4e <pow+0x70>
    1e32:	a6 95       	lsr	r26
    1e34:	e0 f7       	brcc	.-8      	; 0x1e2e <pow+0x50>
    1e36:	f7 39       	cpi	r31, 0x97	; 151
    1e38:	50 f0       	brcs	.+20     	; 0x1e4e <pow+0x70>
    1e3a:	19 f0       	breq	.+6      	; 0x1e42 <pow+0x64>
    1e3c:	ff 3a       	cpi	r31, 0xAF	; 175
    1e3e:	38 f4       	brcc	.+14     	; 0x1e4e <pow+0x70>
    1e40:	9f 77       	andi	r25, 0x7F	; 127
    1e42:	9f 93       	push	r25
    1e44:	0d d0       	rcall	.+26     	; 0x1e60 <pow+0x82>
    1e46:	0f 90       	pop	r0
    1e48:	07 fc       	sbrc	r0, 7
    1e4a:	90 58       	subi	r25, 0x80	; 128
    1e4c:	08 95       	ret
    1e4e:	46 f0       	brts	.+16     	; 0x1e60 <pow+0x82>
    1e50:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__fp_nan>
    1e54:	60 e0       	ldi	r22, 0x00	; 0
    1e56:	70 e0       	ldi	r23, 0x00	; 0
    1e58:	80 e8       	ldi	r24, 0x80	; 128
    1e5a:	9f e3       	ldi	r25, 0x3F	; 63
    1e5c:	08 95       	ret
    1e5e:	4f e7       	ldi	r20, 0x7F	; 127
    1e60:	9f 77       	andi	r25, 0x7F	; 127
    1e62:	5f 93       	push	r21
    1e64:	4f 93       	push	r20
    1e66:	3f 93       	push	r19
    1e68:	2f 93       	push	r18
    1e6a:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <log>
    1e6e:	2f 91       	pop	r18
    1e70:	3f 91       	pop	r19
    1e72:	4f 91       	pop	r20
    1e74:	5f 91       	pop	r21
    1e76:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
    1e7a:	0c 94 47 0f 	jmp	0x1e8e	; 0x1e8e <exp>
    1e7e:	29 f4       	brne	.+10     	; 0x1e8a <pow+0xac>
    1e80:	16 f0       	brts	.+4      	; 0x1e86 <pow+0xa8>
    1e82:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <__fp_inf>
    1e86:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <__fp_zero>
    1e8a:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__fp_nan>

00001e8e <exp>:
    1e8e:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__fp_splitA>
    1e92:	a8 f3       	brcs	.-22     	; 0x1e7e <pow+0xa0>
    1e94:	96 38       	cpi	r25, 0x86	; 134
    1e96:	a0 f7       	brcc	.-24     	; 0x1e80 <pow+0xa2>
    1e98:	07 f8       	bld	r0, 7
    1e9a:	0f 92       	push	r0
    1e9c:	e8 94       	clt
    1e9e:	2b e3       	ldi	r18, 0x3B	; 59
    1ea0:	3a ea       	ldi	r19, 0xAA	; 170
    1ea2:	48 eb       	ldi	r20, 0xB8	; 184
    1ea4:	5f e7       	ldi	r21, 0x7F	; 127
    1ea6:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <__mulsf3_pse>
    1eaa:	0f 92       	push	r0
    1eac:	0f 92       	push	r0
    1eae:	0f 92       	push	r0
    1eb0:	4d b7       	in	r20, 0x3d	; 61
    1eb2:	5e b7       	in	r21, 0x3e	; 62
    1eb4:	0f 92       	push	r0
    1eb6:	0e 94 32 10 	call	0x2064	; 0x2064 <modf>
    1eba:	e8 e6       	ldi	r30, 0x68	; 104
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__fp_powser>
    1ec2:	4f 91       	pop	r20
    1ec4:	5f 91       	pop	r21
    1ec6:	ef 91       	pop	r30
    1ec8:	ff 91       	pop	r31
    1eca:	e5 95       	asr	r30
    1ecc:	ee 1f       	adc	r30, r30
    1ece:	ff 1f       	adc	r31, r31
    1ed0:	49 f0       	breq	.+18     	; 0x1ee4 <exp+0x56>
    1ed2:	fe 57       	subi	r31, 0x7E	; 126
    1ed4:	e0 68       	ori	r30, 0x80	; 128
    1ed6:	44 27       	eor	r20, r20
    1ed8:	ee 0f       	add	r30, r30
    1eda:	44 1f       	adc	r20, r20
    1edc:	fa 95       	dec	r31
    1ede:	e1 f7       	brne	.-8      	; 0x1ed8 <exp+0x4a>
    1ee0:	41 95       	neg	r20
    1ee2:	55 0b       	sbc	r21, r21
    1ee4:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <ldexp>
    1ee8:	0f 90       	pop	r0
    1eea:	07 fe       	sbrs	r0, 7
    1eec:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <inverse>
    1ef0:	08 95       	ret

00001ef2 <__fp_powser>:
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	1f 93       	push	r17
    1ef8:	0f 93       	push	r16
    1efa:	ff 92       	push	r15
    1efc:	ef 92       	push	r14
    1efe:	df 92       	push	r13
    1f00:	7b 01       	movw	r14, r22
    1f02:	8c 01       	movw	r16, r24
    1f04:	68 94       	set
    1f06:	06 c0       	rjmp	.+12     	; 0x1f14 <__fp_powser+0x22>
    1f08:	da 2e       	mov	r13, r26
    1f0a:	ef 01       	movw	r28, r30
    1f0c:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__mulsf3x>
    1f10:	fe 01       	movw	r30, r28
    1f12:	e8 94       	clt
    1f14:	a5 91       	lpm	r26, Z+
    1f16:	25 91       	lpm	r18, Z+
    1f18:	35 91       	lpm	r19, Z+
    1f1a:	45 91       	lpm	r20, Z+
    1f1c:	55 91       	lpm	r21, Z+
    1f1e:	a6 f3       	brts	.-24     	; 0x1f08 <__fp_powser+0x16>
    1f20:	ef 01       	movw	r28, r30
    1f22:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__addsf3x>
    1f26:	fe 01       	movw	r30, r28
    1f28:	97 01       	movw	r18, r14
    1f2a:	a8 01       	movw	r20, r16
    1f2c:	da 94       	dec	r13
    1f2e:	69 f7       	brne	.-38     	; 0x1f0a <__fp_powser+0x18>
    1f30:	df 90       	pop	r13
    1f32:	ef 90       	pop	r14
    1f34:	ff 90       	pop	r15
    1f36:	0f 91       	pop	r16
    1f38:	1f 91       	pop	r17
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	08 95       	ret

00001f40 <inverse>:
    1f40:	9b 01       	movw	r18, r22
    1f42:	ac 01       	movw	r20, r24
    1f44:	60 e0       	ldi	r22, 0x00	; 0
    1f46:	70 e0       	ldi	r23, 0x00	; 0
    1f48:	80 e8       	ldi	r24, 0x80	; 128
    1f4a:	9f e3       	ldi	r25, 0x3F	; 63
    1f4c:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__divsf3>
    1f50:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <__fp_inf>
    1f54:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__fp_mpack>

00001f58 <ldexp>:
    1f58:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__fp_splitA>
    1f5c:	d8 f3       	brcs	.-10     	; 0x1f54 <inverse+0x14>
    1f5e:	99 23       	and	r25, r25
    1f60:	c9 f3       	breq	.-14     	; 0x1f54 <inverse+0x14>
    1f62:	94 0f       	add	r25, r20
    1f64:	51 1d       	adc	r21, r1
    1f66:	a3 f3       	brvs	.-24     	; 0x1f50 <inverse+0x10>
    1f68:	91 50       	subi	r25, 0x01	; 1
    1f6a:	50 40       	sbci	r21, 0x00	; 0
    1f6c:	94 f0       	brlt	.+36     	; 0x1f92 <ldexp+0x3a>
    1f6e:	59 f0       	breq	.+22     	; 0x1f86 <ldexp+0x2e>
    1f70:	88 23       	and	r24, r24
    1f72:	32 f0       	brmi	.+12     	; 0x1f80 <ldexp+0x28>
    1f74:	66 0f       	add	r22, r22
    1f76:	77 1f       	adc	r23, r23
    1f78:	88 1f       	adc	r24, r24
    1f7a:	91 50       	subi	r25, 0x01	; 1
    1f7c:	50 40       	sbci	r21, 0x00	; 0
    1f7e:	c1 f7       	brne	.-16     	; 0x1f70 <ldexp+0x18>
    1f80:	9e 3f       	cpi	r25, 0xFE	; 254
    1f82:	51 05       	cpc	r21, r1
    1f84:	2c f7       	brge	.-54     	; 0x1f50 <inverse+0x10>
    1f86:	88 0f       	add	r24, r24
    1f88:	91 1d       	adc	r25, r1
    1f8a:	96 95       	lsr	r25
    1f8c:	87 95       	ror	r24
    1f8e:	97 f9       	bld	r25, 7
    1f90:	08 95       	ret
    1f92:	5f 3f       	cpi	r21, 0xFF	; 255
    1f94:	ac f0       	brlt	.+42     	; 0x1fc0 <ldexp+0x68>
    1f96:	98 3e       	cpi	r25, 0xE8	; 232
    1f98:	9c f0       	brlt	.+38     	; 0x1fc0 <ldexp+0x68>
    1f9a:	bb 27       	eor	r27, r27
    1f9c:	86 95       	lsr	r24
    1f9e:	77 95       	ror	r23
    1fa0:	67 95       	ror	r22
    1fa2:	b7 95       	ror	r27
    1fa4:	08 f4       	brcc	.+2      	; 0x1fa8 <ldexp+0x50>
    1fa6:	b1 60       	ori	r27, 0x01	; 1
    1fa8:	93 95       	inc	r25
    1faa:	c1 f7       	brne	.-16     	; 0x1f9c <ldexp+0x44>
    1fac:	bb 0f       	add	r27, r27
    1fae:	58 f7       	brcc	.-42     	; 0x1f86 <ldexp+0x2e>
    1fb0:	11 f4       	brne	.+4      	; 0x1fb6 <ldexp+0x5e>
    1fb2:	60 ff       	sbrs	r22, 0
    1fb4:	e8 cf       	rjmp	.-48     	; 0x1f86 <ldexp+0x2e>
    1fb6:	6f 5f       	subi	r22, 0xFF	; 255
    1fb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fba:	8f 4f       	sbci	r24, 0xFF	; 255
    1fbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fbe:	e3 cf       	rjmp	.-58     	; 0x1f86 <ldexp+0x2e>
    1fc0:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__fp_szero>
    1fc4:	16 f0       	brts	.+4      	; 0x1fca <ldexp+0x72>
    1fc6:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__fp_mpack>
    1fca:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__fp_nan>
    1fce:	68 94       	set
    1fd0:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <__fp_inf>

00001fd4 <log>:
    1fd4:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__fp_splitA>
    1fd8:	a8 f3       	brcs	.-22     	; 0x1fc4 <ldexp+0x6c>
    1fda:	99 23       	and	r25, r25
    1fdc:	c1 f3       	breq	.-16     	; 0x1fce <ldexp+0x76>
    1fde:	ae f3       	brts	.-22     	; 0x1fca <ldexp+0x72>
    1fe0:	df 93       	push	r29
    1fe2:	cf 93       	push	r28
    1fe4:	1f 93       	push	r17
    1fe6:	0f 93       	push	r16
    1fe8:	ff 92       	push	r15
    1fea:	c9 2f       	mov	r28, r25
    1fec:	dd 27       	eor	r29, r29
    1fee:	88 23       	and	r24, r24
    1ff0:	2a f0       	brmi	.+10     	; 0x1ffc <log+0x28>
    1ff2:	21 97       	sbiw	r28, 0x01	; 1
    1ff4:	66 0f       	add	r22, r22
    1ff6:	77 1f       	adc	r23, r23
    1ff8:	88 1f       	adc	r24, r24
    1ffa:	da f7       	brpl	.-10     	; 0x1ff2 <log+0x1e>
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e8       	ldi	r20, 0x80	; 128
    2002:	5f eb       	ldi	r21, 0xBF	; 191
    2004:	9f e3       	ldi	r25, 0x3F	; 63
    2006:	88 39       	cpi	r24, 0x98	; 152
    2008:	20 f0       	brcs	.+8      	; 0x2012 <log+0x3e>
    200a:	80 3e       	cpi	r24, 0xE0	; 224
    200c:	38 f0       	brcs	.+14     	; 0x201c <log+0x48>
    200e:	21 96       	adiw	r28, 0x01	; 1
    2010:	8f 77       	andi	r24, 0x7F	; 127
    2012:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__addsf3>
    2016:	e0 e9       	ldi	r30, 0x90	; 144
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	04 c0       	rjmp	.+8      	; 0x2024 <log+0x50>
    201c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__addsf3>
    2020:	ed eb       	ldi	r30, 0xBD	; 189
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__fp_powser>
    2028:	8b 01       	movw	r16, r22
    202a:	be 01       	movw	r22, r28
    202c:	ec 01       	movw	r28, r24
    202e:	fb 2e       	mov	r15, r27
    2030:	6f 57       	subi	r22, 0x7F	; 127
    2032:	71 09       	sbc	r23, r1
    2034:	75 95       	asr	r23
    2036:	77 1f       	adc	r23, r23
    2038:	88 0b       	sbc	r24, r24
    203a:	99 0b       	sbc	r25, r25
    203c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__floatsisf>
    2040:	28 e1       	ldi	r18, 0x18	; 24
    2042:	32 e7       	ldi	r19, 0x72	; 114
    2044:	41 e3       	ldi	r20, 0x31	; 49
    2046:	5f e3       	ldi	r21, 0x3F	; 63
    2048:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__mulsf3x>
    204c:	af 2d       	mov	r26, r15
    204e:	98 01       	movw	r18, r16
    2050:	ae 01       	movw	r20, r28
    2052:	ff 90       	pop	r15
    2054:	0f 91       	pop	r16
    2056:	1f 91       	pop	r17
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__addsf3x>
    2060:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__fp_round>

00002064 <modf>:
    2064:	fa 01       	movw	r30, r20
    2066:	dc 01       	movw	r26, r24
    2068:	aa 0f       	add	r26, r26
    206a:	bb 1f       	adc	r27, r27
    206c:	9b 01       	movw	r18, r22
    206e:	ac 01       	movw	r20, r24
    2070:	bf 57       	subi	r27, 0x7F	; 127
    2072:	28 f4       	brcc	.+10     	; 0x207e <modf+0x1a>
    2074:	22 27       	eor	r18, r18
    2076:	33 27       	eor	r19, r19
    2078:	44 27       	eor	r20, r20
    207a:	50 78       	andi	r21, 0x80	; 128
    207c:	20 c0       	rjmp	.+64     	; 0x20be <modf+0x5a>
    207e:	b7 51       	subi	r27, 0x17	; 23
    2080:	90 f4       	brcc	.+36     	; 0x20a6 <modf+0x42>
    2082:	ab 2f       	mov	r26, r27
    2084:	00 24       	eor	r0, r0
    2086:	46 95       	lsr	r20
    2088:	37 95       	ror	r19
    208a:	27 95       	ror	r18
    208c:	01 1c       	adc	r0, r1
    208e:	a3 95       	inc	r26
    2090:	d2 f3       	brmi	.-12     	; 0x2086 <modf+0x22>
    2092:	00 20       	and	r0, r0
    2094:	71 f0       	breq	.+28     	; 0x20b2 <modf+0x4e>
    2096:	22 0f       	add	r18, r18
    2098:	33 1f       	adc	r19, r19
    209a:	44 1f       	adc	r20, r20
    209c:	b3 95       	inc	r27
    209e:	da f3       	brmi	.-10     	; 0x2096 <modf+0x32>
    20a0:	0e d0       	rcall	.+28     	; 0x20be <modf+0x5a>
    20a2:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <__subsf3>
    20a6:	61 30       	cpi	r22, 0x01	; 1
    20a8:	71 05       	cpc	r23, r1
    20aa:	a0 e8       	ldi	r26, 0x80	; 128
    20ac:	8a 07       	cpc	r24, r26
    20ae:	b9 46       	sbci	r27, 0x69	; 105
    20b0:	30 f4       	brcc	.+12     	; 0x20be <modf+0x5a>
    20b2:	9b 01       	movw	r18, r22
    20b4:	ac 01       	movw	r20, r24
    20b6:	66 27       	eor	r22, r22
    20b8:	77 27       	eor	r23, r23
    20ba:	88 27       	eor	r24, r24
    20bc:	90 78       	andi	r25, 0x80	; 128
    20be:	30 96       	adiw	r30, 0x00	; 0
    20c0:	21 f0       	breq	.+8      	; 0x20ca <modf+0x66>
    20c2:	20 83       	st	Z, r18
    20c4:	31 83       	std	Z+1, r19	; 0x01
    20c6:	42 83       	std	Z+2, r20	; 0x02
    20c8:	53 83       	std	Z+3, r21	; 0x03
    20ca:	08 95       	ret

000020cc <__fp_mpack>:
    20cc:	9f 3f       	cpi	r25, 0xFF	; 255
    20ce:	31 f0       	breq	.+12     	; 0x20dc <__fp_mpack_finite+0xc>

000020d0 <__fp_mpack_finite>:
    20d0:	91 50       	subi	r25, 0x01	; 1
    20d2:	20 f4       	brcc	.+8      	; 0x20dc <__fp_mpack_finite+0xc>
    20d4:	87 95       	ror	r24
    20d6:	77 95       	ror	r23
    20d8:	67 95       	ror	r22
    20da:	b7 95       	ror	r27
    20dc:	88 0f       	add	r24, r24
    20de:	91 1d       	adc	r25, r1
    20e0:	96 95       	lsr	r25
    20e2:	87 95       	ror	r24
    20e4:	97 f9       	bld	r25, 7
    20e6:	08 95       	ret

000020e8 <__divmodsi4>:
    20e8:	05 2e       	mov	r0, r21
    20ea:	97 fb       	bst	r25, 7
    20ec:	1e f4       	brtc	.+6      	; 0x20f4 <__divmodsi4+0xc>
    20ee:	00 94       	com	r0
    20f0:	0e 94 8b 10 	call	0x2116	; 0x2116 <__negsi2>
    20f4:	57 fd       	sbrc	r21, 7
    20f6:	07 d0       	rcall	.+14     	; 0x2106 <__divmodsi4_neg2>
    20f8:	0e 94 a2 10 	call	0x2144	; 0x2144 <__udivmodsi4>
    20fc:	07 fc       	sbrc	r0, 7
    20fe:	03 d0       	rcall	.+6      	; 0x2106 <__divmodsi4_neg2>
    2100:	4e f4       	brtc	.+18     	; 0x2114 <__divmodsi4_exit>
    2102:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__negsi2>

00002106 <__divmodsi4_neg2>:
    2106:	50 95       	com	r21
    2108:	40 95       	com	r20
    210a:	30 95       	com	r19
    210c:	21 95       	neg	r18
    210e:	3f 4f       	sbci	r19, 0xFF	; 255
    2110:	4f 4f       	sbci	r20, 0xFF	; 255
    2112:	5f 4f       	sbci	r21, 0xFF	; 255

00002114 <__divmodsi4_exit>:
    2114:	08 95       	ret

00002116 <__negsi2>:
    2116:	90 95       	com	r25
    2118:	80 95       	com	r24
    211a:	70 95       	com	r23
    211c:	61 95       	neg	r22
    211e:	7f 4f       	sbci	r23, 0xFF	; 255
    2120:	8f 4f       	sbci	r24, 0xFF	; 255
    2122:	9f 4f       	sbci	r25, 0xFF	; 255
    2124:	08 95       	ret

00002126 <__umulhisi3>:
    2126:	a2 9f       	mul	r26, r18
    2128:	b0 01       	movw	r22, r0
    212a:	b3 9f       	mul	r27, r19
    212c:	c0 01       	movw	r24, r0
    212e:	a3 9f       	mul	r26, r19
    2130:	70 0d       	add	r23, r0
    2132:	81 1d       	adc	r24, r1
    2134:	11 24       	eor	r1, r1
    2136:	91 1d       	adc	r25, r1
    2138:	b2 9f       	mul	r27, r18
    213a:	70 0d       	add	r23, r0
    213c:	81 1d       	adc	r24, r1
    213e:	11 24       	eor	r1, r1
    2140:	91 1d       	adc	r25, r1
    2142:	08 95       	ret

00002144 <__udivmodsi4>:
    2144:	a1 e2       	ldi	r26, 0x21	; 33
    2146:	1a 2e       	mov	r1, r26
    2148:	aa 1b       	sub	r26, r26
    214a:	bb 1b       	sub	r27, r27
    214c:	fd 01       	movw	r30, r26
    214e:	0d c0       	rjmp	.+26     	; 0x216a <__udivmodsi4_ep>

00002150 <__udivmodsi4_loop>:
    2150:	aa 1f       	adc	r26, r26
    2152:	bb 1f       	adc	r27, r27
    2154:	ee 1f       	adc	r30, r30
    2156:	ff 1f       	adc	r31, r31
    2158:	a2 17       	cp	r26, r18
    215a:	b3 07       	cpc	r27, r19
    215c:	e4 07       	cpc	r30, r20
    215e:	f5 07       	cpc	r31, r21
    2160:	20 f0       	brcs	.+8      	; 0x216a <__udivmodsi4_ep>
    2162:	a2 1b       	sub	r26, r18
    2164:	b3 0b       	sbc	r27, r19
    2166:	e4 0b       	sbc	r30, r20
    2168:	f5 0b       	sbc	r31, r21

0000216a <__udivmodsi4_ep>:
    216a:	66 1f       	adc	r22, r22
    216c:	77 1f       	adc	r23, r23
    216e:	88 1f       	adc	r24, r24
    2170:	99 1f       	adc	r25, r25
    2172:	1a 94       	dec	r1
    2174:	69 f7       	brne	.-38     	; 0x2150 <__udivmodsi4_loop>
    2176:	60 95       	com	r22
    2178:	70 95       	com	r23
    217a:	80 95       	com	r24
    217c:	90 95       	com	r25
    217e:	9b 01       	movw	r18, r22
    2180:	ac 01       	movw	r20, r24
    2182:	bd 01       	movw	r22, r26
    2184:	cf 01       	movw	r24, r30
    2186:	08 95       	ret

00002188 <dtostrf>:
    2188:	ef 92       	push	r14
    218a:	0f 93       	push	r16
    218c:	1f 93       	push	r17
    218e:	cf 93       	push	r28
    2190:	df 93       	push	r29
    2192:	e8 01       	movw	r28, r16
    2194:	47 fd       	sbrc	r20, 7
    2196:	02 c0       	rjmp	.+4      	; 0x219c <dtostrf+0x14>
    2198:	34 e0       	ldi	r19, 0x04	; 4
    219a:	01 c0       	rjmp	.+2      	; 0x219e <dtostrf+0x16>
    219c:	34 e1       	ldi	r19, 0x14	; 20
    219e:	04 2e       	mov	r0, r20
    21a0:	00 0c       	add	r0, r0
    21a2:	55 0b       	sbc	r21, r21
    21a4:	57 ff       	sbrs	r21, 7
    21a6:	03 c0       	rjmp	.+6      	; 0x21ae <dtostrf+0x26>
    21a8:	51 95       	neg	r21
    21aa:	41 95       	neg	r20
    21ac:	51 09       	sbc	r21, r1
    21ae:	e3 2e       	mov	r14, r19
    21b0:	02 2f       	mov	r16, r18
    21b2:	24 2f       	mov	r18, r20
    21b4:	ae 01       	movw	r20, r28
    21b6:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <dtoa_prf>
    21ba:	ce 01       	movw	r24, r28
    21bc:	df 91       	pop	r29
    21be:	cf 91       	pop	r28
    21c0:	1f 91       	pop	r17
    21c2:	0f 91       	pop	r16
    21c4:	ef 90       	pop	r14
    21c6:	08 95       	ret

000021c8 <malloc>:
    21c8:	0f 93       	push	r16
    21ca:	1f 93       	push	r17
    21cc:	cf 93       	push	r28
    21ce:	df 93       	push	r29
    21d0:	82 30       	cpi	r24, 0x02	; 2
    21d2:	91 05       	cpc	r25, r1
    21d4:	10 f4       	brcc	.+4      	; 0x21da <malloc+0x12>
    21d6:	82 e0       	ldi	r24, 0x02	; 2
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <__flp>
    21de:	f0 91 85 02 	lds	r31, 0x0285	; 0x800285 <__flp+0x1>
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	a0 e0       	ldi	r26, 0x00	; 0
    21e8:	b0 e0       	ldi	r27, 0x00	; 0
    21ea:	30 97       	sbiw	r30, 0x00	; 0
    21ec:	19 f1       	breq	.+70     	; 0x2234 <malloc+0x6c>
    21ee:	40 81       	ld	r20, Z
    21f0:	51 81       	ldd	r21, Z+1	; 0x01
    21f2:	02 81       	ldd	r16, Z+2	; 0x02
    21f4:	13 81       	ldd	r17, Z+3	; 0x03
    21f6:	48 17       	cp	r20, r24
    21f8:	59 07       	cpc	r21, r25
    21fa:	c8 f0       	brcs	.+50     	; 0x222e <malloc+0x66>
    21fc:	84 17       	cp	r24, r20
    21fe:	95 07       	cpc	r25, r21
    2200:	69 f4       	brne	.+26     	; 0x221c <malloc+0x54>
    2202:	10 97       	sbiw	r26, 0x00	; 0
    2204:	31 f0       	breq	.+12     	; 0x2212 <malloc+0x4a>
    2206:	12 96       	adiw	r26, 0x02	; 2
    2208:	0c 93       	st	X, r16
    220a:	12 97       	sbiw	r26, 0x02	; 2
    220c:	13 96       	adiw	r26, 0x03	; 3
    220e:	1c 93       	st	X, r17
    2210:	27 c0       	rjmp	.+78     	; 0x2260 <malloc+0x98>
    2212:	00 93 84 02 	sts	0x0284, r16	; 0x800284 <__flp>
    2216:	10 93 85 02 	sts	0x0285, r17	; 0x800285 <__flp+0x1>
    221a:	22 c0       	rjmp	.+68     	; 0x2260 <malloc+0x98>
    221c:	21 15       	cp	r18, r1
    221e:	31 05       	cpc	r19, r1
    2220:	19 f0       	breq	.+6      	; 0x2228 <malloc+0x60>
    2222:	42 17       	cp	r20, r18
    2224:	53 07       	cpc	r21, r19
    2226:	18 f4       	brcc	.+6      	; 0x222e <malloc+0x66>
    2228:	9a 01       	movw	r18, r20
    222a:	bd 01       	movw	r22, r26
    222c:	ef 01       	movw	r28, r30
    222e:	df 01       	movw	r26, r30
    2230:	f8 01       	movw	r30, r16
    2232:	db cf       	rjmp	.-74     	; 0x21ea <malloc+0x22>
    2234:	21 15       	cp	r18, r1
    2236:	31 05       	cpc	r19, r1
    2238:	f9 f0       	breq	.+62     	; 0x2278 <malloc+0xb0>
    223a:	28 1b       	sub	r18, r24
    223c:	39 0b       	sbc	r19, r25
    223e:	24 30       	cpi	r18, 0x04	; 4
    2240:	31 05       	cpc	r19, r1
    2242:	80 f4       	brcc	.+32     	; 0x2264 <malloc+0x9c>
    2244:	8a 81       	ldd	r24, Y+2	; 0x02
    2246:	9b 81       	ldd	r25, Y+3	; 0x03
    2248:	61 15       	cp	r22, r1
    224a:	71 05       	cpc	r23, r1
    224c:	21 f0       	breq	.+8      	; 0x2256 <malloc+0x8e>
    224e:	fb 01       	movw	r30, r22
    2250:	93 83       	std	Z+3, r25	; 0x03
    2252:	82 83       	std	Z+2, r24	; 0x02
    2254:	04 c0       	rjmp	.+8      	; 0x225e <malloc+0x96>
    2256:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <__flp+0x1>
    225a:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <__flp>
    225e:	fe 01       	movw	r30, r28
    2260:	32 96       	adiw	r30, 0x02	; 2
    2262:	44 c0       	rjmp	.+136    	; 0x22ec <malloc+0x124>
    2264:	fe 01       	movw	r30, r28
    2266:	e2 0f       	add	r30, r18
    2268:	f3 1f       	adc	r31, r19
    226a:	81 93       	st	Z+, r24
    226c:	91 93       	st	Z+, r25
    226e:	22 50       	subi	r18, 0x02	; 2
    2270:	31 09       	sbc	r19, r1
    2272:	39 83       	std	Y+1, r19	; 0x01
    2274:	28 83       	st	Y, r18
    2276:	3a c0       	rjmp	.+116    	; 0x22ec <malloc+0x124>
    2278:	20 91 82 02 	lds	r18, 0x0282	; 0x800282 <__brkval>
    227c:	30 91 83 02 	lds	r19, 0x0283	; 0x800283 <__brkval+0x1>
    2280:	23 2b       	or	r18, r19
    2282:	41 f4       	brne	.+16     	; 0x2294 <malloc+0xcc>
    2284:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2288:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    228c:	30 93 83 02 	sts	0x0283, r19	; 0x800283 <__brkval+0x1>
    2290:	20 93 82 02 	sts	0x0282, r18	; 0x800282 <__brkval>
    2294:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2298:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    229c:	21 15       	cp	r18, r1
    229e:	31 05       	cpc	r19, r1
    22a0:	41 f4       	brne	.+16     	; 0x22b2 <malloc+0xea>
    22a2:	2d b7       	in	r18, 0x3d	; 61
    22a4:	3e b7       	in	r19, 0x3e	; 62
    22a6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    22aa:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    22ae:	24 1b       	sub	r18, r20
    22b0:	35 0b       	sbc	r19, r21
    22b2:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <__brkval>
    22b6:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <__brkval+0x1>
    22ba:	e2 17       	cp	r30, r18
    22bc:	f3 07       	cpc	r31, r19
    22be:	a0 f4       	brcc	.+40     	; 0x22e8 <malloc+0x120>
    22c0:	2e 1b       	sub	r18, r30
    22c2:	3f 0b       	sbc	r19, r31
    22c4:	28 17       	cp	r18, r24
    22c6:	39 07       	cpc	r19, r25
    22c8:	78 f0       	brcs	.+30     	; 0x22e8 <malloc+0x120>
    22ca:	ac 01       	movw	r20, r24
    22cc:	4e 5f       	subi	r20, 0xFE	; 254
    22ce:	5f 4f       	sbci	r21, 0xFF	; 255
    22d0:	24 17       	cp	r18, r20
    22d2:	35 07       	cpc	r19, r21
    22d4:	48 f0       	brcs	.+18     	; 0x22e8 <malloc+0x120>
    22d6:	4e 0f       	add	r20, r30
    22d8:	5f 1f       	adc	r21, r31
    22da:	50 93 83 02 	sts	0x0283, r21	; 0x800283 <__brkval+0x1>
    22de:	40 93 82 02 	sts	0x0282, r20	; 0x800282 <__brkval>
    22e2:	81 93       	st	Z+, r24
    22e4:	91 93       	st	Z+, r25
    22e6:	02 c0       	rjmp	.+4      	; 0x22ec <malloc+0x124>
    22e8:	e0 e0       	ldi	r30, 0x00	; 0
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	cf 01       	movw	r24, r30
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	1f 91       	pop	r17
    22f4:	0f 91       	pop	r16
    22f6:	08 95       	ret

000022f8 <free>:
    22f8:	cf 93       	push	r28
    22fa:	df 93       	push	r29
    22fc:	00 97       	sbiw	r24, 0x00	; 0
    22fe:	09 f4       	brne	.+2      	; 0x2302 <free+0xa>
    2300:	81 c0       	rjmp	.+258    	; 0x2404 <free+0x10c>
    2302:	fc 01       	movw	r30, r24
    2304:	32 97       	sbiw	r30, 0x02	; 2
    2306:	13 82       	std	Z+3, r1	; 0x03
    2308:	12 82       	std	Z+2, r1	; 0x02
    230a:	a0 91 84 02 	lds	r26, 0x0284	; 0x800284 <__flp>
    230e:	b0 91 85 02 	lds	r27, 0x0285	; 0x800285 <__flp+0x1>
    2312:	10 97       	sbiw	r26, 0x00	; 0
    2314:	81 f4       	brne	.+32     	; 0x2336 <free+0x3e>
    2316:	20 81       	ld	r18, Z
    2318:	31 81       	ldd	r19, Z+1	; 0x01
    231a:	82 0f       	add	r24, r18
    231c:	93 1f       	adc	r25, r19
    231e:	20 91 82 02 	lds	r18, 0x0282	; 0x800282 <__brkval>
    2322:	30 91 83 02 	lds	r19, 0x0283	; 0x800283 <__brkval+0x1>
    2326:	28 17       	cp	r18, r24
    2328:	39 07       	cpc	r19, r25
    232a:	51 f5       	brne	.+84     	; 0x2380 <free+0x88>
    232c:	f0 93 83 02 	sts	0x0283, r31	; 0x800283 <__brkval+0x1>
    2330:	e0 93 82 02 	sts	0x0282, r30	; 0x800282 <__brkval>
    2334:	67 c0       	rjmp	.+206    	; 0x2404 <free+0x10c>
    2336:	ed 01       	movw	r28, r26
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	ce 17       	cp	r28, r30
    233e:	df 07       	cpc	r29, r31
    2340:	40 f4       	brcc	.+16     	; 0x2352 <free+0x5a>
    2342:	4a 81       	ldd	r20, Y+2	; 0x02
    2344:	5b 81       	ldd	r21, Y+3	; 0x03
    2346:	9e 01       	movw	r18, r28
    2348:	41 15       	cp	r20, r1
    234a:	51 05       	cpc	r21, r1
    234c:	f1 f0       	breq	.+60     	; 0x238a <free+0x92>
    234e:	ea 01       	movw	r28, r20
    2350:	f5 cf       	rjmp	.-22     	; 0x233c <free+0x44>
    2352:	d3 83       	std	Z+3, r29	; 0x03
    2354:	c2 83       	std	Z+2, r28	; 0x02
    2356:	40 81       	ld	r20, Z
    2358:	51 81       	ldd	r21, Z+1	; 0x01
    235a:	84 0f       	add	r24, r20
    235c:	95 1f       	adc	r25, r21
    235e:	c8 17       	cp	r28, r24
    2360:	d9 07       	cpc	r29, r25
    2362:	59 f4       	brne	.+22     	; 0x237a <free+0x82>
    2364:	88 81       	ld	r24, Y
    2366:	99 81       	ldd	r25, Y+1	; 0x01
    2368:	84 0f       	add	r24, r20
    236a:	95 1f       	adc	r25, r21
    236c:	02 96       	adiw	r24, 0x02	; 2
    236e:	91 83       	std	Z+1, r25	; 0x01
    2370:	80 83       	st	Z, r24
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	9b 81       	ldd	r25, Y+3	; 0x03
    2376:	93 83       	std	Z+3, r25	; 0x03
    2378:	82 83       	std	Z+2, r24	; 0x02
    237a:	21 15       	cp	r18, r1
    237c:	31 05       	cpc	r19, r1
    237e:	29 f4       	brne	.+10     	; 0x238a <free+0x92>
    2380:	f0 93 85 02 	sts	0x0285, r31	; 0x800285 <__flp+0x1>
    2384:	e0 93 84 02 	sts	0x0284, r30	; 0x800284 <__flp>
    2388:	3d c0       	rjmp	.+122    	; 0x2404 <free+0x10c>
    238a:	e9 01       	movw	r28, r18
    238c:	fb 83       	std	Y+3, r31	; 0x03
    238e:	ea 83       	std	Y+2, r30	; 0x02
    2390:	49 91       	ld	r20, Y+
    2392:	59 91       	ld	r21, Y+
    2394:	c4 0f       	add	r28, r20
    2396:	d5 1f       	adc	r29, r21
    2398:	ec 17       	cp	r30, r28
    239a:	fd 07       	cpc	r31, r29
    239c:	61 f4       	brne	.+24     	; 0x23b6 <free+0xbe>
    239e:	80 81       	ld	r24, Z
    23a0:	91 81       	ldd	r25, Z+1	; 0x01
    23a2:	84 0f       	add	r24, r20
    23a4:	95 1f       	adc	r25, r21
    23a6:	02 96       	adiw	r24, 0x02	; 2
    23a8:	e9 01       	movw	r28, r18
    23aa:	99 83       	std	Y+1, r25	; 0x01
    23ac:	88 83       	st	Y, r24
    23ae:	82 81       	ldd	r24, Z+2	; 0x02
    23b0:	93 81       	ldd	r25, Z+3	; 0x03
    23b2:	9b 83       	std	Y+3, r25	; 0x03
    23b4:	8a 83       	std	Y+2, r24	; 0x02
    23b6:	e0 e0       	ldi	r30, 0x00	; 0
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	12 96       	adiw	r26, 0x02	; 2
    23bc:	8d 91       	ld	r24, X+
    23be:	9c 91       	ld	r25, X
    23c0:	13 97       	sbiw	r26, 0x03	; 3
    23c2:	00 97       	sbiw	r24, 0x00	; 0
    23c4:	19 f0       	breq	.+6      	; 0x23cc <free+0xd4>
    23c6:	fd 01       	movw	r30, r26
    23c8:	dc 01       	movw	r26, r24
    23ca:	f7 cf       	rjmp	.-18     	; 0x23ba <free+0xc2>
    23cc:	8d 91       	ld	r24, X+
    23ce:	9c 91       	ld	r25, X
    23d0:	11 97       	sbiw	r26, 0x01	; 1
    23d2:	9d 01       	movw	r18, r26
    23d4:	2e 5f       	subi	r18, 0xFE	; 254
    23d6:	3f 4f       	sbci	r19, 0xFF	; 255
    23d8:	82 0f       	add	r24, r18
    23da:	93 1f       	adc	r25, r19
    23dc:	20 91 82 02 	lds	r18, 0x0282	; 0x800282 <__brkval>
    23e0:	30 91 83 02 	lds	r19, 0x0283	; 0x800283 <__brkval+0x1>
    23e4:	28 17       	cp	r18, r24
    23e6:	39 07       	cpc	r19, r25
    23e8:	69 f4       	brne	.+26     	; 0x2404 <free+0x10c>
    23ea:	30 97       	sbiw	r30, 0x00	; 0
    23ec:	29 f4       	brne	.+10     	; 0x23f8 <free+0x100>
    23ee:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <__flp+0x1>
    23f2:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <__flp>
    23f6:	02 c0       	rjmp	.+4      	; 0x23fc <free+0x104>
    23f8:	13 82       	std	Z+3, r1	; 0x03
    23fa:	12 82       	std	Z+2, r1	; 0x02
    23fc:	b0 93 83 02 	sts	0x0283, r27	; 0x800283 <__brkval+0x1>
    2400:	a0 93 82 02 	sts	0x0282, r26	; 0x800282 <__brkval>
    2404:	df 91       	pop	r29
    2406:	cf 91       	pop	r28
    2408:	08 95       	ret

0000240a <realloc>:
    240a:	a0 e0       	ldi	r26, 0x00	; 0
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	eb e0       	ldi	r30, 0x0B	; 11
    2410:	f2 e1       	ldi	r31, 0x12	; 18
    2412:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__prologue_saves__+0x8>
    2416:	ec 01       	movw	r28, r24
    2418:	00 97       	sbiw	r24, 0x00	; 0
    241a:	21 f4       	brne	.+8      	; 0x2424 <realloc+0x1a>
    241c:	cb 01       	movw	r24, r22
    241e:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <malloc>
    2422:	b4 c0       	rjmp	.+360    	; 0x258c <realloc+0x182>
    2424:	fc 01       	movw	r30, r24
    2426:	e6 0f       	add	r30, r22
    2428:	f7 1f       	adc	r31, r23
    242a:	9c 01       	movw	r18, r24
    242c:	22 50       	subi	r18, 0x02	; 2
    242e:	31 09       	sbc	r19, r1
    2430:	e2 17       	cp	r30, r18
    2432:	f3 07       	cpc	r31, r19
    2434:	08 f4       	brcc	.+2      	; 0x2438 <realloc+0x2e>
    2436:	a8 c0       	rjmp	.+336    	; 0x2588 <realloc+0x17e>
    2438:	d9 01       	movw	r26, r18
    243a:	0d 91       	ld	r16, X+
    243c:	1c 91       	ld	r17, X
    243e:	11 97       	sbiw	r26, 0x01	; 1
    2440:	06 17       	cp	r16, r22
    2442:	17 07       	cpc	r17, r23
    2444:	b0 f0       	brcs	.+44     	; 0x2472 <realloc+0x68>
    2446:	05 30       	cpi	r16, 0x05	; 5
    2448:	11 05       	cpc	r17, r1
    244a:	08 f4       	brcc	.+2      	; 0x244e <realloc+0x44>
    244c:	9b c0       	rjmp	.+310    	; 0x2584 <realloc+0x17a>
    244e:	c8 01       	movw	r24, r16
    2450:	04 97       	sbiw	r24, 0x04	; 4
    2452:	86 17       	cp	r24, r22
    2454:	97 07       	cpc	r25, r23
    2456:	08 f4       	brcc	.+2      	; 0x245a <realloc+0x50>
    2458:	95 c0       	rjmp	.+298    	; 0x2584 <realloc+0x17a>
    245a:	02 50       	subi	r16, 0x02	; 2
    245c:	11 09       	sbc	r17, r1
    245e:	06 1b       	sub	r16, r22
    2460:	17 0b       	sbc	r17, r23
    2462:	01 93       	st	Z+, r16
    2464:	11 93       	st	Z+, r17
    2466:	6d 93       	st	X+, r22
    2468:	7c 93       	st	X, r23
    246a:	cf 01       	movw	r24, r30
    246c:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <free>
    2470:	89 c0       	rjmp	.+274    	; 0x2584 <realloc+0x17a>
    2472:	5b 01       	movw	r10, r22
    2474:	a0 1a       	sub	r10, r16
    2476:	b1 0a       	sbc	r11, r17
    2478:	4c 01       	movw	r8, r24
    247a:	80 0e       	add	r8, r16
    247c:	91 1e       	adc	r9, r17
    247e:	a0 91 84 02 	lds	r26, 0x0284	; 0x800284 <__flp>
    2482:	b0 91 85 02 	lds	r27, 0x0285	; 0x800285 <__flp+0x1>
    2486:	61 2c       	mov	r6, r1
    2488:	71 2c       	mov	r7, r1
    248a:	e1 2c       	mov	r14, r1
    248c:	f1 2c       	mov	r15, r1
    248e:	10 97       	sbiw	r26, 0x00	; 0
    2490:	09 f4       	brne	.+2      	; 0x2494 <realloc+0x8a>
    2492:	46 c0       	rjmp	.+140    	; 0x2520 <realloc+0x116>
    2494:	8d 91       	ld	r24, X+
    2496:	9c 91       	ld	r25, X
    2498:	11 97       	sbiw	r26, 0x01	; 1
    249a:	a8 15       	cp	r26, r8
    249c:	b9 05       	cpc	r27, r9
    249e:	b1 f5       	brne	.+108    	; 0x250c <realloc+0x102>
    24a0:	6c 01       	movw	r12, r24
    24a2:	42 e0       	ldi	r20, 0x02	; 2
    24a4:	c4 0e       	add	r12, r20
    24a6:	d1 1c       	adc	r13, r1
    24a8:	ca 14       	cp	r12, r10
    24aa:	db 04       	cpc	r13, r11
    24ac:	78 f1       	brcs	.+94     	; 0x250c <realloc+0x102>
    24ae:	4c 01       	movw	r8, r24
    24b0:	8a 18       	sub	r8, r10
    24b2:	9b 08       	sbc	r9, r11
    24b4:	64 01       	movw	r12, r8
    24b6:	42 e0       	ldi	r20, 0x02	; 2
    24b8:	c4 0e       	add	r12, r20
    24ba:	d1 1c       	adc	r13, r1
    24bc:	12 96       	adiw	r26, 0x02	; 2
    24be:	bc 90       	ld	r11, X
    24c0:	12 97       	sbiw	r26, 0x02	; 2
    24c2:	13 96       	adiw	r26, 0x03	; 3
    24c4:	ac 91       	ld	r26, X
    24c6:	b5 e0       	ldi	r27, 0x05	; 5
    24c8:	cb 16       	cp	r12, r27
    24ca:	d1 04       	cpc	r13, r1
    24cc:	40 f0       	brcs	.+16     	; 0x24de <realloc+0xd4>
    24ce:	b2 82       	std	Z+2, r11	; 0x02
    24d0:	a3 83       	std	Z+3, r26	; 0x03
    24d2:	91 82       	std	Z+1, r9	; 0x01
    24d4:	80 82       	st	Z, r8
    24d6:	d9 01       	movw	r26, r18
    24d8:	6d 93       	st	X+, r22
    24da:	7c 93       	st	X, r23
    24dc:	09 c0       	rjmp	.+18     	; 0x24f0 <realloc+0xe6>
    24de:	0e 5f       	subi	r16, 0xFE	; 254
    24e0:	1f 4f       	sbci	r17, 0xFF	; 255
    24e2:	80 0f       	add	r24, r16
    24e4:	91 1f       	adc	r25, r17
    24e6:	f9 01       	movw	r30, r18
    24e8:	91 83       	std	Z+1, r25	; 0x01
    24ea:	80 83       	st	Z, r24
    24ec:	eb 2d       	mov	r30, r11
    24ee:	fa 2f       	mov	r31, r26
    24f0:	e1 14       	cp	r14, r1
    24f2:	f1 04       	cpc	r15, r1
    24f4:	31 f0       	breq	.+12     	; 0x2502 <realloc+0xf8>
    24f6:	d7 01       	movw	r26, r14
    24f8:	13 96       	adiw	r26, 0x03	; 3
    24fa:	fc 93       	st	X, r31
    24fc:	ee 93       	st	-X, r30
    24fe:	12 97       	sbiw	r26, 0x02	; 2
    2500:	41 c0       	rjmp	.+130    	; 0x2584 <realloc+0x17a>
    2502:	f0 93 85 02 	sts	0x0285, r31	; 0x800285 <__flp+0x1>
    2506:	e0 93 84 02 	sts	0x0284, r30	; 0x800284 <__flp>
    250a:	3c c0       	rjmp	.+120    	; 0x2584 <realloc+0x17a>
    250c:	68 16       	cp	r6, r24
    250e:	79 06       	cpc	r7, r25
    2510:	08 f4       	brcc	.+2      	; 0x2514 <realloc+0x10a>
    2512:	3c 01       	movw	r6, r24
    2514:	7d 01       	movw	r14, r26
    2516:	12 96       	adiw	r26, 0x02	; 2
    2518:	0d 90       	ld	r0, X+
    251a:	bc 91       	ld	r27, X
    251c:	a0 2d       	mov	r26, r0
    251e:	b7 cf       	rjmp	.-146    	; 0x248e <realloc+0x84>
    2520:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__brkval>
    2524:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <__brkval+0x1>
    2528:	88 16       	cp	r8, r24
    252a:	99 06       	cpc	r9, r25
    252c:	e1 f4       	brne	.+56     	; 0x2566 <realloc+0x15c>
    252e:	66 16       	cp	r6, r22
    2530:	77 06       	cpc	r7, r23
    2532:	c8 f4       	brcc	.+50     	; 0x2566 <realloc+0x15c>
    2534:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2538:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    253c:	00 97       	sbiw	r24, 0x00	; 0
    253e:	41 f4       	brne	.+16     	; 0x2550 <realloc+0x146>
    2540:	8d b7       	in	r24, 0x3d	; 61
    2542:	9e b7       	in	r25, 0x3e	; 62
    2544:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2548:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    254c:	84 1b       	sub	r24, r20
    254e:	95 0b       	sbc	r25, r21
    2550:	e8 17       	cp	r30, r24
    2552:	f9 07       	cpc	r31, r25
    2554:	c8 f4       	brcc	.+50     	; 0x2588 <realloc+0x17e>
    2556:	f0 93 83 02 	sts	0x0283, r31	; 0x800283 <__brkval+0x1>
    255a:	e0 93 82 02 	sts	0x0282, r30	; 0x800282 <__brkval>
    255e:	f9 01       	movw	r30, r18
    2560:	71 83       	std	Z+1, r23	; 0x01
    2562:	60 83       	st	Z, r22
    2564:	0f c0       	rjmp	.+30     	; 0x2584 <realloc+0x17a>
    2566:	cb 01       	movw	r24, r22
    2568:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <malloc>
    256c:	7c 01       	movw	r14, r24
    256e:	00 97       	sbiw	r24, 0x00	; 0
    2570:	59 f0       	breq	.+22     	; 0x2588 <realloc+0x17e>
    2572:	a8 01       	movw	r20, r16
    2574:	be 01       	movw	r22, r28
    2576:	0e 94 cb 12 	call	0x2596	; 0x2596 <memcpy>
    257a:	ce 01       	movw	r24, r28
    257c:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <free>
    2580:	c7 01       	movw	r24, r14
    2582:	04 c0       	rjmp	.+8      	; 0x258c <realloc+0x182>
    2584:	ce 01       	movw	r24, r28
    2586:	02 c0       	rjmp	.+4      	; 0x258c <realloc+0x182>
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	ee e0       	ldi	r30, 0x0E	; 14
    2592:	0c 94 6a 18 	jmp	0x30d4	; 0x30d4 <__epilogue_restores__+0x8>

00002596 <memcpy>:
    2596:	fb 01       	movw	r30, r22
    2598:	dc 01       	movw	r26, r24
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <memcpy+0xa>
    259c:	01 90       	ld	r0, Z+
    259e:	0d 92       	st	X+, r0
    25a0:	41 50       	subi	r20, 0x01	; 1
    25a2:	50 40       	sbci	r21, 0x00	; 0
    25a4:	d8 f7       	brcc	.-10     	; 0x259c <memcpy+0x6>
    25a6:	08 95       	ret

000025a8 <__itoa_ncheck>:
    25a8:	bb 27       	eor	r27, r27
    25aa:	4a 30       	cpi	r20, 0x0A	; 10
    25ac:	31 f4       	brne	.+12     	; 0x25ba <__itoa_ncheck+0x12>
    25ae:	99 23       	and	r25, r25
    25b0:	22 f4       	brpl	.+8      	; 0x25ba <__itoa_ncheck+0x12>
    25b2:	bd e2       	ldi	r27, 0x2D	; 45
    25b4:	90 95       	com	r25
    25b6:	81 95       	neg	r24
    25b8:	9f 4f       	sbci	r25, 0xFF	; 255
    25ba:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__utoa_common>

000025be <__ltoa_ncheck>:
    25be:	bb 27       	eor	r27, r27
    25c0:	2a 30       	cpi	r18, 0x0A	; 10
    25c2:	51 f4       	brne	.+20     	; 0x25d8 <__ltoa_ncheck+0x1a>
    25c4:	99 23       	and	r25, r25
    25c6:	42 f4       	brpl	.+16     	; 0x25d8 <__ltoa_ncheck+0x1a>
    25c8:	bd e2       	ldi	r27, 0x2D	; 45
    25ca:	90 95       	com	r25
    25cc:	80 95       	com	r24
    25ce:	70 95       	com	r23
    25d0:	61 95       	neg	r22
    25d2:	7f 4f       	sbci	r23, 0xFF	; 255
    25d4:	8f 4f       	sbci	r24, 0xFF	; 255
    25d6:	9f 4f       	sbci	r25, 0xFF	; 255
    25d8:	0c 94 ef 12 	jmp	0x25de	; 0x25de <__ultoa_common>

000025dc <__ultoa_ncheck>:
    25dc:	bb 27       	eor	r27, r27

000025de <__ultoa_common>:
    25de:	fa 01       	movw	r30, r20
    25e0:	a6 2f       	mov	r26, r22
    25e2:	62 17       	cp	r22, r18
    25e4:	71 05       	cpc	r23, r1
    25e6:	81 05       	cpc	r24, r1
    25e8:	91 05       	cpc	r25, r1
    25ea:	33 0b       	sbc	r19, r19
    25ec:	30 fb       	bst	r19, 0
    25ee:	66 f0       	brts	.+24     	; 0x2608 <__ultoa_common+0x2a>
    25f0:	aa 27       	eor	r26, r26
    25f2:	66 0f       	add	r22, r22
    25f4:	77 1f       	adc	r23, r23
    25f6:	88 1f       	adc	r24, r24
    25f8:	99 1f       	adc	r25, r25
    25fa:	aa 1f       	adc	r26, r26
    25fc:	a2 17       	cp	r26, r18
    25fe:	10 f0       	brcs	.+4      	; 0x2604 <__ultoa_common+0x26>
    2600:	a2 1b       	sub	r26, r18
    2602:	63 95       	inc	r22
    2604:	38 50       	subi	r19, 0x08	; 8
    2606:	a9 f7       	brne	.-22     	; 0x25f2 <__ultoa_common+0x14>
    2608:	a0 5d       	subi	r26, 0xD0	; 208
    260a:	aa 33       	cpi	r26, 0x3A	; 58
    260c:	08 f0       	brcs	.+2      	; 0x2610 <__ultoa_common+0x32>
    260e:	a9 5d       	subi	r26, 0xD9	; 217
    2610:	a1 93       	st	Z+, r26
    2612:	36 f7       	brtc	.-52     	; 0x25e0 <__ultoa_common+0x2>
    2614:	b1 11       	cpse	r27, r1
    2616:	b1 93       	st	Z+, r27
    2618:	10 82       	st	Z, r1
    261a:	ca 01       	movw	r24, r20
    261c:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <strrev>

00002620 <__utoa_ncheck>:
    2620:	bb 27       	eor	r27, r27

00002622 <__utoa_common>:
    2622:	fb 01       	movw	r30, r22
    2624:	55 27       	eor	r21, r21
    2626:	aa 27       	eor	r26, r26
    2628:	88 0f       	add	r24, r24
    262a:	99 1f       	adc	r25, r25
    262c:	aa 1f       	adc	r26, r26
    262e:	a4 17       	cp	r26, r20
    2630:	10 f0       	brcs	.+4      	; 0x2636 <__utoa_common+0x14>
    2632:	a4 1b       	sub	r26, r20
    2634:	83 95       	inc	r24
    2636:	50 51       	subi	r21, 0x10	; 16
    2638:	b9 f7       	brne	.-18     	; 0x2628 <__utoa_common+0x6>
    263a:	a0 5d       	subi	r26, 0xD0	; 208
    263c:	aa 33       	cpi	r26, 0x3A	; 58
    263e:	08 f0       	brcs	.+2      	; 0x2642 <__utoa_common+0x20>
    2640:	a9 5d       	subi	r26, 0xD9	; 217
    2642:	a1 93       	st	Z+, r26
    2644:	00 97       	sbiw	r24, 0x00	; 0
    2646:	79 f7       	brne	.-34     	; 0x2626 <__utoa_common+0x4>
    2648:	b1 11       	cpse	r27, r1
    264a:	b1 93       	st	Z+, r27
    264c:	11 92       	st	Z+, r1
    264e:	cb 01       	movw	r24, r22
    2650:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <strrev>

00002654 <printf>:
    2654:	a0 e0       	ldi	r26, 0x00	; 0
    2656:	b0 e0       	ldi	r27, 0x00	; 0
    2658:	e0 e3       	ldi	r30, 0x30	; 48
    265a:	f3 e1       	ldi	r31, 0x13	; 19
    265c:	0c 94 5a 18 	jmp	0x30b4	; 0x30b4 <__prologue_saves__+0x20>
    2660:	ae 01       	movw	r20, r28
    2662:	4b 5f       	subi	r20, 0xFB	; 251
    2664:	5f 4f       	sbci	r21, 0xFF	; 255
    2666:	fa 01       	movw	r30, r20
    2668:	61 91       	ld	r22, Z+
    266a:	71 91       	ld	r23, Z+
    266c:	af 01       	movw	r20, r30
    266e:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <__iob+0x2>
    2672:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <__iob+0x3>
    2676:	0e 94 77 13 	call	0x26ee	; 0x26ee <vfprintf>
    267a:	e2 e0       	ldi	r30, 0x02	; 2
    267c:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <__epilogue_restores__+0x20>

00002680 <putchar>:
    2680:	60 91 88 02 	lds	r22, 0x0288	; 0x800288 <__iob+0x2>
    2684:	70 91 89 02 	lds	r23, 0x0289	; 0x800289 <__iob+0x3>
    2688:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <fputc>
    268c:	08 95       	ret

0000268e <puts>:
    268e:	0f 93       	push	r16
    2690:	1f 93       	push	r17
    2692:	cf 93       	push	r28
    2694:	df 93       	push	r29
    2696:	e0 91 88 02 	lds	r30, 0x0288	; 0x800288 <__iob+0x2>
    269a:	f0 91 89 02 	lds	r31, 0x0289	; 0x800289 <__iob+0x3>
    269e:	23 81       	ldd	r18, Z+3	; 0x03
    26a0:	21 ff       	sbrs	r18, 1
    26a2:	1b c0       	rjmp	.+54     	; 0x26da <puts+0x4c>
    26a4:	8c 01       	movw	r16, r24
    26a6:	d0 e0       	ldi	r29, 0x00	; 0
    26a8:	c0 e0       	ldi	r28, 0x00	; 0
    26aa:	f8 01       	movw	r30, r16
    26ac:	81 91       	ld	r24, Z+
    26ae:	8f 01       	movw	r16, r30
    26b0:	60 91 88 02 	lds	r22, 0x0288	; 0x800288 <__iob+0x2>
    26b4:	70 91 89 02 	lds	r23, 0x0289	; 0x800289 <__iob+0x3>
    26b8:	db 01       	movw	r26, r22
    26ba:	18 96       	adiw	r26, 0x08	; 8
    26bc:	ed 91       	ld	r30, X+
    26be:	fc 91       	ld	r31, X
    26c0:	19 97       	sbiw	r26, 0x09	; 9
    26c2:	88 23       	and	r24, r24
    26c4:	31 f0       	breq	.+12     	; 0x26d2 <puts+0x44>
    26c6:	09 95       	icall
    26c8:	89 2b       	or	r24, r25
    26ca:	79 f3       	breq	.-34     	; 0x26aa <puts+0x1c>
    26cc:	df ef       	ldi	r29, 0xFF	; 255
    26ce:	cf ef       	ldi	r28, 0xFF	; 255
    26d0:	ec cf       	rjmp	.-40     	; 0x26aa <puts+0x1c>
    26d2:	8a e0       	ldi	r24, 0x0A	; 10
    26d4:	09 95       	icall
    26d6:	89 2b       	or	r24, r25
    26d8:	19 f0       	breq	.+6      	; 0x26e0 <puts+0x52>
    26da:	8f ef       	ldi	r24, 0xFF	; 255
    26dc:	9f ef       	ldi	r25, 0xFF	; 255
    26de:	02 c0       	rjmp	.+4      	; 0x26e4 <puts+0x56>
    26e0:	8d 2f       	mov	r24, r29
    26e2:	9c 2f       	mov	r25, r28
    26e4:	df 91       	pop	r29
    26e6:	cf 91       	pop	r28
    26e8:	1f 91       	pop	r17
    26ea:	0f 91       	pop	r16
    26ec:	08 95       	ret

000026ee <vfprintf>:
    26ee:	ab e0       	ldi	r26, 0x0B	; 11
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	ed e7       	ldi	r30, 0x7D	; 125
    26f4:	f3 e1       	ldi	r31, 0x13	; 19
    26f6:	0c 94 4a 18 	jmp	0x3094	; 0x3094 <__prologue_saves__>
    26fa:	6c 01       	movw	r12, r24
    26fc:	7b 01       	movw	r14, r22
    26fe:	8a 01       	movw	r16, r20
    2700:	fc 01       	movw	r30, r24
    2702:	17 82       	std	Z+7, r1	; 0x07
    2704:	16 82       	std	Z+6, r1	; 0x06
    2706:	83 81       	ldd	r24, Z+3	; 0x03
    2708:	81 ff       	sbrs	r24, 1
    270a:	cc c1       	rjmp	.+920    	; 0x2aa4 <vfprintf+0x3b6>
    270c:	ce 01       	movw	r24, r28
    270e:	01 96       	adiw	r24, 0x01	; 1
    2710:	3c 01       	movw	r6, r24
    2712:	f6 01       	movw	r30, r12
    2714:	93 81       	ldd	r25, Z+3	; 0x03
    2716:	f7 01       	movw	r30, r14
    2718:	93 fd       	sbrc	r25, 3
    271a:	85 91       	lpm	r24, Z+
    271c:	93 ff       	sbrs	r25, 3
    271e:	81 91       	ld	r24, Z+
    2720:	7f 01       	movw	r14, r30
    2722:	88 23       	and	r24, r24
    2724:	09 f4       	brne	.+2      	; 0x2728 <vfprintf+0x3a>
    2726:	ba c1       	rjmp	.+884    	; 0x2a9c <vfprintf+0x3ae>
    2728:	85 32       	cpi	r24, 0x25	; 37
    272a:	39 f4       	brne	.+14     	; 0x273a <vfprintf+0x4c>
    272c:	93 fd       	sbrc	r25, 3
    272e:	85 91       	lpm	r24, Z+
    2730:	93 ff       	sbrs	r25, 3
    2732:	81 91       	ld	r24, Z+
    2734:	7f 01       	movw	r14, r30
    2736:	85 32       	cpi	r24, 0x25	; 37
    2738:	29 f4       	brne	.+10     	; 0x2744 <vfprintf+0x56>
    273a:	b6 01       	movw	r22, r12
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <fputc>
    2742:	e7 cf       	rjmp	.-50     	; 0x2712 <vfprintf+0x24>
    2744:	91 2c       	mov	r9, r1
    2746:	21 2c       	mov	r2, r1
    2748:	31 2c       	mov	r3, r1
    274a:	ff e1       	ldi	r31, 0x1F	; 31
    274c:	f3 15       	cp	r31, r3
    274e:	d8 f0       	brcs	.+54     	; 0x2786 <vfprintf+0x98>
    2750:	8b 32       	cpi	r24, 0x2B	; 43
    2752:	79 f0       	breq	.+30     	; 0x2772 <vfprintf+0x84>
    2754:	38 f4       	brcc	.+14     	; 0x2764 <vfprintf+0x76>
    2756:	80 32       	cpi	r24, 0x20	; 32
    2758:	79 f0       	breq	.+30     	; 0x2778 <vfprintf+0x8a>
    275a:	83 32       	cpi	r24, 0x23	; 35
    275c:	a1 f4       	brne	.+40     	; 0x2786 <vfprintf+0x98>
    275e:	23 2d       	mov	r18, r3
    2760:	20 61       	ori	r18, 0x10	; 16
    2762:	1d c0       	rjmp	.+58     	; 0x279e <vfprintf+0xb0>
    2764:	8d 32       	cpi	r24, 0x2D	; 45
    2766:	61 f0       	breq	.+24     	; 0x2780 <vfprintf+0x92>
    2768:	80 33       	cpi	r24, 0x30	; 48
    276a:	69 f4       	brne	.+26     	; 0x2786 <vfprintf+0x98>
    276c:	23 2d       	mov	r18, r3
    276e:	21 60       	ori	r18, 0x01	; 1
    2770:	16 c0       	rjmp	.+44     	; 0x279e <vfprintf+0xb0>
    2772:	83 2d       	mov	r24, r3
    2774:	82 60       	ori	r24, 0x02	; 2
    2776:	38 2e       	mov	r3, r24
    2778:	e3 2d       	mov	r30, r3
    277a:	e4 60       	ori	r30, 0x04	; 4
    277c:	3e 2e       	mov	r3, r30
    277e:	2a c0       	rjmp	.+84     	; 0x27d4 <vfprintf+0xe6>
    2780:	f3 2d       	mov	r31, r3
    2782:	f8 60       	ori	r31, 0x08	; 8
    2784:	1d c0       	rjmp	.+58     	; 0x27c0 <vfprintf+0xd2>
    2786:	37 fc       	sbrc	r3, 7
    2788:	2d c0       	rjmp	.+90     	; 0x27e4 <vfprintf+0xf6>
    278a:	20 ed       	ldi	r18, 0xD0	; 208
    278c:	28 0f       	add	r18, r24
    278e:	2a 30       	cpi	r18, 0x0A	; 10
    2790:	40 f0       	brcs	.+16     	; 0x27a2 <vfprintf+0xb4>
    2792:	8e 32       	cpi	r24, 0x2E	; 46
    2794:	b9 f4       	brne	.+46     	; 0x27c4 <vfprintf+0xd6>
    2796:	36 fc       	sbrc	r3, 6
    2798:	81 c1       	rjmp	.+770    	; 0x2a9c <vfprintf+0x3ae>
    279a:	23 2d       	mov	r18, r3
    279c:	20 64       	ori	r18, 0x40	; 64
    279e:	32 2e       	mov	r3, r18
    27a0:	19 c0       	rjmp	.+50     	; 0x27d4 <vfprintf+0xe6>
    27a2:	36 fe       	sbrs	r3, 6
    27a4:	06 c0       	rjmp	.+12     	; 0x27b2 <vfprintf+0xc4>
    27a6:	8a e0       	ldi	r24, 0x0A	; 10
    27a8:	98 9e       	mul	r9, r24
    27aa:	20 0d       	add	r18, r0
    27ac:	11 24       	eor	r1, r1
    27ae:	92 2e       	mov	r9, r18
    27b0:	11 c0       	rjmp	.+34     	; 0x27d4 <vfprintf+0xe6>
    27b2:	ea e0       	ldi	r30, 0x0A	; 10
    27b4:	2e 9e       	mul	r2, r30
    27b6:	20 0d       	add	r18, r0
    27b8:	11 24       	eor	r1, r1
    27ba:	22 2e       	mov	r2, r18
    27bc:	f3 2d       	mov	r31, r3
    27be:	f0 62       	ori	r31, 0x20	; 32
    27c0:	3f 2e       	mov	r3, r31
    27c2:	08 c0       	rjmp	.+16     	; 0x27d4 <vfprintf+0xe6>
    27c4:	8c 36       	cpi	r24, 0x6C	; 108
    27c6:	21 f4       	brne	.+8      	; 0x27d0 <vfprintf+0xe2>
    27c8:	83 2d       	mov	r24, r3
    27ca:	80 68       	ori	r24, 0x80	; 128
    27cc:	38 2e       	mov	r3, r24
    27ce:	02 c0       	rjmp	.+4      	; 0x27d4 <vfprintf+0xe6>
    27d0:	88 36       	cpi	r24, 0x68	; 104
    27d2:	41 f4       	brne	.+16     	; 0x27e4 <vfprintf+0xf6>
    27d4:	f7 01       	movw	r30, r14
    27d6:	93 fd       	sbrc	r25, 3
    27d8:	85 91       	lpm	r24, Z+
    27da:	93 ff       	sbrs	r25, 3
    27dc:	81 91       	ld	r24, Z+
    27de:	7f 01       	movw	r14, r30
    27e0:	81 11       	cpse	r24, r1
    27e2:	b3 cf       	rjmp	.-154    	; 0x274a <vfprintf+0x5c>
    27e4:	98 2f       	mov	r25, r24
    27e6:	9f 7d       	andi	r25, 0xDF	; 223
    27e8:	95 54       	subi	r25, 0x45	; 69
    27ea:	93 30       	cpi	r25, 0x03	; 3
    27ec:	28 f4       	brcc	.+10     	; 0x27f8 <vfprintf+0x10a>
    27ee:	0c 5f       	subi	r16, 0xFC	; 252
    27f0:	1f 4f       	sbci	r17, 0xFF	; 255
    27f2:	9f e3       	ldi	r25, 0x3F	; 63
    27f4:	99 83       	std	Y+1, r25	; 0x01
    27f6:	0d c0       	rjmp	.+26     	; 0x2812 <vfprintf+0x124>
    27f8:	83 36       	cpi	r24, 0x63	; 99
    27fa:	31 f0       	breq	.+12     	; 0x2808 <vfprintf+0x11a>
    27fc:	83 37       	cpi	r24, 0x73	; 115
    27fe:	71 f0       	breq	.+28     	; 0x281c <vfprintf+0x12e>
    2800:	83 35       	cpi	r24, 0x53	; 83
    2802:	09 f0       	breq	.+2      	; 0x2806 <vfprintf+0x118>
    2804:	59 c0       	rjmp	.+178    	; 0x28b8 <vfprintf+0x1ca>
    2806:	21 c0       	rjmp	.+66     	; 0x284a <vfprintf+0x15c>
    2808:	f8 01       	movw	r30, r16
    280a:	80 81       	ld	r24, Z
    280c:	89 83       	std	Y+1, r24	; 0x01
    280e:	0e 5f       	subi	r16, 0xFE	; 254
    2810:	1f 4f       	sbci	r17, 0xFF	; 255
    2812:	88 24       	eor	r8, r8
    2814:	83 94       	inc	r8
    2816:	91 2c       	mov	r9, r1
    2818:	53 01       	movw	r10, r6
    281a:	13 c0       	rjmp	.+38     	; 0x2842 <vfprintf+0x154>
    281c:	28 01       	movw	r4, r16
    281e:	f2 e0       	ldi	r31, 0x02	; 2
    2820:	4f 0e       	add	r4, r31
    2822:	51 1c       	adc	r5, r1
    2824:	f8 01       	movw	r30, r16
    2826:	a0 80       	ld	r10, Z
    2828:	b1 80       	ldd	r11, Z+1	; 0x01
    282a:	36 fe       	sbrs	r3, 6
    282c:	03 c0       	rjmp	.+6      	; 0x2834 <vfprintf+0x146>
    282e:	69 2d       	mov	r22, r9
    2830:	70 e0       	ldi	r23, 0x00	; 0
    2832:	02 c0       	rjmp	.+4      	; 0x2838 <vfprintf+0x14a>
    2834:	6f ef       	ldi	r22, 0xFF	; 255
    2836:	7f ef       	ldi	r23, 0xFF	; 255
    2838:	c5 01       	movw	r24, r10
    283a:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <strnlen>
    283e:	4c 01       	movw	r8, r24
    2840:	82 01       	movw	r16, r4
    2842:	f3 2d       	mov	r31, r3
    2844:	ff 77       	andi	r31, 0x7F	; 127
    2846:	3f 2e       	mov	r3, r31
    2848:	16 c0       	rjmp	.+44     	; 0x2876 <vfprintf+0x188>
    284a:	28 01       	movw	r4, r16
    284c:	22 e0       	ldi	r18, 0x02	; 2
    284e:	42 0e       	add	r4, r18
    2850:	51 1c       	adc	r5, r1
    2852:	f8 01       	movw	r30, r16
    2854:	a0 80       	ld	r10, Z
    2856:	b1 80       	ldd	r11, Z+1	; 0x01
    2858:	36 fe       	sbrs	r3, 6
    285a:	03 c0       	rjmp	.+6      	; 0x2862 <vfprintf+0x174>
    285c:	69 2d       	mov	r22, r9
    285e:	70 e0       	ldi	r23, 0x00	; 0
    2860:	02 c0       	rjmp	.+4      	; 0x2866 <vfprintf+0x178>
    2862:	6f ef       	ldi	r22, 0xFF	; 255
    2864:	7f ef       	ldi	r23, 0xFF	; 255
    2866:	c5 01       	movw	r24, r10
    2868:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <strnlen_P>
    286c:	4c 01       	movw	r8, r24
    286e:	f3 2d       	mov	r31, r3
    2870:	f0 68       	ori	r31, 0x80	; 128
    2872:	3f 2e       	mov	r3, r31
    2874:	82 01       	movw	r16, r4
    2876:	33 fc       	sbrc	r3, 3
    2878:	1b c0       	rjmp	.+54     	; 0x28b0 <vfprintf+0x1c2>
    287a:	82 2d       	mov	r24, r2
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	88 16       	cp	r8, r24
    2880:	99 06       	cpc	r9, r25
    2882:	b0 f4       	brcc	.+44     	; 0x28b0 <vfprintf+0x1c2>
    2884:	b6 01       	movw	r22, r12
    2886:	80 e2       	ldi	r24, 0x20	; 32
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <fputc>
    288e:	2a 94       	dec	r2
    2890:	f4 cf       	rjmp	.-24     	; 0x287a <vfprintf+0x18c>
    2892:	f5 01       	movw	r30, r10
    2894:	37 fc       	sbrc	r3, 7
    2896:	85 91       	lpm	r24, Z+
    2898:	37 fe       	sbrs	r3, 7
    289a:	81 91       	ld	r24, Z+
    289c:	5f 01       	movw	r10, r30
    289e:	b6 01       	movw	r22, r12
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <fputc>
    28a6:	21 10       	cpse	r2, r1
    28a8:	2a 94       	dec	r2
    28aa:	21 e0       	ldi	r18, 0x01	; 1
    28ac:	82 1a       	sub	r8, r18
    28ae:	91 08       	sbc	r9, r1
    28b0:	81 14       	cp	r8, r1
    28b2:	91 04       	cpc	r9, r1
    28b4:	71 f7       	brne	.-36     	; 0x2892 <vfprintf+0x1a4>
    28b6:	e8 c0       	rjmp	.+464    	; 0x2a88 <vfprintf+0x39a>
    28b8:	84 36       	cpi	r24, 0x64	; 100
    28ba:	11 f0       	breq	.+4      	; 0x28c0 <vfprintf+0x1d2>
    28bc:	89 36       	cpi	r24, 0x69	; 105
    28be:	41 f5       	brne	.+80     	; 0x2910 <vfprintf+0x222>
    28c0:	f8 01       	movw	r30, r16
    28c2:	37 fe       	sbrs	r3, 7
    28c4:	07 c0       	rjmp	.+14     	; 0x28d4 <vfprintf+0x1e6>
    28c6:	60 81       	ld	r22, Z
    28c8:	71 81       	ldd	r23, Z+1	; 0x01
    28ca:	82 81       	ldd	r24, Z+2	; 0x02
    28cc:	93 81       	ldd	r25, Z+3	; 0x03
    28ce:	0c 5f       	subi	r16, 0xFC	; 252
    28d0:	1f 4f       	sbci	r17, 0xFF	; 255
    28d2:	08 c0       	rjmp	.+16     	; 0x28e4 <vfprintf+0x1f6>
    28d4:	60 81       	ld	r22, Z
    28d6:	71 81       	ldd	r23, Z+1	; 0x01
    28d8:	07 2e       	mov	r0, r23
    28da:	00 0c       	add	r0, r0
    28dc:	88 0b       	sbc	r24, r24
    28de:	99 0b       	sbc	r25, r25
    28e0:	0e 5f       	subi	r16, 0xFE	; 254
    28e2:	1f 4f       	sbci	r17, 0xFF	; 255
    28e4:	f3 2d       	mov	r31, r3
    28e6:	ff 76       	andi	r31, 0x6F	; 111
    28e8:	3f 2e       	mov	r3, r31
    28ea:	97 ff       	sbrs	r25, 7
    28ec:	09 c0       	rjmp	.+18     	; 0x2900 <vfprintf+0x212>
    28ee:	90 95       	com	r25
    28f0:	80 95       	com	r24
    28f2:	70 95       	com	r23
    28f4:	61 95       	neg	r22
    28f6:	7f 4f       	sbci	r23, 0xFF	; 255
    28f8:	8f 4f       	sbci	r24, 0xFF	; 255
    28fa:	9f 4f       	sbci	r25, 0xFF	; 255
    28fc:	f0 68       	ori	r31, 0x80	; 128
    28fe:	3f 2e       	mov	r3, r31
    2900:	2a e0       	ldi	r18, 0x0A	; 10
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	a3 01       	movw	r20, r6
    2906:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__ultoa_invert>
    290a:	88 2e       	mov	r8, r24
    290c:	86 18       	sub	r8, r6
    290e:	45 c0       	rjmp	.+138    	; 0x299a <vfprintf+0x2ac>
    2910:	85 37       	cpi	r24, 0x75	; 117
    2912:	31 f4       	brne	.+12     	; 0x2920 <vfprintf+0x232>
    2914:	23 2d       	mov	r18, r3
    2916:	2f 7e       	andi	r18, 0xEF	; 239
    2918:	b2 2e       	mov	r11, r18
    291a:	2a e0       	ldi	r18, 0x0A	; 10
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	25 c0       	rjmp	.+74     	; 0x296a <vfprintf+0x27c>
    2920:	93 2d       	mov	r25, r3
    2922:	99 7f       	andi	r25, 0xF9	; 249
    2924:	b9 2e       	mov	r11, r25
    2926:	8f 36       	cpi	r24, 0x6F	; 111
    2928:	c1 f0       	breq	.+48     	; 0x295a <vfprintf+0x26c>
    292a:	18 f4       	brcc	.+6      	; 0x2932 <vfprintf+0x244>
    292c:	88 35       	cpi	r24, 0x58	; 88
    292e:	79 f0       	breq	.+30     	; 0x294e <vfprintf+0x260>
    2930:	b5 c0       	rjmp	.+362    	; 0x2a9c <vfprintf+0x3ae>
    2932:	80 37       	cpi	r24, 0x70	; 112
    2934:	19 f0       	breq	.+6      	; 0x293c <vfprintf+0x24e>
    2936:	88 37       	cpi	r24, 0x78	; 120
    2938:	21 f0       	breq	.+8      	; 0x2942 <vfprintf+0x254>
    293a:	b0 c0       	rjmp	.+352    	; 0x2a9c <vfprintf+0x3ae>
    293c:	e9 2f       	mov	r30, r25
    293e:	e0 61       	ori	r30, 0x10	; 16
    2940:	be 2e       	mov	r11, r30
    2942:	b4 fe       	sbrs	r11, 4
    2944:	0d c0       	rjmp	.+26     	; 0x2960 <vfprintf+0x272>
    2946:	fb 2d       	mov	r31, r11
    2948:	f4 60       	ori	r31, 0x04	; 4
    294a:	bf 2e       	mov	r11, r31
    294c:	09 c0       	rjmp	.+18     	; 0x2960 <vfprintf+0x272>
    294e:	34 fe       	sbrs	r3, 4
    2950:	0a c0       	rjmp	.+20     	; 0x2966 <vfprintf+0x278>
    2952:	29 2f       	mov	r18, r25
    2954:	26 60       	ori	r18, 0x06	; 6
    2956:	b2 2e       	mov	r11, r18
    2958:	06 c0       	rjmp	.+12     	; 0x2966 <vfprintf+0x278>
    295a:	28 e0       	ldi	r18, 0x08	; 8
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	05 c0       	rjmp	.+10     	; 0x296a <vfprintf+0x27c>
    2960:	20 e1       	ldi	r18, 0x10	; 16
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	02 c0       	rjmp	.+4      	; 0x296a <vfprintf+0x27c>
    2966:	20 e1       	ldi	r18, 0x10	; 16
    2968:	32 e0       	ldi	r19, 0x02	; 2
    296a:	f8 01       	movw	r30, r16
    296c:	b7 fe       	sbrs	r11, 7
    296e:	07 c0       	rjmp	.+14     	; 0x297e <vfprintf+0x290>
    2970:	60 81       	ld	r22, Z
    2972:	71 81       	ldd	r23, Z+1	; 0x01
    2974:	82 81       	ldd	r24, Z+2	; 0x02
    2976:	93 81       	ldd	r25, Z+3	; 0x03
    2978:	0c 5f       	subi	r16, 0xFC	; 252
    297a:	1f 4f       	sbci	r17, 0xFF	; 255
    297c:	06 c0       	rjmp	.+12     	; 0x298a <vfprintf+0x29c>
    297e:	60 81       	ld	r22, Z
    2980:	71 81       	ldd	r23, Z+1	; 0x01
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	0e 5f       	subi	r16, 0xFE	; 254
    2988:	1f 4f       	sbci	r17, 0xFF	; 255
    298a:	a3 01       	movw	r20, r6
    298c:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__ultoa_invert>
    2990:	88 2e       	mov	r8, r24
    2992:	86 18       	sub	r8, r6
    2994:	fb 2d       	mov	r31, r11
    2996:	ff 77       	andi	r31, 0x7F	; 127
    2998:	3f 2e       	mov	r3, r31
    299a:	36 fe       	sbrs	r3, 6
    299c:	0d c0       	rjmp	.+26     	; 0x29b8 <vfprintf+0x2ca>
    299e:	23 2d       	mov	r18, r3
    29a0:	2e 7f       	andi	r18, 0xFE	; 254
    29a2:	a2 2e       	mov	r10, r18
    29a4:	89 14       	cp	r8, r9
    29a6:	58 f4       	brcc	.+22     	; 0x29be <vfprintf+0x2d0>
    29a8:	34 fe       	sbrs	r3, 4
    29aa:	0b c0       	rjmp	.+22     	; 0x29c2 <vfprintf+0x2d4>
    29ac:	32 fc       	sbrc	r3, 2
    29ae:	09 c0       	rjmp	.+18     	; 0x29c2 <vfprintf+0x2d4>
    29b0:	83 2d       	mov	r24, r3
    29b2:	8e 7e       	andi	r24, 0xEE	; 238
    29b4:	a8 2e       	mov	r10, r24
    29b6:	05 c0       	rjmp	.+10     	; 0x29c2 <vfprintf+0x2d4>
    29b8:	b8 2c       	mov	r11, r8
    29ba:	a3 2c       	mov	r10, r3
    29bc:	03 c0       	rjmp	.+6      	; 0x29c4 <vfprintf+0x2d6>
    29be:	b8 2c       	mov	r11, r8
    29c0:	01 c0       	rjmp	.+2      	; 0x29c4 <vfprintf+0x2d6>
    29c2:	b9 2c       	mov	r11, r9
    29c4:	a4 fe       	sbrs	r10, 4
    29c6:	0f c0       	rjmp	.+30     	; 0x29e6 <vfprintf+0x2f8>
    29c8:	fe 01       	movw	r30, r28
    29ca:	e8 0d       	add	r30, r8
    29cc:	f1 1d       	adc	r31, r1
    29ce:	80 81       	ld	r24, Z
    29d0:	80 33       	cpi	r24, 0x30	; 48
    29d2:	21 f4       	brne	.+8      	; 0x29dc <vfprintf+0x2ee>
    29d4:	9a 2d       	mov	r25, r10
    29d6:	99 7e       	andi	r25, 0xE9	; 233
    29d8:	a9 2e       	mov	r10, r25
    29da:	09 c0       	rjmp	.+18     	; 0x29ee <vfprintf+0x300>
    29dc:	a2 fe       	sbrs	r10, 2
    29de:	06 c0       	rjmp	.+12     	; 0x29ec <vfprintf+0x2fe>
    29e0:	b3 94       	inc	r11
    29e2:	b3 94       	inc	r11
    29e4:	04 c0       	rjmp	.+8      	; 0x29ee <vfprintf+0x300>
    29e6:	8a 2d       	mov	r24, r10
    29e8:	86 78       	andi	r24, 0x86	; 134
    29ea:	09 f0       	breq	.+2      	; 0x29ee <vfprintf+0x300>
    29ec:	b3 94       	inc	r11
    29ee:	a3 fc       	sbrc	r10, 3
    29f0:	11 c0       	rjmp	.+34     	; 0x2a14 <vfprintf+0x326>
    29f2:	a0 fe       	sbrs	r10, 0
    29f4:	06 c0       	rjmp	.+12     	; 0x2a02 <vfprintf+0x314>
    29f6:	b2 14       	cp	r11, r2
    29f8:	88 f4       	brcc	.+34     	; 0x2a1c <vfprintf+0x32e>
    29fa:	28 0c       	add	r2, r8
    29fc:	92 2c       	mov	r9, r2
    29fe:	9b 18       	sub	r9, r11
    2a00:	0e c0       	rjmp	.+28     	; 0x2a1e <vfprintf+0x330>
    2a02:	b2 14       	cp	r11, r2
    2a04:	60 f4       	brcc	.+24     	; 0x2a1e <vfprintf+0x330>
    2a06:	b6 01       	movw	r22, r12
    2a08:	80 e2       	ldi	r24, 0x20	; 32
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <fputc>
    2a10:	b3 94       	inc	r11
    2a12:	f7 cf       	rjmp	.-18     	; 0x2a02 <vfprintf+0x314>
    2a14:	b2 14       	cp	r11, r2
    2a16:	18 f4       	brcc	.+6      	; 0x2a1e <vfprintf+0x330>
    2a18:	2b 18       	sub	r2, r11
    2a1a:	02 c0       	rjmp	.+4      	; 0x2a20 <vfprintf+0x332>
    2a1c:	98 2c       	mov	r9, r8
    2a1e:	21 2c       	mov	r2, r1
    2a20:	a4 fe       	sbrs	r10, 4
    2a22:	10 c0       	rjmp	.+32     	; 0x2a44 <vfprintf+0x356>
    2a24:	b6 01       	movw	r22, r12
    2a26:	80 e3       	ldi	r24, 0x30	; 48
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <fputc>
    2a2e:	a2 fe       	sbrs	r10, 2
    2a30:	17 c0       	rjmp	.+46     	; 0x2a60 <vfprintf+0x372>
    2a32:	a1 fc       	sbrc	r10, 1
    2a34:	03 c0       	rjmp	.+6      	; 0x2a3c <vfprintf+0x34e>
    2a36:	88 e7       	ldi	r24, 0x78	; 120
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	02 c0       	rjmp	.+4      	; 0x2a40 <vfprintf+0x352>
    2a3c:	88 e5       	ldi	r24, 0x58	; 88
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	b6 01       	movw	r22, r12
    2a42:	0c c0       	rjmp	.+24     	; 0x2a5c <vfprintf+0x36e>
    2a44:	8a 2d       	mov	r24, r10
    2a46:	86 78       	andi	r24, 0x86	; 134
    2a48:	59 f0       	breq	.+22     	; 0x2a60 <vfprintf+0x372>
    2a4a:	a1 fe       	sbrs	r10, 1
    2a4c:	02 c0       	rjmp	.+4      	; 0x2a52 <vfprintf+0x364>
    2a4e:	8b e2       	ldi	r24, 0x2B	; 43
    2a50:	01 c0       	rjmp	.+2      	; 0x2a54 <vfprintf+0x366>
    2a52:	80 e2       	ldi	r24, 0x20	; 32
    2a54:	a7 fc       	sbrc	r10, 7
    2a56:	8d e2       	ldi	r24, 0x2D	; 45
    2a58:	b6 01       	movw	r22, r12
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <fputc>
    2a60:	89 14       	cp	r8, r9
    2a62:	38 f4       	brcc	.+14     	; 0x2a72 <vfprintf+0x384>
    2a64:	b6 01       	movw	r22, r12
    2a66:	80 e3       	ldi	r24, 0x30	; 48
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <fputc>
    2a6e:	9a 94       	dec	r9
    2a70:	f7 cf       	rjmp	.-18     	; 0x2a60 <vfprintf+0x372>
    2a72:	8a 94       	dec	r8
    2a74:	f3 01       	movw	r30, r6
    2a76:	e8 0d       	add	r30, r8
    2a78:	f1 1d       	adc	r31, r1
    2a7a:	80 81       	ld	r24, Z
    2a7c:	b6 01       	movw	r22, r12
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <fputc>
    2a84:	81 10       	cpse	r8, r1
    2a86:	f5 cf       	rjmp	.-22     	; 0x2a72 <vfprintf+0x384>
    2a88:	22 20       	and	r2, r2
    2a8a:	09 f4       	brne	.+2      	; 0x2a8e <vfprintf+0x3a0>
    2a8c:	42 ce       	rjmp	.-892    	; 0x2712 <vfprintf+0x24>
    2a8e:	b6 01       	movw	r22, r12
    2a90:	80 e2       	ldi	r24, 0x20	; 32
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <fputc>
    2a98:	2a 94       	dec	r2
    2a9a:	f6 cf       	rjmp	.-20     	; 0x2a88 <vfprintf+0x39a>
    2a9c:	f6 01       	movw	r30, r12
    2a9e:	86 81       	ldd	r24, Z+6	; 0x06
    2aa0:	97 81       	ldd	r25, Z+7	; 0x07
    2aa2:	02 c0       	rjmp	.+4      	; 0x2aa8 <vfprintf+0x3ba>
    2aa4:	8f ef       	ldi	r24, 0xFF	; 255
    2aa6:	9f ef       	ldi	r25, 0xFF	; 255
    2aa8:	2b 96       	adiw	r28, 0x0b	; 11
    2aaa:	e2 e1       	ldi	r30, 0x12	; 18
    2aac:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <__epilogue_restores__>

00002ab0 <dtoa_prf>:
    2ab0:	a9 e0       	ldi	r26, 0x09	; 9
    2ab2:	b0 e0       	ldi	r27, 0x00	; 0
    2ab4:	ee e5       	ldi	r30, 0x5E	; 94
    2ab6:	f5 e1       	ldi	r31, 0x15	; 21
    2ab8:	0c 94 50 18 	jmp	0x30a0	; 0x30a0 <__prologue_saves__+0xc>
    2abc:	6a 01       	movw	r12, r20
    2abe:	12 2f       	mov	r17, r18
    2ac0:	b0 2e       	mov	r11, r16
    2ac2:	2b e3       	ldi	r18, 0x3B	; 59
    2ac4:	20 17       	cp	r18, r16
    2ac6:	20 f0       	brcs	.+8      	; 0x2ad0 <dtoa_prf+0x20>
    2ac8:	ff 24       	eor	r15, r15
    2aca:	f3 94       	inc	r15
    2acc:	f0 0e       	add	r15, r16
    2ace:	02 c0       	rjmp	.+4      	; 0x2ad4 <dtoa_prf+0x24>
    2ad0:	2c e3       	ldi	r18, 0x3C	; 60
    2ad2:	f2 2e       	mov	r15, r18
    2ad4:	0f 2d       	mov	r16, r15
    2ad6:	27 e0       	ldi	r18, 0x07	; 7
    2ad8:	ae 01       	movw	r20, r28
    2ada:	4f 5f       	subi	r20, 0xFF	; 255
    2adc:	5f 4f       	sbci	r21, 0xFF	; 255
    2ade:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__ftoa_engine>
    2ae2:	bc 01       	movw	r22, r24
    2ae4:	49 81       	ldd	r20, Y+1	; 0x01
    2ae6:	84 2f       	mov	r24, r20
    2ae8:	89 70       	andi	r24, 0x09	; 9
    2aea:	81 30       	cpi	r24, 0x01	; 1
    2aec:	31 f0       	breq	.+12     	; 0x2afa <dtoa_prf+0x4a>
    2aee:	e1 fc       	sbrc	r14, 1
    2af0:	06 c0       	rjmp	.+12     	; 0x2afe <dtoa_prf+0x4e>
    2af2:	e0 fe       	sbrs	r14, 0
    2af4:	06 c0       	rjmp	.+12     	; 0x2b02 <dtoa_prf+0x52>
    2af6:	90 e2       	ldi	r25, 0x20	; 32
    2af8:	05 c0       	rjmp	.+10     	; 0x2b04 <dtoa_prf+0x54>
    2afa:	9d e2       	ldi	r25, 0x2D	; 45
    2afc:	03 c0       	rjmp	.+6      	; 0x2b04 <dtoa_prf+0x54>
    2afe:	9b e2       	ldi	r25, 0x2B	; 43
    2b00:	01 c0       	rjmp	.+2      	; 0x2b04 <dtoa_prf+0x54>
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	5e 2d       	mov	r21, r14
    2b06:	50 71       	andi	r21, 0x10	; 16
    2b08:	43 ff       	sbrs	r20, 3
    2b0a:	3c c0       	rjmp	.+120    	; 0x2b84 <dtoa_prf+0xd4>
    2b0c:	91 11       	cpse	r25, r1
    2b0e:	02 c0       	rjmp	.+4      	; 0x2b14 <dtoa_prf+0x64>
    2b10:	83 e0       	ldi	r24, 0x03	; 3
    2b12:	01 c0       	rjmp	.+2      	; 0x2b16 <dtoa_prf+0x66>
    2b14:	84 e0       	ldi	r24, 0x04	; 4
    2b16:	81 17       	cp	r24, r17
    2b18:	18 f4       	brcc	.+6      	; 0x2b20 <dtoa_prf+0x70>
    2b1a:	21 2f       	mov	r18, r17
    2b1c:	28 1b       	sub	r18, r24
    2b1e:	01 c0       	rjmp	.+2      	; 0x2b22 <dtoa_prf+0x72>
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	51 11       	cpse	r21, r1
    2b24:	0b c0       	rjmp	.+22     	; 0x2b3c <dtoa_prf+0x8c>
    2b26:	f6 01       	movw	r30, r12
    2b28:	82 2f       	mov	r24, r18
    2b2a:	30 e2       	ldi	r19, 0x20	; 32
    2b2c:	88 23       	and	r24, r24
    2b2e:	19 f0       	breq	.+6      	; 0x2b36 <dtoa_prf+0x86>
    2b30:	31 93       	st	Z+, r19
    2b32:	81 50       	subi	r24, 0x01	; 1
    2b34:	fb cf       	rjmp	.-10     	; 0x2b2c <dtoa_prf+0x7c>
    2b36:	c2 0e       	add	r12, r18
    2b38:	d1 1c       	adc	r13, r1
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	99 23       	and	r25, r25
    2b3e:	29 f0       	breq	.+10     	; 0x2b4a <dtoa_prf+0x9a>
    2b40:	d6 01       	movw	r26, r12
    2b42:	9c 93       	st	X, r25
    2b44:	f6 01       	movw	r30, r12
    2b46:	31 96       	adiw	r30, 0x01	; 1
    2b48:	6f 01       	movw	r12, r30
    2b4a:	c6 01       	movw	r24, r12
    2b4c:	03 96       	adiw	r24, 0x03	; 3
    2b4e:	e2 fe       	sbrs	r14, 2
    2b50:	0a c0       	rjmp	.+20     	; 0x2b66 <dtoa_prf+0xb6>
    2b52:	3e e4       	ldi	r19, 0x4E	; 78
    2b54:	d6 01       	movw	r26, r12
    2b56:	3c 93       	st	X, r19
    2b58:	41 e4       	ldi	r20, 0x41	; 65
    2b5a:	11 96       	adiw	r26, 0x01	; 1
    2b5c:	4c 93       	st	X, r20
    2b5e:	11 97       	sbiw	r26, 0x01	; 1
    2b60:	12 96       	adiw	r26, 0x02	; 2
    2b62:	3c 93       	st	X, r19
    2b64:	06 c0       	rjmp	.+12     	; 0x2b72 <dtoa_prf+0xc2>
    2b66:	3e e6       	ldi	r19, 0x6E	; 110
    2b68:	f6 01       	movw	r30, r12
    2b6a:	30 83       	st	Z, r19
    2b6c:	41 e6       	ldi	r20, 0x61	; 97
    2b6e:	41 83       	std	Z+1, r20	; 0x01
    2b70:	32 83       	std	Z+2, r19	; 0x02
    2b72:	fc 01       	movw	r30, r24
    2b74:	32 2f       	mov	r19, r18
    2b76:	40 e2       	ldi	r20, 0x20	; 32
    2b78:	33 23       	and	r19, r19
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <dtoa_prf+0xce>
    2b7c:	42 c0       	rjmp	.+132    	; 0x2c02 <dtoa_prf+0x152>
    2b7e:	41 93       	st	Z+, r20
    2b80:	31 50       	subi	r19, 0x01	; 1
    2b82:	fa cf       	rjmp	.-12     	; 0x2b78 <dtoa_prf+0xc8>
    2b84:	42 ff       	sbrs	r20, 2
    2b86:	44 c0       	rjmp	.+136    	; 0x2c10 <dtoa_prf+0x160>
    2b88:	91 11       	cpse	r25, r1
    2b8a:	02 c0       	rjmp	.+4      	; 0x2b90 <dtoa_prf+0xe0>
    2b8c:	83 e0       	ldi	r24, 0x03	; 3
    2b8e:	01 c0       	rjmp	.+2      	; 0x2b92 <dtoa_prf+0xe2>
    2b90:	84 e0       	ldi	r24, 0x04	; 4
    2b92:	81 17       	cp	r24, r17
    2b94:	18 f4       	brcc	.+6      	; 0x2b9c <dtoa_prf+0xec>
    2b96:	21 2f       	mov	r18, r17
    2b98:	28 1b       	sub	r18, r24
    2b9a:	01 c0       	rjmp	.+2      	; 0x2b9e <dtoa_prf+0xee>
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	51 11       	cpse	r21, r1
    2ba0:	0b c0       	rjmp	.+22     	; 0x2bb8 <dtoa_prf+0x108>
    2ba2:	f6 01       	movw	r30, r12
    2ba4:	82 2f       	mov	r24, r18
    2ba6:	30 e2       	ldi	r19, 0x20	; 32
    2ba8:	88 23       	and	r24, r24
    2baa:	19 f0       	breq	.+6      	; 0x2bb2 <dtoa_prf+0x102>
    2bac:	31 93       	st	Z+, r19
    2bae:	81 50       	subi	r24, 0x01	; 1
    2bb0:	fb cf       	rjmp	.-10     	; 0x2ba8 <dtoa_prf+0xf8>
    2bb2:	c2 0e       	add	r12, r18
    2bb4:	d1 1c       	adc	r13, r1
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	99 23       	and	r25, r25
    2bba:	29 f0       	breq	.+10     	; 0x2bc6 <dtoa_prf+0x116>
    2bbc:	d6 01       	movw	r26, r12
    2bbe:	9c 93       	st	X, r25
    2bc0:	f6 01       	movw	r30, r12
    2bc2:	31 96       	adiw	r30, 0x01	; 1
    2bc4:	6f 01       	movw	r12, r30
    2bc6:	c6 01       	movw	r24, r12
    2bc8:	03 96       	adiw	r24, 0x03	; 3
    2bca:	e2 fe       	sbrs	r14, 2
    2bcc:	0b c0       	rjmp	.+22     	; 0x2be4 <dtoa_prf+0x134>
    2bce:	39 e4       	ldi	r19, 0x49	; 73
    2bd0:	d6 01       	movw	r26, r12
    2bd2:	3c 93       	st	X, r19
    2bd4:	3e e4       	ldi	r19, 0x4E	; 78
    2bd6:	11 96       	adiw	r26, 0x01	; 1
    2bd8:	3c 93       	st	X, r19
    2bda:	11 97       	sbiw	r26, 0x01	; 1
    2bdc:	36 e4       	ldi	r19, 0x46	; 70
    2bde:	12 96       	adiw	r26, 0x02	; 2
    2be0:	3c 93       	st	X, r19
    2be2:	07 c0       	rjmp	.+14     	; 0x2bf2 <dtoa_prf+0x142>
    2be4:	39 e6       	ldi	r19, 0x69	; 105
    2be6:	f6 01       	movw	r30, r12
    2be8:	30 83       	st	Z, r19
    2bea:	3e e6       	ldi	r19, 0x6E	; 110
    2bec:	31 83       	std	Z+1, r19	; 0x01
    2bee:	36 e6       	ldi	r19, 0x66	; 102
    2bf0:	32 83       	std	Z+2, r19	; 0x02
    2bf2:	fc 01       	movw	r30, r24
    2bf4:	32 2f       	mov	r19, r18
    2bf6:	40 e2       	ldi	r20, 0x20	; 32
    2bf8:	33 23       	and	r19, r19
    2bfa:	19 f0       	breq	.+6      	; 0x2c02 <dtoa_prf+0x152>
    2bfc:	41 93       	st	Z+, r20
    2bfe:	31 50       	subi	r19, 0x01	; 1
    2c00:	fb cf       	rjmp	.-10     	; 0x2bf8 <dtoa_prf+0x148>
    2c02:	fc 01       	movw	r30, r24
    2c04:	e2 0f       	add	r30, r18
    2c06:	f1 1d       	adc	r31, r1
    2c08:	10 82       	st	Z, r1
    2c0a:	8e ef       	ldi	r24, 0xFE	; 254
    2c0c:	9f ef       	ldi	r25, 0xFF	; 255
    2c0e:	a6 c0       	rjmp	.+332    	; 0x2d5c <dtoa_prf+0x2ac>
    2c10:	21 e0       	ldi	r18, 0x01	; 1
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	91 11       	cpse	r25, r1
    2c16:	02 c0       	rjmp	.+4      	; 0x2c1c <dtoa_prf+0x16c>
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	16 16       	cp	r1, r22
    2c1e:	17 06       	cpc	r1, r23
    2c20:	1c f4       	brge	.+6      	; 0x2c28 <dtoa_prf+0x178>
    2c22:	fb 01       	movw	r30, r22
    2c24:	31 96       	adiw	r30, 0x01	; 1
    2c26:	02 c0       	rjmp	.+4      	; 0x2c2c <dtoa_prf+0x17c>
    2c28:	e1 e0       	ldi	r30, 0x01	; 1
    2c2a:	f0 e0       	ldi	r31, 0x00	; 0
    2c2c:	2e 0f       	add	r18, r30
    2c2e:	3f 1f       	adc	r19, r31
    2c30:	bb 20       	and	r11, r11
    2c32:	21 f0       	breq	.+8      	; 0x2c3c <dtoa_prf+0x18c>
    2c34:	eb 2d       	mov	r30, r11
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	31 96       	adiw	r30, 0x01	; 1
    2c3a:	02 c0       	rjmp	.+4      	; 0x2c40 <dtoa_prf+0x190>
    2c3c:	e0 e0       	ldi	r30, 0x00	; 0
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	2e 0f       	add	r18, r30
    2c42:	3f 1f       	adc	r19, r31
    2c44:	e1 2f       	mov	r30, r17
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	2e 17       	cp	r18, r30
    2c4a:	3f 07       	cpc	r19, r31
    2c4c:	1c f4       	brge	.+6      	; 0x2c54 <dtoa_prf+0x1a4>
    2c4e:	12 1b       	sub	r17, r18
    2c50:	21 2f       	mov	r18, r17
    2c52:	01 c0       	rjmp	.+2      	; 0x2c56 <dtoa_prf+0x1a6>
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	8e 2d       	mov	r24, r14
    2c58:	88 71       	andi	r24, 0x18	; 24
    2c5a:	59 f4       	brne	.+22     	; 0x2c72 <dtoa_prf+0x1c2>
    2c5c:	f6 01       	movw	r30, r12
    2c5e:	82 2f       	mov	r24, r18
    2c60:	30 e2       	ldi	r19, 0x20	; 32
    2c62:	88 23       	and	r24, r24
    2c64:	19 f0       	breq	.+6      	; 0x2c6c <dtoa_prf+0x1bc>
    2c66:	31 93       	st	Z+, r19
    2c68:	81 50       	subi	r24, 0x01	; 1
    2c6a:	fb cf       	rjmp	.-10     	; 0x2c62 <dtoa_prf+0x1b2>
    2c6c:	c2 0e       	add	r12, r18
    2c6e:	d1 1c       	adc	r13, r1
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	99 23       	and	r25, r25
    2c74:	29 f0       	breq	.+10     	; 0x2c80 <dtoa_prf+0x1d0>
    2c76:	d6 01       	movw	r26, r12
    2c78:	9c 93       	st	X, r25
    2c7a:	f6 01       	movw	r30, r12
    2c7c:	31 96       	adiw	r30, 0x01	; 1
    2c7e:	6f 01       	movw	r12, r30
    2c80:	51 11       	cpse	r21, r1
    2c82:	0b c0       	rjmp	.+22     	; 0x2c9a <dtoa_prf+0x1ea>
    2c84:	f6 01       	movw	r30, r12
    2c86:	82 2f       	mov	r24, r18
    2c88:	90 e3       	ldi	r25, 0x30	; 48
    2c8a:	88 23       	and	r24, r24
    2c8c:	19 f0       	breq	.+6      	; 0x2c94 <dtoa_prf+0x1e4>
    2c8e:	91 93       	st	Z+, r25
    2c90:	81 50       	subi	r24, 0x01	; 1
    2c92:	fb cf       	rjmp	.-10     	; 0x2c8a <dtoa_prf+0x1da>
    2c94:	c2 0e       	add	r12, r18
    2c96:	d1 1c       	adc	r13, r1
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	0f 2d       	mov	r16, r15
    2c9c:	06 0f       	add	r16, r22
    2c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca0:	34 2f       	mov	r19, r20
    2ca2:	30 71       	andi	r19, 0x10	; 16
    2ca4:	44 ff       	sbrs	r20, 4
    2ca6:	03 c0       	rjmp	.+6      	; 0x2cae <dtoa_prf+0x1fe>
    2ca8:	91 33       	cpi	r25, 0x31	; 49
    2caa:	09 f4       	brne	.+2      	; 0x2cae <dtoa_prf+0x1fe>
    2cac:	01 50       	subi	r16, 0x01	; 1
    2cae:	10 16       	cp	r1, r16
    2cb0:	24 f4       	brge	.+8      	; 0x2cba <dtoa_prf+0x20a>
    2cb2:	09 30       	cpi	r16, 0x09	; 9
    2cb4:	18 f0       	brcs	.+6      	; 0x2cbc <dtoa_prf+0x20c>
    2cb6:	08 e0       	ldi	r16, 0x08	; 8
    2cb8:	01 c0       	rjmp	.+2      	; 0x2cbc <dtoa_prf+0x20c>
    2cba:	01 e0       	ldi	r16, 0x01	; 1
    2cbc:	ab 01       	movw	r20, r22
    2cbe:	77 ff       	sbrs	r23, 7
    2cc0:	02 c0       	rjmp	.+4      	; 0x2cc6 <dtoa_prf+0x216>
    2cc2:	40 e0       	ldi	r20, 0x00	; 0
    2cc4:	50 e0       	ldi	r21, 0x00	; 0
    2cc6:	fb 01       	movw	r30, r22
    2cc8:	e4 1b       	sub	r30, r20
    2cca:	f5 0b       	sbc	r31, r21
    2ccc:	a1 e0       	ldi	r26, 0x01	; 1
    2cce:	b0 e0       	ldi	r27, 0x00	; 0
    2cd0:	ac 0f       	add	r26, r28
    2cd2:	bd 1f       	adc	r27, r29
    2cd4:	ea 0f       	add	r30, r26
    2cd6:	fb 1f       	adc	r31, r27
    2cd8:	8e e2       	ldi	r24, 0x2E	; 46
    2cda:	a8 2e       	mov	r10, r24
    2cdc:	4b 01       	movw	r8, r22
    2cde:	80 1a       	sub	r8, r16
    2ce0:	91 08       	sbc	r9, r1
    2ce2:	0b 2d       	mov	r16, r11
    2ce4:	10 e0       	ldi	r17, 0x00	; 0
    2ce6:	11 95       	neg	r17
    2ce8:	01 95       	neg	r16
    2cea:	11 09       	sbc	r17, r1
    2cec:	4f 3f       	cpi	r20, 0xFF	; 255
    2cee:	bf ef       	ldi	r27, 0xFF	; 255
    2cf0:	5b 07       	cpc	r21, r27
    2cf2:	21 f4       	brne	.+8      	; 0x2cfc <dtoa_prf+0x24c>
    2cf4:	d6 01       	movw	r26, r12
    2cf6:	ac 92       	st	X, r10
    2cf8:	11 96       	adiw	r26, 0x01	; 1
    2cfa:	6d 01       	movw	r12, r26
    2cfc:	64 17       	cp	r22, r20
    2cfe:	75 07       	cpc	r23, r21
    2d00:	2c f0       	brlt	.+10     	; 0x2d0c <dtoa_prf+0x25c>
    2d02:	84 16       	cp	r8, r20
    2d04:	95 06       	cpc	r9, r21
    2d06:	14 f4       	brge	.+4      	; 0x2d0c <dtoa_prf+0x25c>
    2d08:	81 81       	ldd	r24, Z+1	; 0x01
    2d0a:	01 c0       	rjmp	.+2      	; 0x2d0e <dtoa_prf+0x25e>
    2d0c:	80 e3       	ldi	r24, 0x30	; 48
    2d0e:	41 50       	subi	r20, 0x01	; 1
    2d10:	51 09       	sbc	r21, r1
    2d12:	31 96       	adiw	r30, 0x01	; 1
    2d14:	d6 01       	movw	r26, r12
    2d16:	11 96       	adiw	r26, 0x01	; 1
    2d18:	7d 01       	movw	r14, r26
    2d1a:	40 17       	cp	r20, r16
    2d1c:	51 07       	cpc	r21, r17
    2d1e:	24 f0       	brlt	.+8      	; 0x2d28 <dtoa_prf+0x278>
    2d20:	d6 01       	movw	r26, r12
    2d22:	8c 93       	st	X, r24
    2d24:	67 01       	movw	r12, r14
    2d26:	e2 cf       	rjmp	.-60     	; 0x2cec <dtoa_prf+0x23c>
    2d28:	64 17       	cp	r22, r20
    2d2a:	75 07       	cpc	r23, r21
    2d2c:	39 f4       	brne	.+14     	; 0x2d3c <dtoa_prf+0x28c>
    2d2e:	96 33       	cpi	r25, 0x36	; 54
    2d30:	20 f4       	brcc	.+8      	; 0x2d3a <dtoa_prf+0x28a>
    2d32:	95 33       	cpi	r25, 0x35	; 53
    2d34:	19 f4       	brne	.+6      	; 0x2d3c <dtoa_prf+0x28c>
    2d36:	31 11       	cpse	r19, r1
    2d38:	01 c0       	rjmp	.+2      	; 0x2d3c <dtoa_prf+0x28c>
    2d3a:	81 e3       	ldi	r24, 0x31	; 49
    2d3c:	f6 01       	movw	r30, r12
    2d3e:	80 83       	st	Z, r24
    2d40:	f7 01       	movw	r30, r14
    2d42:	82 2f       	mov	r24, r18
    2d44:	90 e2       	ldi	r25, 0x20	; 32
    2d46:	88 23       	and	r24, r24
    2d48:	19 f0       	breq	.+6      	; 0x2d50 <dtoa_prf+0x2a0>
    2d4a:	91 93       	st	Z+, r25
    2d4c:	81 50       	subi	r24, 0x01	; 1
    2d4e:	fb cf       	rjmp	.-10     	; 0x2d46 <dtoa_prf+0x296>
    2d50:	f7 01       	movw	r30, r14
    2d52:	e2 0f       	add	r30, r18
    2d54:	f1 1d       	adc	r31, r1
    2d56:	10 82       	st	Z, r1
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	29 96       	adiw	r28, 0x09	; 9
    2d5e:	ec e0       	ldi	r30, 0x0C	; 12
    2d60:	0c 94 6c 18 	jmp	0x30d8	; 0x30d8 <__epilogue_restores__+0xc>

00002d64 <__ftoa_engine>:
    2d64:	28 30       	cpi	r18, 0x08	; 8
    2d66:	08 f0       	brcs	.+2      	; 0x2d6a <__ftoa_engine+0x6>
    2d68:	27 e0       	ldi	r18, 0x07	; 7
    2d6a:	33 27       	eor	r19, r19
    2d6c:	da 01       	movw	r26, r20
    2d6e:	99 0f       	add	r25, r25
    2d70:	31 1d       	adc	r19, r1
    2d72:	87 fd       	sbrc	r24, 7
    2d74:	91 60       	ori	r25, 0x01	; 1
    2d76:	00 96       	adiw	r24, 0x00	; 0
    2d78:	61 05       	cpc	r22, r1
    2d7a:	71 05       	cpc	r23, r1
    2d7c:	39 f4       	brne	.+14     	; 0x2d8c <__ftoa_engine+0x28>
    2d7e:	32 60       	ori	r19, 0x02	; 2
    2d80:	2e 5f       	subi	r18, 0xFE	; 254
    2d82:	3d 93       	st	X+, r19
    2d84:	30 e3       	ldi	r19, 0x30	; 48
    2d86:	2a 95       	dec	r18
    2d88:	e1 f7       	brne	.-8      	; 0x2d82 <__ftoa_engine+0x1e>
    2d8a:	08 95       	ret
    2d8c:	9f 3f       	cpi	r25, 0xFF	; 255
    2d8e:	30 f0       	brcs	.+12     	; 0x2d9c <__ftoa_engine+0x38>
    2d90:	80 38       	cpi	r24, 0x80	; 128
    2d92:	71 05       	cpc	r23, r1
    2d94:	61 05       	cpc	r22, r1
    2d96:	09 f0       	breq	.+2      	; 0x2d9a <__ftoa_engine+0x36>
    2d98:	3c 5f       	subi	r19, 0xFC	; 252
    2d9a:	3c 5f       	subi	r19, 0xFC	; 252
    2d9c:	3d 93       	st	X+, r19
    2d9e:	91 30       	cpi	r25, 0x01	; 1
    2da0:	08 f0       	brcs	.+2      	; 0x2da4 <__ftoa_engine+0x40>
    2da2:	80 68       	ori	r24, 0x80	; 128
    2da4:	91 1d       	adc	r25, r1
    2da6:	df 93       	push	r29
    2da8:	cf 93       	push	r28
    2daa:	1f 93       	push	r17
    2dac:	0f 93       	push	r16
    2dae:	ff 92       	push	r15
    2db0:	ef 92       	push	r14
    2db2:	19 2f       	mov	r17, r25
    2db4:	98 7f       	andi	r25, 0xF8	; 248
    2db6:	96 95       	lsr	r25
    2db8:	e9 2f       	mov	r30, r25
    2dba:	96 95       	lsr	r25
    2dbc:	96 95       	lsr	r25
    2dbe:	e9 0f       	add	r30, r25
    2dc0:	ff 27       	eor	r31, r31
    2dc2:	ec 5b       	subi	r30, 0xBC	; 188
    2dc4:	fe 4f       	sbci	r31, 0xFE	; 254
    2dc6:	99 27       	eor	r25, r25
    2dc8:	33 27       	eor	r19, r19
    2dca:	ee 24       	eor	r14, r14
    2dcc:	ff 24       	eor	r15, r15
    2dce:	a7 01       	movw	r20, r14
    2dd0:	e7 01       	movw	r28, r14
    2dd2:	05 90       	lpm	r0, Z+
    2dd4:	08 94       	sec
    2dd6:	07 94       	ror	r0
    2dd8:	28 f4       	brcc	.+10     	; 0x2de4 <__ftoa_engine+0x80>
    2dda:	36 0f       	add	r19, r22
    2ddc:	e7 1e       	adc	r14, r23
    2dde:	f8 1e       	adc	r15, r24
    2de0:	49 1f       	adc	r20, r25
    2de2:	51 1d       	adc	r21, r1
    2de4:	66 0f       	add	r22, r22
    2de6:	77 1f       	adc	r23, r23
    2de8:	88 1f       	adc	r24, r24
    2dea:	99 1f       	adc	r25, r25
    2dec:	06 94       	lsr	r0
    2dee:	a1 f7       	brne	.-24     	; 0x2dd8 <__ftoa_engine+0x74>
    2df0:	05 90       	lpm	r0, Z+
    2df2:	07 94       	ror	r0
    2df4:	28 f4       	brcc	.+10     	; 0x2e00 <__ftoa_engine+0x9c>
    2df6:	e7 0e       	add	r14, r23
    2df8:	f8 1e       	adc	r15, r24
    2dfa:	49 1f       	adc	r20, r25
    2dfc:	56 1f       	adc	r21, r22
    2dfe:	c1 1d       	adc	r28, r1
    2e00:	77 0f       	add	r23, r23
    2e02:	88 1f       	adc	r24, r24
    2e04:	99 1f       	adc	r25, r25
    2e06:	66 1f       	adc	r22, r22
    2e08:	06 94       	lsr	r0
    2e0a:	a1 f7       	brne	.-24     	; 0x2df4 <__ftoa_engine+0x90>
    2e0c:	05 90       	lpm	r0, Z+
    2e0e:	07 94       	ror	r0
    2e10:	28 f4       	brcc	.+10     	; 0x2e1c <__ftoa_engine+0xb8>
    2e12:	f8 0e       	add	r15, r24
    2e14:	49 1f       	adc	r20, r25
    2e16:	56 1f       	adc	r21, r22
    2e18:	c7 1f       	adc	r28, r23
    2e1a:	d1 1d       	adc	r29, r1
    2e1c:	88 0f       	add	r24, r24
    2e1e:	99 1f       	adc	r25, r25
    2e20:	66 1f       	adc	r22, r22
    2e22:	77 1f       	adc	r23, r23
    2e24:	06 94       	lsr	r0
    2e26:	a1 f7       	brne	.-24     	; 0x2e10 <__ftoa_engine+0xac>
    2e28:	05 90       	lpm	r0, Z+
    2e2a:	07 94       	ror	r0
    2e2c:	20 f4       	brcc	.+8      	; 0x2e36 <__ftoa_engine+0xd2>
    2e2e:	49 0f       	add	r20, r25
    2e30:	56 1f       	adc	r21, r22
    2e32:	c7 1f       	adc	r28, r23
    2e34:	d8 1f       	adc	r29, r24
    2e36:	99 0f       	add	r25, r25
    2e38:	66 1f       	adc	r22, r22
    2e3a:	77 1f       	adc	r23, r23
    2e3c:	88 1f       	adc	r24, r24
    2e3e:	06 94       	lsr	r0
    2e40:	a9 f7       	brne	.-22     	; 0x2e2c <__ftoa_engine+0xc8>
    2e42:	84 91       	lpm	r24, Z
    2e44:	10 95       	com	r17
    2e46:	17 70       	andi	r17, 0x07	; 7
    2e48:	41 f0       	breq	.+16     	; 0x2e5a <__ftoa_engine+0xf6>
    2e4a:	d6 95       	lsr	r29
    2e4c:	c7 95       	ror	r28
    2e4e:	57 95       	ror	r21
    2e50:	47 95       	ror	r20
    2e52:	f7 94       	ror	r15
    2e54:	e7 94       	ror	r14
    2e56:	1a 95       	dec	r17
    2e58:	c1 f7       	brne	.-16     	; 0x2e4a <__ftoa_engine+0xe6>
    2e5a:	ea ee       	ldi	r30, 0xEA	; 234
    2e5c:	f0 e0       	ldi	r31, 0x00	; 0
    2e5e:	68 94       	set
    2e60:	15 90       	lpm	r1, Z+
    2e62:	15 91       	lpm	r17, Z+
    2e64:	35 91       	lpm	r19, Z+
    2e66:	65 91       	lpm	r22, Z+
    2e68:	95 91       	lpm	r25, Z+
    2e6a:	05 90       	lpm	r0, Z+
    2e6c:	7f e2       	ldi	r23, 0x2F	; 47
    2e6e:	73 95       	inc	r23
    2e70:	e1 18       	sub	r14, r1
    2e72:	f1 0a       	sbc	r15, r17
    2e74:	43 0b       	sbc	r20, r19
    2e76:	56 0b       	sbc	r21, r22
    2e78:	c9 0b       	sbc	r28, r25
    2e7a:	d0 09       	sbc	r29, r0
    2e7c:	c0 f7       	brcc	.-16     	; 0x2e6e <__ftoa_engine+0x10a>
    2e7e:	e1 0c       	add	r14, r1
    2e80:	f1 1e       	adc	r15, r17
    2e82:	43 1f       	adc	r20, r19
    2e84:	56 1f       	adc	r21, r22
    2e86:	c9 1f       	adc	r28, r25
    2e88:	d0 1d       	adc	r29, r0
    2e8a:	7e f4       	brtc	.+30     	; 0x2eaa <__ftoa_engine+0x146>
    2e8c:	70 33       	cpi	r23, 0x30	; 48
    2e8e:	11 f4       	brne	.+4      	; 0x2e94 <__ftoa_engine+0x130>
    2e90:	8a 95       	dec	r24
    2e92:	e6 cf       	rjmp	.-52     	; 0x2e60 <__ftoa_engine+0xfc>
    2e94:	e8 94       	clt
    2e96:	01 50       	subi	r16, 0x01	; 1
    2e98:	30 f0       	brcs	.+12     	; 0x2ea6 <__ftoa_engine+0x142>
    2e9a:	08 0f       	add	r16, r24
    2e9c:	0a f4       	brpl	.+2      	; 0x2ea0 <__ftoa_engine+0x13c>
    2e9e:	00 27       	eor	r16, r16
    2ea0:	02 17       	cp	r16, r18
    2ea2:	08 f4       	brcc	.+2      	; 0x2ea6 <__ftoa_engine+0x142>
    2ea4:	20 2f       	mov	r18, r16
    2ea6:	23 95       	inc	r18
    2ea8:	02 2f       	mov	r16, r18
    2eaa:	7a 33       	cpi	r23, 0x3A	; 58
    2eac:	28 f0       	brcs	.+10     	; 0x2eb8 <__ftoa_engine+0x154>
    2eae:	79 e3       	ldi	r23, 0x39	; 57
    2eb0:	7d 93       	st	X+, r23
    2eb2:	2a 95       	dec	r18
    2eb4:	e9 f7       	brne	.-6      	; 0x2eb0 <__ftoa_engine+0x14c>
    2eb6:	10 c0       	rjmp	.+32     	; 0x2ed8 <__ftoa_engine+0x174>
    2eb8:	7d 93       	st	X+, r23
    2eba:	2a 95       	dec	r18
    2ebc:	89 f6       	brne	.-94     	; 0x2e60 <__ftoa_engine+0xfc>
    2ebe:	06 94       	lsr	r0
    2ec0:	97 95       	ror	r25
    2ec2:	67 95       	ror	r22
    2ec4:	37 95       	ror	r19
    2ec6:	17 95       	ror	r17
    2ec8:	17 94       	ror	r1
    2eca:	e1 18       	sub	r14, r1
    2ecc:	f1 0a       	sbc	r15, r17
    2ece:	43 0b       	sbc	r20, r19
    2ed0:	56 0b       	sbc	r21, r22
    2ed2:	c9 0b       	sbc	r28, r25
    2ed4:	d0 09       	sbc	r29, r0
    2ed6:	98 f0       	brcs	.+38     	; 0x2efe <__ftoa_engine+0x19a>
    2ed8:	23 95       	inc	r18
    2eda:	7e 91       	ld	r23, -X
    2edc:	73 95       	inc	r23
    2ede:	7a 33       	cpi	r23, 0x3A	; 58
    2ee0:	08 f0       	brcs	.+2      	; 0x2ee4 <__ftoa_engine+0x180>
    2ee2:	70 e3       	ldi	r23, 0x30	; 48
    2ee4:	7c 93       	st	X, r23
    2ee6:	20 13       	cpse	r18, r16
    2ee8:	b8 f7       	brcc	.-18     	; 0x2ed8 <__ftoa_engine+0x174>
    2eea:	7e 91       	ld	r23, -X
    2eec:	70 61       	ori	r23, 0x10	; 16
    2eee:	7d 93       	st	X+, r23
    2ef0:	30 f0       	brcs	.+12     	; 0x2efe <__ftoa_engine+0x19a>
    2ef2:	83 95       	inc	r24
    2ef4:	71 e3       	ldi	r23, 0x31	; 49
    2ef6:	7d 93       	st	X+, r23
    2ef8:	70 e3       	ldi	r23, 0x30	; 48
    2efa:	2a 95       	dec	r18
    2efc:	e1 f7       	brne	.-8      	; 0x2ef6 <__ftoa_engine+0x192>
    2efe:	11 24       	eor	r1, r1
    2f00:	ef 90       	pop	r14
    2f02:	ff 90       	pop	r15
    2f04:	0f 91       	pop	r16
    2f06:	1f 91       	pop	r17
    2f08:	cf 91       	pop	r28
    2f0a:	df 91       	pop	r29
    2f0c:	99 27       	eor	r25, r25
    2f0e:	87 fd       	sbrc	r24, 7
    2f10:	90 95       	com	r25
    2f12:	08 95       	ret

00002f14 <strnlen_P>:
    2f14:	fc 01       	movw	r30, r24
    2f16:	05 90       	lpm	r0, Z+
    2f18:	61 50       	subi	r22, 0x01	; 1
    2f1a:	70 40       	sbci	r23, 0x00	; 0
    2f1c:	01 10       	cpse	r0, r1
    2f1e:	d8 f7       	brcc	.-10     	; 0x2f16 <strnlen_P+0x2>
    2f20:	80 95       	com	r24
    2f22:	90 95       	com	r25
    2f24:	8e 0f       	add	r24, r30
    2f26:	9f 1f       	adc	r25, r31
    2f28:	08 95       	ret

00002f2a <strnlen>:
    2f2a:	fc 01       	movw	r30, r24
    2f2c:	61 50       	subi	r22, 0x01	; 1
    2f2e:	70 40       	sbci	r23, 0x00	; 0
    2f30:	01 90       	ld	r0, Z+
    2f32:	01 10       	cpse	r0, r1
    2f34:	d8 f7       	brcc	.-10     	; 0x2f2c <strnlen+0x2>
    2f36:	80 95       	com	r24
    2f38:	90 95       	com	r25
    2f3a:	8e 0f       	add	r24, r30
    2f3c:	9f 1f       	adc	r25, r31
    2f3e:	08 95       	ret

00002f40 <strrev>:
    2f40:	dc 01       	movw	r26, r24
    2f42:	fc 01       	movw	r30, r24
    2f44:	67 2f       	mov	r22, r23
    2f46:	71 91       	ld	r23, Z+
    2f48:	77 23       	and	r23, r23
    2f4a:	e1 f7       	brne	.-8      	; 0x2f44 <strrev+0x4>
    2f4c:	32 97       	sbiw	r30, 0x02	; 2
    2f4e:	04 c0       	rjmp	.+8      	; 0x2f58 <strrev+0x18>
    2f50:	7c 91       	ld	r23, X
    2f52:	6d 93       	st	X+, r22
    2f54:	70 83       	st	Z, r23
    2f56:	62 91       	ld	r22, -Z
    2f58:	ae 17       	cp	r26, r30
    2f5a:	bf 07       	cpc	r27, r31
    2f5c:	c8 f3       	brcs	.-14     	; 0x2f50 <strrev+0x10>
    2f5e:	08 95       	ret

00002f60 <fputc>:
    2f60:	0f 93       	push	r16
    2f62:	1f 93       	push	r17
    2f64:	cf 93       	push	r28
    2f66:	df 93       	push	r29
    2f68:	fb 01       	movw	r30, r22
    2f6a:	23 81       	ldd	r18, Z+3	; 0x03
    2f6c:	21 fd       	sbrc	r18, 1
    2f6e:	03 c0       	rjmp	.+6      	; 0x2f76 <fputc+0x16>
    2f70:	8f ef       	ldi	r24, 0xFF	; 255
    2f72:	9f ef       	ldi	r25, 0xFF	; 255
    2f74:	2c c0       	rjmp	.+88     	; 0x2fce <fputc+0x6e>
    2f76:	22 ff       	sbrs	r18, 2
    2f78:	16 c0       	rjmp	.+44     	; 0x2fa6 <fputc+0x46>
    2f7a:	46 81       	ldd	r20, Z+6	; 0x06
    2f7c:	57 81       	ldd	r21, Z+7	; 0x07
    2f7e:	24 81       	ldd	r18, Z+4	; 0x04
    2f80:	35 81       	ldd	r19, Z+5	; 0x05
    2f82:	42 17       	cp	r20, r18
    2f84:	53 07       	cpc	r21, r19
    2f86:	44 f4       	brge	.+16     	; 0x2f98 <fputc+0x38>
    2f88:	a0 81       	ld	r26, Z
    2f8a:	b1 81       	ldd	r27, Z+1	; 0x01
    2f8c:	9d 01       	movw	r18, r26
    2f8e:	2f 5f       	subi	r18, 0xFF	; 255
    2f90:	3f 4f       	sbci	r19, 0xFF	; 255
    2f92:	31 83       	std	Z+1, r19	; 0x01
    2f94:	20 83       	st	Z, r18
    2f96:	8c 93       	st	X, r24
    2f98:	26 81       	ldd	r18, Z+6	; 0x06
    2f9a:	37 81       	ldd	r19, Z+7	; 0x07
    2f9c:	2f 5f       	subi	r18, 0xFF	; 255
    2f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa0:	37 83       	std	Z+7, r19	; 0x07
    2fa2:	26 83       	std	Z+6, r18	; 0x06
    2fa4:	14 c0       	rjmp	.+40     	; 0x2fce <fputc+0x6e>
    2fa6:	8b 01       	movw	r16, r22
    2fa8:	ec 01       	movw	r28, r24
    2faa:	fb 01       	movw	r30, r22
    2fac:	00 84       	ldd	r0, Z+8	; 0x08
    2fae:	f1 85       	ldd	r31, Z+9	; 0x09
    2fb0:	e0 2d       	mov	r30, r0
    2fb2:	09 95       	icall
    2fb4:	89 2b       	or	r24, r25
    2fb6:	e1 f6       	brne	.-72     	; 0x2f70 <fputc+0x10>
    2fb8:	d8 01       	movw	r26, r16
    2fba:	16 96       	adiw	r26, 0x06	; 6
    2fbc:	8d 91       	ld	r24, X+
    2fbe:	9c 91       	ld	r25, X
    2fc0:	17 97       	sbiw	r26, 0x07	; 7
    2fc2:	01 96       	adiw	r24, 0x01	; 1
    2fc4:	17 96       	adiw	r26, 0x07	; 7
    2fc6:	9c 93       	st	X, r25
    2fc8:	8e 93       	st	-X, r24
    2fca:	16 97       	sbiw	r26, 0x06	; 6
    2fcc:	ce 01       	movw	r24, r28
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	1f 91       	pop	r17
    2fd4:	0f 91       	pop	r16
    2fd6:	08 95       	ret

00002fd8 <__ultoa_invert>:
    2fd8:	fa 01       	movw	r30, r20
    2fda:	aa 27       	eor	r26, r26
    2fdc:	28 30       	cpi	r18, 0x08	; 8
    2fde:	51 f1       	breq	.+84     	; 0x3034 <__ultoa_invert+0x5c>
    2fe0:	20 31       	cpi	r18, 0x10	; 16
    2fe2:	81 f1       	breq	.+96     	; 0x3044 <__ultoa_invert+0x6c>
    2fe4:	e8 94       	clt
    2fe6:	6f 93       	push	r22
    2fe8:	6e 7f       	andi	r22, 0xFE	; 254
    2fea:	6e 5f       	subi	r22, 0xFE	; 254
    2fec:	7f 4f       	sbci	r23, 0xFF	; 255
    2fee:	8f 4f       	sbci	r24, 0xFF	; 255
    2ff0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff2:	af 4f       	sbci	r26, 0xFF	; 255
    2ff4:	b1 e0       	ldi	r27, 0x01	; 1
    2ff6:	3e d0       	rcall	.+124    	; 0x3074 <__ultoa_invert+0x9c>
    2ff8:	b4 e0       	ldi	r27, 0x04	; 4
    2ffa:	3c d0       	rcall	.+120    	; 0x3074 <__ultoa_invert+0x9c>
    2ffc:	67 0f       	add	r22, r23
    2ffe:	78 1f       	adc	r23, r24
    3000:	89 1f       	adc	r24, r25
    3002:	9a 1f       	adc	r25, r26
    3004:	a1 1d       	adc	r26, r1
    3006:	68 0f       	add	r22, r24
    3008:	79 1f       	adc	r23, r25
    300a:	8a 1f       	adc	r24, r26
    300c:	91 1d       	adc	r25, r1
    300e:	a1 1d       	adc	r26, r1
    3010:	6a 0f       	add	r22, r26
    3012:	71 1d       	adc	r23, r1
    3014:	81 1d       	adc	r24, r1
    3016:	91 1d       	adc	r25, r1
    3018:	a1 1d       	adc	r26, r1
    301a:	20 d0       	rcall	.+64     	; 0x305c <__ultoa_invert+0x84>
    301c:	09 f4       	brne	.+2      	; 0x3020 <__ultoa_invert+0x48>
    301e:	68 94       	set
    3020:	3f 91       	pop	r19
    3022:	2a e0       	ldi	r18, 0x0A	; 10
    3024:	26 9f       	mul	r18, r22
    3026:	11 24       	eor	r1, r1
    3028:	30 19       	sub	r19, r0
    302a:	30 5d       	subi	r19, 0xD0	; 208
    302c:	31 93       	st	Z+, r19
    302e:	de f6       	brtc	.-74     	; 0x2fe6 <__ultoa_invert+0xe>
    3030:	cf 01       	movw	r24, r30
    3032:	08 95       	ret
    3034:	46 2f       	mov	r20, r22
    3036:	47 70       	andi	r20, 0x07	; 7
    3038:	40 5d       	subi	r20, 0xD0	; 208
    303a:	41 93       	st	Z+, r20
    303c:	b3 e0       	ldi	r27, 0x03	; 3
    303e:	0f d0       	rcall	.+30     	; 0x305e <__ultoa_invert+0x86>
    3040:	c9 f7       	brne	.-14     	; 0x3034 <__ultoa_invert+0x5c>
    3042:	f6 cf       	rjmp	.-20     	; 0x3030 <__ultoa_invert+0x58>
    3044:	46 2f       	mov	r20, r22
    3046:	4f 70       	andi	r20, 0x0F	; 15
    3048:	40 5d       	subi	r20, 0xD0	; 208
    304a:	4a 33       	cpi	r20, 0x3A	; 58
    304c:	18 f0       	brcs	.+6      	; 0x3054 <__ultoa_invert+0x7c>
    304e:	49 5d       	subi	r20, 0xD9	; 217
    3050:	31 fd       	sbrc	r19, 1
    3052:	40 52       	subi	r20, 0x20	; 32
    3054:	41 93       	st	Z+, r20
    3056:	02 d0       	rcall	.+4      	; 0x305c <__ultoa_invert+0x84>
    3058:	a9 f7       	brne	.-22     	; 0x3044 <__ultoa_invert+0x6c>
    305a:	ea cf       	rjmp	.-44     	; 0x3030 <__ultoa_invert+0x58>
    305c:	b4 e0       	ldi	r27, 0x04	; 4
    305e:	a6 95       	lsr	r26
    3060:	97 95       	ror	r25
    3062:	87 95       	ror	r24
    3064:	77 95       	ror	r23
    3066:	67 95       	ror	r22
    3068:	ba 95       	dec	r27
    306a:	c9 f7       	brne	.-14     	; 0x305e <__ultoa_invert+0x86>
    306c:	00 97       	sbiw	r24, 0x00	; 0
    306e:	61 05       	cpc	r22, r1
    3070:	71 05       	cpc	r23, r1
    3072:	08 95       	ret
    3074:	9b 01       	movw	r18, r22
    3076:	ac 01       	movw	r20, r24
    3078:	0a 2e       	mov	r0, r26
    307a:	06 94       	lsr	r0
    307c:	57 95       	ror	r21
    307e:	47 95       	ror	r20
    3080:	37 95       	ror	r19
    3082:	27 95       	ror	r18
    3084:	ba 95       	dec	r27
    3086:	c9 f7       	brne	.-14     	; 0x307a <__ultoa_invert+0xa2>
    3088:	62 0f       	add	r22, r18
    308a:	73 1f       	adc	r23, r19
    308c:	84 1f       	adc	r24, r20
    308e:	95 1f       	adc	r25, r21
    3090:	a0 1d       	adc	r26, r0
    3092:	08 95       	ret

00003094 <__prologue_saves__>:
    3094:	2f 92       	push	r2
    3096:	3f 92       	push	r3
    3098:	4f 92       	push	r4
    309a:	5f 92       	push	r5
    309c:	6f 92       	push	r6
    309e:	7f 92       	push	r7
    30a0:	8f 92       	push	r8
    30a2:	9f 92       	push	r9
    30a4:	af 92       	push	r10
    30a6:	bf 92       	push	r11
    30a8:	cf 92       	push	r12
    30aa:	df 92       	push	r13
    30ac:	ef 92       	push	r14
    30ae:	ff 92       	push	r15
    30b0:	0f 93       	push	r16
    30b2:	1f 93       	push	r17
    30b4:	cf 93       	push	r28
    30b6:	df 93       	push	r29
    30b8:	cd b7       	in	r28, 0x3d	; 61
    30ba:	de b7       	in	r29, 0x3e	; 62
    30bc:	ca 1b       	sub	r28, r26
    30be:	db 0b       	sbc	r29, r27
    30c0:	0f b6       	in	r0, 0x3f	; 63
    30c2:	f8 94       	cli
    30c4:	de bf       	out	0x3e, r29	; 62
    30c6:	0f be       	out	0x3f, r0	; 63
    30c8:	cd bf       	out	0x3d, r28	; 61
    30ca:	09 94       	ijmp

000030cc <__epilogue_restores__>:
    30cc:	2a 88       	ldd	r2, Y+18	; 0x12
    30ce:	39 88       	ldd	r3, Y+17	; 0x11
    30d0:	48 88       	ldd	r4, Y+16	; 0x10
    30d2:	5f 84       	ldd	r5, Y+15	; 0x0f
    30d4:	6e 84       	ldd	r6, Y+14	; 0x0e
    30d6:	7d 84       	ldd	r7, Y+13	; 0x0d
    30d8:	8c 84       	ldd	r8, Y+12	; 0x0c
    30da:	9b 84       	ldd	r9, Y+11	; 0x0b
    30dc:	aa 84       	ldd	r10, Y+10	; 0x0a
    30de:	b9 84       	ldd	r11, Y+9	; 0x09
    30e0:	c8 84       	ldd	r12, Y+8	; 0x08
    30e2:	df 80       	ldd	r13, Y+7	; 0x07
    30e4:	ee 80       	ldd	r14, Y+6	; 0x06
    30e6:	fd 80       	ldd	r15, Y+5	; 0x05
    30e8:	0c 81       	ldd	r16, Y+4	; 0x04
    30ea:	1b 81       	ldd	r17, Y+3	; 0x03
    30ec:	aa 81       	ldd	r26, Y+2	; 0x02
    30ee:	b9 81       	ldd	r27, Y+1	; 0x01
    30f0:	ce 0f       	add	r28, r30
    30f2:	d1 1d       	adc	r29, r1
    30f4:	0f b6       	in	r0, 0x3f	; 63
    30f6:	f8 94       	cli
    30f8:	de bf       	out	0x3e, r29	; 62
    30fa:	0f be       	out	0x3f, r0	; 63
    30fc:	cd bf       	out	0x3d, r28	; 61
    30fe:	ed 01       	movw	r28, r26
    3100:	08 95       	ret

00003102 <_exit>:
    3102:	f8 94       	cli

00003104 <__stop_program>:
    3104:	ff cf       	rjmp	.-2      	; 0x3104 <__stop_program>
